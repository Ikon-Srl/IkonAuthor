#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8009
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ikon.GD
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Runtime.Serialization;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="BaseSite_CMS")]
	public partial class IKGD_DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertIKGD_RNODE(IKGD_RNODE instance);
    partial void UpdateIKGD_RNODE(IKGD_RNODE instance);
    partial void DeleteIKGD_RNODE(IKGD_RNODE instance);
    partial void InsertIKGD_SNODE(IKGD_SNODE instance);
    partial void UpdateIKGD_SNODE(IKGD_SNODE instance);
    partial void DeleteIKGD_SNODE(IKGD_SNODE instance);
    partial void InsertIKGD_VNODE(IKGD_VNODE instance);
    partial void UpdateIKGD_VNODE(IKGD_VNODE instance);
    partial void DeleteIKGD_VNODE(IKGD_VNODE instance);
    partial void InsertIKGD_VDATA(IKGD_VDATA instance);
    partial void UpdateIKGD_VDATA(IKGD_VDATA instance);
    partial void DeleteIKGD_VDATA(IKGD_VDATA instance);
    partial void InsertIKGD_INODE(IKGD_INODE instance);
    partial void UpdateIKGD_INODE(IKGD_INODE instance);
    partial void DeleteIKGD_INODE(IKGD_INODE instance);
    partial void InsertIKGD_STREAM(IKGD_STREAM instance);
    partial void UpdateIKGD_STREAM(IKGD_STREAM instance);
    partial void DeleteIKGD_STREAM(IKGD_STREAM instance);
    partial void InsertIKGD_MSTREAM(IKGD_MSTREAM instance);
    partial void UpdateIKGD_MSTREAM(IKGD_MSTREAM instance);
    partial void DeleteIKGD_MSTREAM(IKGD_MSTREAM instance);
    partial void InsertIKGD_FREEZED(IKGD_FREEZED instance);
    partial void UpdateIKGD_FREEZED(IKGD_FREEZED instance);
    partial void DeleteIKGD_FREEZED(IKGD_FREEZED instance);
    partial void InsertIKGD_PROPERTY(IKGD_PROPERTY instance);
    partial void UpdateIKGD_PROPERTY(IKGD_PROPERTY instance);
    partial void DeleteIKGD_PROPERTY(IKGD_PROPERTY instance);
    partial void InsertIKGD_RELATION(IKGD_RELATION instance);
    partial void UpdateIKGD_RELATION(IKGD_RELATION instance);
    partial void DeleteIKGD_RELATION(IKGD_RELATION instance);
    partial void InsertIKGD_SEARCH(IKGD_SEARCH instance);
    partial void UpdateIKGD_SEARCH(IKGD_SEARCH instance);
    partial void DeleteIKGD_SEARCH(IKGD_SEARCH instance);
    partial void InsertIKGD_SNAPSHOT(IKGD_SNAPSHOT instance);
    partial void UpdateIKGD_SNAPSHOT(IKGD_SNAPSHOT instance);
    partial void DeleteIKGD_SNAPSHOT(IKGD_SNAPSHOT instance);
    partial void InsertIKG_PREF(IKG_PREF instance);
    partial void UpdateIKG_PREF(IKG_PREF instance);
    partial void DeleteIKG_PREF(IKG_PREF instance);
    partial void InsertIKG_SETTING(IKG_SETTING instance);
    partial void UpdateIKG_SETTING(IKG_SETTING instance);
    partial void DeleteIKG_SETTING(IKG_SETTING instance);
    partial void InsertIKG_TAB(IKG_TAB instance);
    partial void UpdateIKG_TAB(IKG_TAB instance);
    partial void DeleteIKG_TAB(IKG_TAB instance);
    partial void InsertIKG_WIDGET(IKG_WIDGET instance);
    partial void UpdateIKG_WIDGET(IKG_WIDGET instance);
    partial void DeleteIKG_WIDGET(IKG_WIDGET instance);
    partial void InsertIKGD_ACL(IKGD_ACL instance);
    partial void UpdateIKGD_ACL(IKGD_ACL instance);
    partial void DeleteIKGD_ACL(IKGD_ACL instance);
    partial void InsertIKGD_ADMIN(IKGD_ADMIN instance);
    partial void UpdateIKGD_ADMIN(IKGD_ADMIN instance);
    partial void DeleteIKGD_ADMIN(IKGD_ADMIN instance);
    partial void InsertIKGD_CONFIG(IKGD_CONFIG instance);
    partial void UpdateIKGD_CONFIG(IKGD_CONFIG instance);
    partial void DeleteIKGD_CONFIG(IKGD_CONFIG instance);
    partial void InsertIKGD_KEYSTORAGE(IKGD_KEYSTORAGE instance);
    partial void UpdateIKGD_KEYSTORAGE(IKGD_KEYSTORAGE instance);
    partial void DeleteIKGD_KEYSTORAGE(IKGD_KEYSTORAGE instance);
    partial void InsertIKGD_KEYSTORAGE_MAP(IKGD_KEYSTORAGE_MAP instance);
    partial void UpdateIKGD_KEYSTORAGE_MAP(IKGD_KEYSTORAGE_MAP instance);
    partial void DeleteIKGD_KEYSTORAGE_MAP(IKGD_KEYSTORAGE_MAP instance);
    partial void InsertLazyLoginMapper(LazyLoginMapper instance);
    partial void UpdateLazyLoginMapper(LazyLoginMapper instance);
    partial void DeleteLazyLoginMapper(LazyLoginMapper instance);
    partial void InsertLazyLogin_Log(LazyLogin_Log instance);
    partial void UpdateLazyLogin_Log(LazyLogin_Log instance);
    partial void DeleteLazyLogin_Log(LazyLogin_Log instance);
    partial void InsertLazyLogin_Vote(LazyLogin_Vote instance);
    partial void UpdateLazyLogin_Vote(LazyLogin_Vote instance);
    partial void DeleteLazyLogin_Vote(LazyLogin_Vote instance);
    partial void InsertIKGD_ASSEMBLY(IKGD_ASSEMBLY instance);
    partial void UpdateIKGD_ASSEMBLY(IKGD_ASSEMBLY instance);
    partial void DeleteIKGD_ASSEMBLY(IKGD_ASSEMBLY instance);
    partial void InsertIKCMS_SEO(IKCMS_SEO instance);
    partial void UpdateIKCMS_SEO(IKCMS_SEO instance);
    partial void DeleteIKCMS_SEO(IKCMS_SEO instance);
    partial void InsertIKCAT_Attribute(IKCAT_Attribute instance);
    partial void UpdateIKCAT_Attribute(IKCAT_Attribute instance);
    partial void DeleteIKCAT_Attribute(IKCAT_Attribute instance);
    partial void InsertIKCAT_AttributeResource(IKCAT_AttributeResource instance);
    partial void UpdateIKCAT_AttributeResource(IKCAT_AttributeResource instance);
    partial void DeleteIKCAT_AttributeResource(IKCAT_AttributeResource instance);
    partial void InsertIKCAT_AttributeStream(IKCAT_AttributeStream instance);
    partial void UpdateIKCAT_AttributeStream(IKCAT_AttributeStream instance);
    partial void DeleteIKCAT_AttributeStream(IKCAT_AttributeStream instance);
    partial void InsertIKCAT_ElementFolder(IKCAT_ElementFolder instance);
    partial void UpdateIKCAT_ElementFolder(IKCAT_ElementFolder instance);
    partial void DeleteIKCAT_ElementFolder(IKCAT_ElementFolder instance);
    partial void InsertIKCAT_ElementMain(IKCAT_ElementMain instance);
    partial void UpdateIKCAT_ElementMain(IKCAT_ElementMain instance);
    partial void DeleteIKCAT_ElementMain(IKCAT_ElementMain instance);
    partial void InsertIKCAT_ElementVariant(IKCAT_ElementVariant instance);
    partial void UpdateIKCAT_ElementVariant(IKCAT_ElementVariant instance);
    partial void DeleteIKCAT_ElementVariant(IKCAT_ElementVariant instance);
    partial void InsertIKCAT_ElementAttribute(IKCAT_ElementAttribute instance);
    partial void UpdateIKCAT_ElementAttribute(IKCAT_ElementAttribute instance);
    partial void DeleteIKCAT_ElementAttribute(IKCAT_ElementAttribute instance);
    partial void InsertIKG_LOGGER(IKG_LOGGER instance);
    partial void UpdateIKG_LOGGER(IKG_LOGGER instance);
    partial void DeleteIKG_LOGGER(IKG_LOGGER instance);
    partial void InsertIKG_HITLOG(IKG_HITLOG instance);
    partial void UpdateIKG_HITLOG(IKG_HITLOG instance);
    partial void DeleteIKG_HITLOG(IKG_HITLOG instance);
    partial void InsertIKG_HITACC(IKG_HITACC instance);
    partial void UpdateIKG_HITACC(IKG_HITACC instance);
    partial void DeleteIKG_HITACC(IKG_HITACC instance);
    partial void InsertIKGD_QueueMeta(IKGD_QueueMeta instance);
    partial void UpdateIKGD_QueueMeta(IKGD_QueueMeta instance);
    partial void DeleteIKGD_QueueMeta(IKGD_QueueMeta instance);
    partial void InsertIKGD_QueueData(IKGD_QueueData instance);
    partial void UpdateIKGD_QueueData(IKGD_QueueData instance);
    partial void DeleteIKGD_QueueData(IKGD_QueueData instance);
    partial void InsertIKGD_VDATA_KEYVALUE(IKGD_VDATA_KEYVALUE instance);
    partial void UpdateIKGD_VDATA_KEYVALUE(IKGD_VDATA_KEYVALUE instance);
    partial void DeleteIKGD_VDATA_KEYVALUE(IKGD_VDATA_KEYVALUE instance);
    partial void InsertSSO_KEYVALUE(SSO_KEYVALUE instance);
    partial void UpdateSSO_KEYVALUE(SSO_KEYVALUE instance);
    partial void DeleteSSO_KEYVALUE(SSO_KEYVALUE instance);
    partial void InsertIKATT_Attribute(IKATT_Attribute instance);
    partial void UpdateIKATT_Attribute(IKATT_Attribute instance);
    partial void DeleteIKATT_Attribute(IKATT_Attribute instance);
    partial void InsertIKATT_AttributeStream(IKATT_AttributeStream instance);
    partial void UpdateIKATT_AttributeStream(IKATT_AttributeStream instance);
    partial void DeleteIKATT_AttributeStream(IKATT_AttributeStream instance);
    partial void InsertIKATT_AttributeMapping(IKATT_AttributeMapping instance);
    partial void UpdateIKATT_AttributeMapping(IKATT_AttributeMapping instance);
    partial void DeleteIKATT_AttributeMapping(IKATT_AttributeMapping instance);
    partial void InsertIKQM_Queue(IKQM_Queue instance);
    partial void UpdateIKQM_Queue(IKQM_Queue instance);
    partial void DeleteIKQM_Queue(IKQM_Queue instance);
    partial void InsertIKQM_QueueBlob(IKQM_QueueBlob instance);
    partial void UpdateIKQM_QueueBlob(IKQM_QueueBlob instance);
    partial void DeleteIKQM_QueueBlob(IKQM_QueueBlob instance);
    partial void InsertIKQM_QueueLog(IKQM_QueueLog instance);
    partial void UpdateIKQM_QueueLog(IKQM_QueueLog instance);
    partial void DeleteIKQM_QueueLog(IKQM_QueueLog instance);
    #endregion
		
		public IKGD_DataContext() : 
				base(global::IKGD_VFS_Library.Properties.Settings.Default.GDCS, mappingSource)
		{
			OnCreated();
		}
		
		public IKGD_DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IKGD_DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IKGD_DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IKGD_DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<IKGD_RNODE> IKGD_RNODEs
		{
			get
			{
				return this.GetTable<IKGD_RNODE>();
			}
		}
		
		public System.Data.Linq.Table<IKGD_SNODE> IKGD_SNODEs
		{
			get
			{
				return this.GetTable<IKGD_SNODE>();
			}
		}
		
		public System.Data.Linq.Table<IKGD_VNODE> IKGD_VNODEs
		{
			get
			{
				return this.GetTable<IKGD_VNODE>();
			}
		}
		
		public System.Data.Linq.Table<IKGD_VDATA> IKGD_VDATAs
		{
			get
			{
				return this.GetTable<IKGD_VDATA>();
			}
		}
		
		public System.Data.Linq.Table<IKGD_INODE> IKGD_INODEs
		{
			get
			{
				return this.GetTable<IKGD_INODE>();
			}
		}
		
		public System.Data.Linq.Table<IKGD_STREAM> IKGD_STREAMs
		{
			get
			{
				return this.GetTable<IKGD_STREAM>();
			}
		}
		
		public System.Data.Linq.Table<IKGD_MSTREAM> IKGD_MSTREAMs
		{
			get
			{
				return this.GetTable<IKGD_MSTREAM>();
			}
		}
		
		public System.Data.Linq.Table<IKGD_FREEZED> IKGD_FREEZEDs
		{
			get
			{
				return this.GetTable<IKGD_FREEZED>();
			}
		}
		
		public System.Data.Linq.Table<IKGD_PROPERTY> IKGD_PROPERTies
		{
			get
			{
				return this.GetTable<IKGD_PROPERTY>();
			}
		}
		
		public System.Data.Linq.Table<IKGD_RELATION> IKGD_RELATIONs
		{
			get
			{
				return this.GetTable<IKGD_RELATION>();
			}
		}
		
		public System.Data.Linq.Table<IKGD_SEARCH> IKGD_SEARCHes
		{
			get
			{
				return this.GetTable<IKGD_SEARCH>();
			}
		}
		
		public System.Data.Linq.Table<IKGD_SNAPSHOT> IKGD_SNAPSHOTs
		{
			get
			{
				return this.GetTable<IKGD_SNAPSHOT>();
			}
		}
		
		public System.Data.Linq.Table<IKG_PREF> IKG_PREFs
		{
			get
			{
				return this.GetTable<IKG_PREF>();
			}
		}
		
		public System.Data.Linq.Table<IKG_SETTING> IKG_SETTINGs
		{
			get
			{
				return this.GetTable<IKG_SETTING>();
			}
		}
		
		public System.Data.Linq.Table<IKG_TAB> IKG_TABs
		{
			get
			{
				return this.GetTable<IKG_TAB>();
			}
		}
		
		public System.Data.Linq.Table<IKG_WIDGET> IKG_WIDGETs
		{
			get
			{
				return this.GetTable<IKG_WIDGET>();
			}
		}
		
		public System.Data.Linq.Table<IKGD_ACL> IKGD_ACLs
		{
			get
			{
				return this.GetTable<IKGD_ACL>();
			}
		}
		
		public System.Data.Linq.Table<IKGD_ADMIN> IKGD_ADMINs
		{
			get
			{
				return this.GetTable<IKGD_ADMIN>();
			}
		}
		
		public System.Data.Linq.Table<IKGD_CONFIG> IKGD_CONFIGs
		{
			get
			{
				return this.GetTable<IKGD_CONFIG>();
			}
		}
		
		public System.Data.Linq.Table<IKGD_KEYSTORAGE> IKGD_KEYSTORAGEs
		{
			get
			{
				return this.GetTable<IKGD_KEYSTORAGE>();
			}
		}
		
		public System.Data.Linq.Table<IKGD_KEYSTORAGE_MAP> IKGD_KEYSTORAGE_MAPs
		{
			get
			{
				return this.GetTable<IKGD_KEYSTORAGE_MAP>();
			}
		}
		
		public System.Data.Linq.Table<LazyLoginMapper> LazyLoginMappers
		{
			get
			{
				return this.GetTable<LazyLoginMapper>();
			}
		}
		
		public System.Data.Linq.Table<LazyLogin_Log> LazyLogin_Logs
		{
			get
			{
				return this.GetTable<LazyLogin_Log>();
			}
		}
		
		public System.Data.Linq.Table<LazyLogin_Vote> LazyLogin_Votes
		{
			get
			{
				return this.GetTable<LazyLogin_Vote>();
			}
		}
		
		public System.Data.Linq.Table<IKGD_ASSEMBLY> IKGD_ASSEMBLies
		{
			get
			{
				return this.GetTable<IKGD_ASSEMBLY>();
			}
		}
		
		public System.Data.Linq.Table<IKCMS_SEO> IKCMS_SEOs
		{
			get
			{
				return this.GetTable<IKCMS_SEO>();
			}
		}
		
		public System.Data.Linq.Table<IKCAT_Attribute> IKCAT_Attributes
		{
			get
			{
				return this.GetTable<IKCAT_Attribute>();
			}
		}
		
		public System.Data.Linq.Table<IKCAT_AttributeResource> IKCAT_AttributeResources
		{
			get
			{
				return this.GetTable<IKCAT_AttributeResource>();
			}
		}
		
		public System.Data.Linq.Table<IKCAT_AttributeStream> IKCAT_AttributeStreams
		{
			get
			{
				return this.GetTable<IKCAT_AttributeStream>();
			}
		}
		
		public System.Data.Linq.Table<IKCAT_ElementFolder> IKCAT_ElementFolders
		{
			get
			{
				return this.GetTable<IKCAT_ElementFolder>();
			}
		}
		
		public System.Data.Linq.Table<IKCAT_ElementMain> IKCAT_ElementMains
		{
			get
			{
				return this.GetTable<IKCAT_ElementMain>();
			}
		}
		
		public System.Data.Linq.Table<IKCAT_ElementVariant> IKCAT_ElementVariants
		{
			get
			{
				return this.GetTable<IKCAT_ElementVariant>();
			}
		}
		
		public System.Data.Linq.Table<IKCAT_ElementAttribute> IKCAT_ElementAttributes
		{
			get
			{
				return this.GetTable<IKCAT_ElementAttribute>();
			}
		}
		
		public System.Data.Linq.Table<IKG_LOGGER> IKG_LOGGERs
		{
			get
			{
				return this.GetTable<IKG_LOGGER>();
			}
		}
		
		public System.Data.Linq.Table<IKG_HITLOG> IKG_HITLOGs
		{
			get
			{
				return this.GetTable<IKG_HITLOG>();
			}
		}
		
		public System.Data.Linq.Table<IKG_HITACC> IKG_HITACCs
		{
			get
			{
				return this.GetTable<IKG_HITACC>();
			}
		}
		
		public System.Data.Linq.Table<IKG_HITLOG_ARCHIVE> IKG_HITLOG_ARCHIVEs
		{
			get
			{
				return this.GetTable<IKG_HITLOG_ARCHIVE>();
			}
		}
		
		public System.Data.Linq.Table<IKGD_QueueMeta> IKGD_QueueMetas
		{
			get
			{
				return this.GetTable<IKGD_QueueMeta>();
			}
		}
		
		public System.Data.Linq.Table<IKGD_QueueData> IKGD_QueueDatas
		{
			get
			{
				return this.GetTable<IKGD_QueueData>();
			}
		}
		
		public System.Data.Linq.Table<IKGD_VDATA_KEYVALUE> IKGD_VDATA_KEYVALUEs
		{
			get
			{
				return this.GetTable<IKGD_VDATA_KEYVALUE>();
			}
		}
		
		public System.Data.Linq.Table<SSO_KEYVALUE> SSO_KEYVALUEs
		{
			get
			{
				return this.GetTable<SSO_KEYVALUE>();
			}
		}
		
		public System.Data.Linq.Table<IKATT_Attribute> IKATT_Attributes
		{
			get
			{
				return this.GetTable<IKATT_Attribute>();
			}
		}
		
		public System.Data.Linq.Table<IKATT_AttributeStream> IKATT_AttributeStreams
		{
			get
			{
				return this.GetTable<IKATT_AttributeStream>();
			}
		}
		
		public System.Data.Linq.Table<IKATT_AttributeMapping> IKATT_AttributeMappings
		{
			get
			{
				return this.GetTable<IKATT_AttributeMapping>();
			}
		}
		
		public System.Data.Linq.Table<IKQM_Queue> IKQM_Queues
		{
			get
			{
				return this.GetTable<IKQM_Queue>();
			}
		}
		
		public System.Data.Linq.Table<IKQM_QueueBlob> IKQM_QueueBlobs
		{
			get
			{
				return this.GetTable<IKQM_QueueBlob>();
			}
		}
		
		public System.Data.Linq.Table<IKQM_QueueLog> IKQM_QueueLogs
		{
			get
			{
				return this.GetTable<IKQM_QueueLog>();
			}
		}
	}
	
	[Table(Name="dbo.IKGD_RNODE")]
	[DataContract()]
	public partial class IKGD_RNODE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _code;
		
		private System.DateTime _date_creat;
		
		private System.Data.Linq.Link<string> _username;
		
		private bool _flag_folder;
		
		private System.Nullable<System.DateTime> _locked;
		
		private string _locked_by;
		
		private EntitySet<IKGD_SNODE> _IKGD_SNODEs;
		
		private EntitySet<IKGD_VNODE> _IKGD_VNODEs;
		
		private EntitySet<IKGD_VNODE> _IKGD_VNODEs_folder;
		
		private EntitySet<IKGD_VNODE> _IKGD_VNODEs_parent;
		
		private EntitySet<IKGD_VDATA> _IKGD_VDATAs;
		
		private EntitySet<IKGD_INODE> _IKGD_INODEs;
		
		private EntitySet<IKGD_PROPERTY> _IKGD_PROPERTies;
		
		private EntitySet<IKGD_RELATION> _IKGD_RELATIONs;
		
		private EntitySet<IKGD_RELATION> _IKGD_RELATIONs_dst;
		
		private EntitySet<IKGD_ACL> _IKGD_ACLs;
		
		private EntitySet<LazyLogin_Vote> _LazyLogin_Votes;
		
		private EntitySet<IKCAT_ElementFolder> _IKCAT_ElementFolders;
		
		private EntitySet<IKCAT_ElementMain> _IKCAT_ElementMains;
		
		private EntitySet<IKG_HITLOG> _IKG_HITLOGs;
		
		private EntitySet<IKG_HITACC> _IKG_HITACCs;
		
		private EntitySet<IKGD_VDATA_KEYVALUE> _IKGD_VDATA_KEYVALUEs;
		
		private EntitySet<IKATT_AttributeMapping> _IKATT_AttributeMappings;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncodeChanging(int value);
    partial void OncodeChanged();
    partial void Ondate_creatChanging(System.DateTime value);
    partial void Ondate_creatChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void Onflag_folderChanging(bool value);
    partial void Onflag_folderChanged();
    partial void OnlockedChanging(System.Nullable<System.DateTime> value);
    partial void OnlockedChanged();
    partial void Onlocked_byChanging(string value);
    partial void Onlocked_byChanged();
    #endregion
		
		public IKGD_RNODE()
		{
			this.Initialize();
		}
		
		[Column(Storage="_code", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[Column(Storage="_date_creat", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public System.DateTime date_creat
		{
			get
			{
				return this._date_creat;
			}
			set
			{
				if ((this._date_creat != value))
				{
					this.Ondate_creatChanging(value);
					this.SendPropertyChanging();
					this._date_creat = value;
					this.SendPropertyChanged("date_creat");
					this.Ondate_creatChanged();
				}
			}
		}
		
		[Column(Storage="_username", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public string username
		{
			get
			{
				return this._username.Value;
			}
			set
			{
				if ((this._username.Value != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username.Value = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[Column(Storage="_flag_folder", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public bool flag_folder
		{
			get
			{
				return this._flag_folder;
			}
			set
			{
				if ((this._flag_folder != value))
				{
					this.Onflag_folderChanging(value);
					this.SendPropertyChanging();
					this._flag_folder = value;
					this.SendPropertyChanged("flag_folder");
					this.Onflag_folderChanged();
				}
			}
		}
		
		[Column(Storage="_locked", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public System.Nullable<System.DateTime> locked
		{
			get
			{
				return this._locked;
			}
			set
			{
				if ((this._locked != value))
				{
					this.OnlockedChanging(value);
					this.SendPropertyChanging();
					this._locked = value;
					this.SendPropertyChanged("locked");
					this.OnlockedChanged();
				}
			}
		}
		
		[Column(Storage="_locked_by", DbType="VarChar(100)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public string locked_by
		{
			get
			{
				return this._locked_by;
			}
			set
			{
				if ((this._locked_by != value))
				{
					this.Onlocked_byChanging(value);
					this.SendPropertyChanging();
					this._locked_by = value;
					this.SendPropertyChanged("locked_by");
					this.Onlocked_byChanged();
				}
			}
		}
		
		[Association(Name="IKGD_RNODE_IKGD_SNODE", Storage="_IKGD_SNODEs", ThisKey="code", OtherKey="rnode")]
		[DataMember(Order=7, EmitDefaultValue=false)]
		public EntitySet<IKGD_SNODE> IKGD_SNODEs
		{
			get
			{
				if ((this.serializing 
							&& (this._IKGD_SNODEs.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKGD_SNODEs;
			}
			set
			{
				this._IKGD_SNODEs.Assign(value);
			}
		}
		
		[Association(Name="IKGD_RNODE_IKGD_VNODE", Storage="_IKGD_VNODEs", ThisKey="code", OtherKey="rnode")]
		[DataMember(Order=8, EmitDefaultValue=false)]
		public EntitySet<IKGD_VNODE> IKGD_VNODEs
		{
			get
			{
				if ((this.serializing 
							&& (this._IKGD_VNODEs.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKGD_VNODEs;
			}
			set
			{
				this._IKGD_VNODEs.Assign(value);
			}
		}
		
		[Association(Name="IKGD_RNODE_IKGD_VNODE1", Storage="_IKGD_VNODEs_folder", ThisKey="code", OtherKey="folder")]
		[DataMember(Order=9, EmitDefaultValue=false)]
		public EntitySet<IKGD_VNODE> IKGD_VNODEs_folder
		{
			get
			{
				if ((this.serializing 
							&& (this._IKGD_VNODEs_folder.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKGD_VNODEs_folder;
			}
			set
			{
				this._IKGD_VNODEs_folder.Assign(value);
			}
		}
		
		[Association(Name="IKGD_RNODE_IKGD_VNODE2", Storage="_IKGD_VNODEs_parent", ThisKey="code", OtherKey="parent")]
		[DataMember(Order=10, EmitDefaultValue=false)]
		public EntitySet<IKGD_VNODE> IKGD_VNODEs_parent
		{
			get
			{
				if ((this.serializing 
							&& (this._IKGD_VNODEs_parent.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKGD_VNODEs_parent;
			}
			set
			{
				this._IKGD_VNODEs_parent.Assign(value);
			}
		}
		
		[Association(Name="IKGD_RNODE_IKGD_VDATA", Storage="_IKGD_VDATAs", ThisKey="code", OtherKey="rnode")]
		[DataMember(Order=11, EmitDefaultValue=false)]
		public EntitySet<IKGD_VDATA> IKGD_VDATAs
		{
			get
			{
				if ((this.serializing 
							&& (this._IKGD_VDATAs.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKGD_VDATAs;
			}
			set
			{
				this._IKGD_VDATAs.Assign(value);
			}
		}
		
		[Association(Name="IKGD_RNODE_IKGD_INODE", Storage="_IKGD_INODEs", ThisKey="code", OtherKey="rnode")]
		[DataMember(Order=12, EmitDefaultValue=false)]
		public EntitySet<IKGD_INODE> IKGD_INODEs
		{
			get
			{
				if ((this.serializing 
							&& (this._IKGD_INODEs.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKGD_INODEs;
			}
			set
			{
				this._IKGD_INODEs.Assign(value);
			}
		}
		
		[Association(Name="IKGD_RNODE_IKGD_PROPERTY", Storage="_IKGD_PROPERTies", ThisKey="code", OtherKey="rnode")]
		[DataMember(Order=13, EmitDefaultValue=false)]
		public EntitySet<IKGD_PROPERTY> IKGD_PROPERTies
		{
			get
			{
				if ((this.serializing 
							&& (this._IKGD_PROPERTies.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKGD_PROPERTies;
			}
			set
			{
				this._IKGD_PROPERTies.Assign(value);
			}
		}
		
		[Association(Name="IKGD_RNODE_IKGD_RELATION", Storage="_IKGD_RELATIONs", ThisKey="code", OtherKey="rnode")]
		[DataMember(Order=14, EmitDefaultValue=false)]
		public EntitySet<IKGD_RELATION> IKGD_RELATIONs
		{
			get
			{
				if ((this.serializing 
							&& (this._IKGD_RELATIONs.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKGD_RELATIONs;
			}
			set
			{
				this._IKGD_RELATIONs.Assign(value);
			}
		}
		
		[Association(Name="IKGD_RNODE_IKGD_RELATION1", Storage="_IKGD_RELATIONs_dst", ThisKey="code", OtherKey="rnode_dst")]
		[DataMember(Order=15, EmitDefaultValue=false)]
		public EntitySet<IKGD_RELATION> IKGD_RELATIONs_dst
		{
			get
			{
				if ((this.serializing 
							&& (this._IKGD_RELATIONs_dst.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKGD_RELATIONs_dst;
			}
			set
			{
				this._IKGD_RELATIONs_dst.Assign(value);
			}
		}
		
		[Association(Name="IKGD_RNODE_IKGD_ACL", Storage="_IKGD_ACLs", ThisKey="code", OtherKey="rnode")]
		[DataMember(Order=16, EmitDefaultValue=false)]
		public EntitySet<IKGD_ACL> IKGD_ACLs
		{
			get
			{
				if ((this.serializing 
							&& (this._IKGD_ACLs.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKGD_ACLs;
			}
			set
			{
				this._IKGD_ACLs.Assign(value);
			}
		}
		
		[Association(Name="IKGD_RNODE_LazyLogin_Vote", Storage="_LazyLogin_Votes", ThisKey="code", OtherKey="rNode")]
		[DataMember(Order=17, EmitDefaultValue=false)]
		public EntitySet<LazyLogin_Vote> LazyLogin_Votes
		{
			get
			{
				if ((this.serializing 
							&& (this._LazyLogin_Votes.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._LazyLogin_Votes;
			}
			set
			{
				this._LazyLogin_Votes.Assign(value);
			}
		}
		
		[Association(Name="IKGD_RNODE_IKCAT_ElementFolder", Storage="_IKCAT_ElementFolders", ThisKey="code", OtherKey="rNode")]
		[DataMember(Order=18, EmitDefaultValue=false)]
		public EntitySet<IKCAT_ElementFolder> IKCAT_ElementFolders
		{
			get
			{
				if ((this.serializing 
							&& (this._IKCAT_ElementFolders.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKCAT_ElementFolders;
			}
			set
			{
				this._IKCAT_ElementFolders.Assign(value);
			}
		}
		
		[Association(Name="IKGD_RNODE_IKCAT_ElementMain", Storage="_IKCAT_ElementMains", ThisKey="code", OtherKey="rNode")]
		[DataMember(Order=19, EmitDefaultValue=false)]
		public EntitySet<IKCAT_ElementMain> IKCAT_ElementMains
		{
			get
			{
				if ((this.serializing 
							&& (this._IKCAT_ElementMains.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKCAT_ElementMains;
			}
			set
			{
				this._IKCAT_ElementMains.Assign(value);
			}
		}
		
		[Association(Name="IKGD_RNODE_IKG_HITLOG", Storage="_IKG_HITLOGs", ThisKey="code", OtherKey="resID")]
		[DataMember(Order=20, EmitDefaultValue=false)]
		public EntitySet<IKG_HITLOG> IKG_HITLOGs
		{
			get
			{
				if ((this.serializing 
							&& (this._IKG_HITLOGs.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKG_HITLOGs;
			}
			set
			{
				this._IKG_HITLOGs.Assign(value);
			}
		}
		
		[Association(Name="IKGD_RNODE_IKG_HITACC", Storage="_IKG_HITACCs", ThisKey="code", OtherKey="rNode")]
		[DataMember(Order=21, EmitDefaultValue=false)]
		public EntitySet<IKG_HITACC> IKG_HITACCs
		{
			get
			{
				if ((this.serializing 
							&& (this._IKG_HITACCs.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKG_HITACCs;
			}
			set
			{
				this._IKG_HITACCs.Assign(value);
			}
		}
		
		[Association(Name="IKGD_RNODE_IKGD_VDATA_KEYVALUE", Storage="_IKGD_VDATA_KEYVALUEs", ThisKey="code", OtherKey="rNode")]
		[DataMember(Order=22, EmitDefaultValue=false)]
		public EntitySet<IKGD_VDATA_KEYVALUE> IKGD_VDATA_KEYVALUEs
		{
			get
			{
				if ((this.serializing 
							&& (this._IKGD_VDATA_KEYVALUEs.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKGD_VDATA_KEYVALUEs;
			}
			set
			{
				this._IKGD_VDATA_KEYVALUEs.Assign(value);
			}
		}
		
		[Association(Name="IKGD_RNODE_IKATT_AttributeMapping", Storage="_IKATT_AttributeMappings", ThisKey="code", OtherKey="rNode")]
		[DataMember(Order=23, EmitDefaultValue=false)]
		public EntitySet<IKATT_AttributeMapping> IKATT_AttributeMappings
		{
			get
			{
				if ((this.serializing 
							&& (this._IKATT_AttributeMappings.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKATT_AttributeMappings;
			}
			set
			{
				this._IKATT_AttributeMappings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IKGD_SNODEs(IKGD_SNODE entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_RNODE = this;
		}
		
		private void detach_IKGD_SNODEs(IKGD_SNODE entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_RNODE = null;
		}
		
		private void attach_IKGD_VNODEs(IKGD_VNODE entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_RNODE = this;
		}
		
		private void detach_IKGD_VNODEs(IKGD_VNODE entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_RNODE = null;
		}
		
		private void attach_IKGD_VNODEs_folder(IKGD_VNODE entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_RNODE_folder = this;
		}
		
		private void detach_IKGD_VNODEs_folder(IKGD_VNODE entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_RNODE_folder = null;
		}
		
		private void attach_IKGD_VNODEs_parent(IKGD_VNODE entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_RNODE_parent = this;
		}
		
		private void detach_IKGD_VNODEs_parent(IKGD_VNODE entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_RNODE_parent = null;
		}
		
		private void attach_IKGD_VDATAs(IKGD_VDATA entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_RNODE = this;
		}
		
		private void detach_IKGD_VDATAs(IKGD_VDATA entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_RNODE = null;
		}
		
		private void attach_IKGD_INODEs(IKGD_INODE entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_RNODE = this;
		}
		
		private void detach_IKGD_INODEs(IKGD_INODE entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_RNODE = null;
		}
		
		private void attach_IKGD_PROPERTies(IKGD_PROPERTY entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_RNODE = this;
		}
		
		private void detach_IKGD_PROPERTies(IKGD_PROPERTY entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_RNODE = null;
		}
		
		private void attach_IKGD_RELATIONs(IKGD_RELATION entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_RNODE = this;
		}
		
		private void detach_IKGD_RELATIONs(IKGD_RELATION entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_RNODE = null;
		}
		
		private void attach_IKGD_RELATIONs_dst(IKGD_RELATION entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_RNODE_dst = this;
		}
		
		private void detach_IKGD_RELATIONs_dst(IKGD_RELATION entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_RNODE_dst = null;
		}
		
		private void attach_IKGD_ACLs(IKGD_ACL entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_RNODE = this;
		}
		
		private void detach_IKGD_ACLs(IKGD_ACL entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_RNODE = null;
		}
		
		private void attach_LazyLogin_Votes(LazyLogin_Vote entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_RNODE = this;
		}
		
		private void detach_LazyLogin_Votes(LazyLogin_Vote entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_RNODE = null;
		}
		
		private void attach_IKCAT_ElementFolders(IKCAT_ElementFolder entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_RNODE = this;
		}
		
		private void detach_IKCAT_ElementFolders(IKCAT_ElementFolder entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_RNODE = null;
		}
		
		private void attach_IKCAT_ElementMains(IKCAT_ElementMain entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_RNODE = this;
		}
		
		private void detach_IKCAT_ElementMains(IKCAT_ElementMain entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_RNODE = null;
		}
		
		private void attach_IKG_HITLOGs(IKG_HITLOG entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_RNODE = this;
		}
		
		private void detach_IKG_HITLOGs(IKG_HITLOG entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_RNODE = null;
		}
		
		private void attach_IKG_HITACCs(IKG_HITACC entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_RNODE = this;
		}
		
		private void detach_IKG_HITACCs(IKG_HITACC entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_RNODE = null;
		}
		
		private void attach_IKGD_VDATA_KEYVALUEs(IKGD_VDATA_KEYVALUE entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_RNODE = this;
		}
		
		private void detach_IKGD_VDATA_KEYVALUEs(IKGD_VDATA_KEYVALUE entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_RNODE = null;
		}
		
		private void attach_IKATT_AttributeMappings(IKATT_AttributeMapping entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_RNODE = this;
		}
		
		private void detach_IKATT_AttributeMappings(IKATT_AttributeMapping entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_RNODE = null;
		}
		
		private void Initialize()
		{
			this._IKGD_SNODEs = new EntitySet<IKGD_SNODE>(new Action<IKGD_SNODE>(this.attach_IKGD_SNODEs), new Action<IKGD_SNODE>(this.detach_IKGD_SNODEs));
			this._IKGD_VNODEs = new EntitySet<IKGD_VNODE>(new Action<IKGD_VNODE>(this.attach_IKGD_VNODEs), new Action<IKGD_VNODE>(this.detach_IKGD_VNODEs));
			this._IKGD_VNODEs_folder = new EntitySet<IKGD_VNODE>(new Action<IKGD_VNODE>(this.attach_IKGD_VNODEs_folder), new Action<IKGD_VNODE>(this.detach_IKGD_VNODEs_folder));
			this._IKGD_VNODEs_parent = new EntitySet<IKGD_VNODE>(new Action<IKGD_VNODE>(this.attach_IKGD_VNODEs_parent), new Action<IKGD_VNODE>(this.detach_IKGD_VNODEs_parent));
			this._IKGD_VDATAs = new EntitySet<IKGD_VDATA>(new Action<IKGD_VDATA>(this.attach_IKGD_VDATAs), new Action<IKGD_VDATA>(this.detach_IKGD_VDATAs));
			this._IKGD_INODEs = new EntitySet<IKGD_INODE>(new Action<IKGD_INODE>(this.attach_IKGD_INODEs), new Action<IKGD_INODE>(this.detach_IKGD_INODEs));
			this._IKGD_PROPERTies = new EntitySet<IKGD_PROPERTY>(new Action<IKGD_PROPERTY>(this.attach_IKGD_PROPERTies), new Action<IKGD_PROPERTY>(this.detach_IKGD_PROPERTies));
			this._IKGD_RELATIONs = new EntitySet<IKGD_RELATION>(new Action<IKGD_RELATION>(this.attach_IKGD_RELATIONs), new Action<IKGD_RELATION>(this.detach_IKGD_RELATIONs));
			this._IKGD_RELATIONs_dst = new EntitySet<IKGD_RELATION>(new Action<IKGD_RELATION>(this.attach_IKGD_RELATIONs_dst), new Action<IKGD_RELATION>(this.detach_IKGD_RELATIONs_dst));
			this._IKGD_ACLs = new EntitySet<IKGD_ACL>(new Action<IKGD_ACL>(this.attach_IKGD_ACLs), new Action<IKGD_ACL>(this.detach_IKGD_ACLs));
			this._LazyLogin_Votes = new EntitySet<LazyLogin_Vote>(new Action<LazyLogin_Vote>(this.attach_LazyLogin_Votes), new Action<LazyLogin_Vote>(this.detach_LazyLogin_Votes));
			this._IKCAT_ElementFolders = new EntitySet<IKCAT_ElementFolder>(new Action<IKCAT_ElementFolder>(this.attach_IKCAT_ElementFolders), new Action<IKCAT_ElementFolder>(this.detach_IKCAT_ElementFolders));
			this._IKCAT_ElementMains = new EntitySet<IKCAT_ElementMain>(new Action<IKCAT_ElementMain>(this.attach_IKCAT_ElementMains), new Action<IKCAT_ElementMain>(this.detach_IKCAT_ElementMains));
			this._IKG_HITLOGs = new EntitySet<IKG_HITLOG>(new Action<IKG_HITLOG>(this.attach_IKG_HITLOGs), new Action<IKG_HITLOG>(this.detach_IKG_HITLOGs));
			this._IKG_HITACCs = new EntitySet<IKG_HITACC>(new Action<IKG_HITACC>(this.attach_IKG_HITACCs), new Action<IKG_HITACC>(this.detach_IKG_HITACCs));
			this._IKGD_VDATA_KEYVALUEs = new EntitySet<IKGD_VDATA_KEYVALUE>(new Action<IKGD_VDATA_KEYVALUE>(this.attach_IKGD_VDATA_KEYVALUEs), new Action<IKGD_VDATA_KEYVALUE>(this.detach_IKGD_VDATA_KEYVALUEs));
			this._IKATT_AttributeMappings = new EntitySet<IKATT_AttributeMapping>(new Action<IKATT_AttributeMapping>(this.attach_IKATT_AttributeMappings), new Action<IKATT_AttributeMapping>(this.detach_IKATT_AttributeMappings));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.IKGD_SNODE")]
	[DataContract()]
	public partial class IKGD_SNODE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _code;
		
		private int _rnode;
		
		private System.DateTime _date_creat;
		
		private System.Data.Linq.Link<string> _username;
		
		private bool _flag_folder;
		
		private EntitySet<IKGD_VNODE> _IKGD_VNODEs;
		
		private EntitySet<IKGD_RELATION> _IKGD_RELATIONs_dst;
		
		private EntitySet<IKGD_RELATION> _IKGD_RELATIONs_src;
		
		private EntitySet<IKCAT_ElementFolder> _IKCAT_ElementFolders;
		
		private EntityRef<IKGD_RNODE> _IKGD_RNODE;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncodeChanging(int value);
    partial void OncodeChanged();
    partial void OnrnodeChanging(int value);
    partial void OnrnodeChanged();
    partial void Ondate_creatChanging(System.DateTime value);
    partial void Ondate_creatChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void Onflag_folderChanging(bool value);
    partial void Onflag_folderChanged();
    #endregion
		
		public IKGD_SNODE()
		{
			this.Initialize();
		}
		
		[Column(Storage="_code", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[Column(Storage="_rnode", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int rnode
		{
			get
			{
				return this._rnode;
			}
			set
			{
				if ((this._rnode != value))
				{
					if (this._IKGD_RNODE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrnodeChanging(value);
					this.SendPropertyChanging();
					this._rnode = value;
					this.SendPropertyChanged("rnode");
					this.OnrnodeChanged();
				}
			}
		}
		
		[Column(Storage="_date_creat", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public System.DateTime date_creat
		{
			get
			{
				return this._date_creat;
			}
			set
			{
				if ((this._date_creat != value))
				{
					this.Ondate_creatChanging(value);
					this.SendPropertyChanging();
					this._date_creat = value;
					this.SendPropertyChanged("date_creat");
					this.Ondate_creatChanged();
				}
			}
		}
		
		[Column(Storage="_username", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public string username
		{
			get
			{
				return this._username.Value;
			}
			set
			{
				if ((this._username.Value != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username.Value = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[Column(Storage="_flag_folder", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public bool flag_folder
		{
			get
			{
				return this._flag_folder;
			}
			set
			{
				if ((this._flag_folder != value))
				{
					this.Onflag_folderChanging(value);
					this.SendPropertyChanging();
					this._flag_folder = value;
					this.SendPropertyChanged("flag_folder");
					this.Onflag_folderChanged();
				}
			}
		}
		
		[Association(Name="IKGD_SNODE_IKGD_VNODE", Storage="_IKGD_VNODEs", ThisKey="code", OtherKey="snode")]
		[DataMember(Order=6, EmitDefaultValue=false)]
		public EntitySet<IKGD_VNODE> IKGD_VNODEs
		{
			get
			{
				if ((this.serializing 
							&& (this._IKGD_VNODEs.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKGD_VNODEs;
			}
			set
			{
				this._IKGD_VNODEs.Assign(value);
			}
		}
		
		[Association(Name="IKGD_SNODE_IKGD_RELATION", Storage="_IKGD_RELATIONs_dst", ThisKey="code", OtherKey="snode_dst")]
		[DataMember(Order=7, EmitDefaultValue=false)]
		public EntitySet<IKGD_RELATION> IKGD_RELATIONs_dst
		{
			get
			{
				if ((this.serializing 
							&& (this._IKGD_RELATIONs_dst.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKGD_RELATIONs_dst;
			}
			set
			{
				this._IKGD_RELATIONs_dst.Assign(value);
			}
		}
		
		[Association(Name="IKGD_SNODE_IKGD_RELATION1", Storage="_IKGD_RELATIONs_src", ThisKey="code", OtherKey="snode_src")]
		[DataMember(Order=8, EmitDefaultValue=false)]
		public EntitySet<IKGD_RELATION> IKGD_RELATIONs_src
		{
			get
			{
				if ((this.serializing 
							&& (this._IKGD_RELATIONs_src.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKGD_RELATIONs_src;
			}
			set
			{
				this._IKGD_RELATIONs_src.Assign(value);
			}
		}
		
		[Association(Name="IKGD_SNODE_IKCAT_ElementFolder", Storage="_IKCAT_ElementFolders", ThisKey="code", OtherKey="sNode")]
		[DataMember(Order=9, EmitDefaultValue=false)]
		public EntitySet<IKCAT_ElementFolder> IKCAT_ElementFolders
		{
			get
			{
				if ((this.serializing 
							&& (this._IKCAT_ElementFolders.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKCAT_ElementFolders;
			}
			set
			{
				this._IKCAT_ElementFolders.Assign(value);
			}
		}
		
		[Association(Name="IKGD_RNODE_IKGD_SNODE", Storage="_IKGD_RNODE", ThisKey="rnode", OtherKey="code", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public IKGD_RNODE IKGD_RNODE
		{
			get
			{
				return this._IKGD_RNODE.Entity;
			}
			set
			{
				IKGD_RNODE previousValue = this._IKGD_RNODE.Entity;
				if (((previousValue != value) 
							|| (this._IKGD_RNODE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKGD_RNODE.Entity = null;
						previousValue.IKGD_SNODEs.Remove(this);
					}
					this._IKGD_RNODE.Entity = value;
					if ((value != null))
					{
						value.IKGD_SNODEs.Add(this);
						this._rnode = value.code;
					}
					else
					{
						this._rnode = default(int);
					}
					this.SendPropertyChanged("IKGD_RNODE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IKGD_VNODEs(IKGD_VNODE entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_SNODE = this;
		}
		
		private void detach_IKGD_VNODEs(IKGD_VNODE entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_SNODE = null;
		}
		
		private void attach_IKGD_RELATIONs_dst(IKGD_RELATION entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_SNODE_dst = this;
		}
		
		private void detach_IKGD_RELATIONs_dst(IKGD_RELATION entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_SNODE_dst = null;
		}
		
		private void attach_IKGD_RELATIONs_src(IKGD_RELATION entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_SNODE_src = this;
		}
		
		private void detach_IKGD_RELATIONs_src(IKGD_RELATION entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_SNODE_src = null;
		}
		
		private void attach_IKCAT_ElementFolders(IKCAT_ElementFolder entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_SNODE = this;
		}
		
		private void detach_IKCAT_ElementFolders(IKCAT_ElementFolder entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_SNODE = null;
		}
		
		private void Initialize()
		{
			this._IKGD_VNODEs = new EntitySet<IKGD_VNODE>(new Action<IKGD_VNODE>(this.attach_IKGD_VNODEs), new Action<IKGD_VNODE>(this.detach_IKGD_VNODEs));
			this._IKGD_RELATIONs_dst = new EntitySet<IKGD_RELATION>(new Action<IKGD_RELATION>(this.attach_IKGD_RELATIONs_dst), new Action<IKGD_RELATION>(this.detach_IKGD_RELATIONs_dst));
			this._IKGD_RELATIONs_src = new EntitySet<IKGD_RELATION>(new Action<IKGD_RELATION>(this.attach_IKGD_RELATIONs_src), new Action<IKGD_RELATION>(this.detach_IKGD_RELATIONs_src));
			this._IKCAT_ElementFolders = new EntitySet<IKCAT_ElementFolder>(new Action<IKCAT_ElementFolder>(this.attach_IKCAT_ElementFolders), new Action<IKCAT_ElementFolder>(this.detach_IKCAT_ElementFolders));
			this._IKGD_RNODE = default(EntityRef<IKGD_RNODE>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.IKGD_VNODE")]
	[DataContract()]
	public partial class IKGD_VNODE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _version;
		
		private System.Nullable<int> _version_frozen;
		
		private System.DateTime _version_date;
		
		private int _rnode;
		
		private int _snode;
		
		private System.Nullable<int> _parent;
		
		private int _folder;
		
		private bool _flag_published;
		
		private bool _flag_current;
		
		private bool _flag_deleted;
		
		private bool _flag_folder;
		
		private bool _flag_noDelete;
		
		private string _language;
		
		private System.Data.Linq.Link<string> _username;
		
		private string _name;
		
		private double _position;
		
		private string _placeholder;
		
		private string _template;
		
		private EntityRef<IKGD_RNODE> _IKGD_RNODE;
		
		private EntityRef<IKGD_RNODE> _IKGD_RNODE_folder;
		
		private EntityRef<IKGD_RNODE> _IKGD_RNODE_parent;
		
		private EntityRef<IKGD_SNODE> _IKGD_SNODE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnversionChanging(int value);
    partial void OnversionChanged();
    partial void Onversion_frozenChanging(System.Nullable<int> value);
    partial void Onversion_frozenChanged();
    partial void Onversion_dateChanging(System.DateTime value);
    partial void Onversion_dateChanged();
    partial void OnrnodeChanging(int value);
    partial void OnrnodeChanged();
    partial void OnsnodeChanging(int value);
    partial void OnsnodeChanged();
    partial void OnparentChanging(System.Nullable<int> value);
    partial void OnparentChanged();
    partial void OnfolderChanging(int value);
    partial void OnfolderChanged();
    partial void Onflag_publishedChanging(bool value);
    partial void Onflag_publishedChanged();
    partial void Onflag_currentChanging(bool value);
    partial void Onflag_currentChanged();
    partial void Onflag_deletedChanging(bool value);
    partial void Onflag_deletedChanged();
    partial void Onflag_folderChanging(bool value);
    partial void Onflag_folderChanged();
    partial void Onflag_noDeleteChanging(bool value);
    partial void Onflag_noDeleteChanged();
    partial void OnlanguageChanging(string value);
    partial void OnlanguageChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpositionChanging(double value);
    partial void OnpositionChanged();
    partial void OnplaceholderChanging(string value);
    partial void OnplaceholderChanged();
    partial void OntemplateChanging(string value);
    partial void OntemplateChanged();
    #endregion
		
		public IKGD_VNODE()
		{
			this.Initialize();
		}
		
		[Column(Storage="_version", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int version
		{
			get
			{
				return this._version;
			}
			set
			{
				if ((this._version != value))
				{
					this.OnversionChanging(value);
					this.SendPropertyChanging();
					this._version = value;
					this.SendPropertyChanged("version");
					this.OnversionChanged();
				}
			}
		}
		
		[Column(Storage="_version_frozen", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public System.Nullable<int> version_frozen
		{
			get
			{
				return this._version_frozen;
			}
			set
			{
				if ((this._version_frozen != value))
				{
					this.Onversion_frozenChanging(value);
					this.SendPropertyChanging();
					this._version_frozen = value;
					this.SendPropertyChanged("version_frozen");
					this.Onversion_frozenChanged();
				}
			}
		}
		
		[Column(Storage="_version_date", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public System.DateTime version_date
		{
			get
			{
				return this._version_date;
			}
			set
			{
				if ((this._version_date != value))
				{
					this.Onversion_dateChanging(value);
					this.SendPropertyChanging();
					this._version_date = value;
					this.SendPropertyChanged("version_date");
					this.Onversion_dateChanged();
				}
			}
		}
		
		[Column(Storage="_rnode", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public int rnode
		{
			get
			{
				return this._rnode;
			}
			set
			{
				if ((this._rnode != value))
				{
					if (this._IKGD_RNODE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrnodeChanging(value);
					this.SendPropertyChanging();
					this._rnode = value;
					this.SendPropertyChanged("rnode");
					this.OnrnodeChanged();
				}
			}
		}
		
		[Column(Storage="_snode", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public int snode
		{
			get
			{
				return this._snode;
			}
			set
			{
				if ((this._snode != value))
				{
					if (this._IKGD_SNODE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsnodeChanging(value);
					this.SendPropertyChanging();
					this._snode = value;
					this.SendPropertyChanged("snode");
					this.OnsnodeChanged();
				}
			}
		}
		
		[Column(Storage="_parent", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public System.Nullable<int> parent
		{
			get
			{
				return this._parent;
			}
			set
			{
				if ((this._parent != value))
				{
					if (this._IKGD_RNODE_parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnparentChanging(value);
					this.SendPropertyChanging();
					this._parent = value;
					this.SendPropertyChanged("parent");
					this.OnparentChanged();
				}
			}
		}
		
		[Column(Storage="_folder", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=7)]
		public int folder
		{
			get
			{
				return this._folder;
			}
			set
			{
				if ((this._folder != value))
				{
					if (this._IKGD_RNODE_folder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfolderChanging(value);
					this.SendPropertyChanging();
					this._folder = value;
					this.SendPropertyChanged("folder");
					this.OnfolderChanged();
				}
			}
		}
		
		[Column(Storage="_flag_published", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=8)]
		public bool flag_published
		{
			get
			{
				return this._flag_published;
			}
			set
			{
				if ((this._flag_published != value))
				{
					this.Onflag_publishedChanging(value);
					this.SendPropertyChanging();
					this._flag_published = value;
					this.SendPropertyChanged("flag_published");
					this.Onflag_publishedChanged();
				}
			}
		}
		
		[Column(Storage="_flag_current", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=9)]
		public bool flag_current
		{
			get
			{
				return this._flag_current;
			}
			set
			{
				if ((this._flag_current != value))
				{
					this.Onflag_currentChanging(value);
					this.SendPropertyChanging();
					this._flag_current = value;
					this.SendPropertyChanged("flag_current");
					this.Onflag_currentChanged();
				}
			}
		}
		
		[Column(Storage="_flag_deleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=10)]
		public bool flag_deleted
		{
			get
			{
				return this._flag_deleted;
			}
			set
			{
				if ((this._flag_deleted != value))
				{
					this.Onflag_deletedChanging(value);
					this.SendPropertyChanging();
					this._flag_deleted = value;
					this.SendPropertyChanged("flag_deleted");
					this.Onflag_deletedChanged();
				}
			}
		}
		
		[Column(Storage="_flag_folder", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=11)]
		public bool flag_folder
		{
			get
			{
				return this._flag_folder;
			}
			set
			{
				if ((this._flag_folder != value))
				{
					this.Onflag_folderChanging(value);
					this.SendPropertyChanging();
					this._flag_folder = value;
					this.SendPropertyChanged("flag_folder");
					this.Onflag_folderChanged();
				}
			}
		}
		
		[Column(Storage="_flag_noDelete", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=12)]
		public bool flag_noDelete
		{
			get
			{
				return this._flag_noDelete;
			}
			set
			{
				if ((this._flag_noDelete != value))
				{
					this.Onflag_noDeleteChanging(value);
					this.SendPropertyChanging();
					this._flag_noDelete = value;
					this.SendPropertyChanged("flag_noDelete");
					this.Onflag_noDeleteChanged();
				}
			}
		}
		
		[Column(Storage="_language", DbType="VarChar(2)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=13)]
		public string language
		{
			get
			{
				return this._language;
			}
			set
			{
				if ((this._language != value))
				{
					this.OnlanguageChanging(value);
					this.SendPropertyChanging();
					this._language = value;
					this.SendPropertyChanged("language");
					this.OnlanguageChanged();
				}
			}
		}
		
		[Column(Storage="_username", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=14)]
		public string username
		{
			get
			{
				return this._username.Value;
			}
			set
			{
				if ((this._username.Value != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username.Value = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="NVarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=15)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_position", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=16)]
		public double position
		{
			get
			{
				return this._position;
			}
			set
			{
				if ((this._position != value))
				{
					this.OnpositionChanging(value);
					this.SendPropertyChanging();
					this._position = value;
					this.SendPropertyChanged("position");
					this.OnpositionChanged();
				}
			}
		}
		
		[Column(Storage="_placeholder", DbType="VarChar(100)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=17)]
		public string placeholder
		{
			get
			{
				return this._placeholder;
			}
			set
			{
				if ((this._placeholder != value))
				{
					this.OnplaceholderChanging(value);
					this.SendPropertyChanging();
					this._placeholder = value;
					this.SendPropertyChanged("placeholder");
					this.OnplaceholderChanged();
				}
			}
		}
		
		[Column(Storage="_template", DbType="VarChar(100)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=18)]
		public string template
		{
			get
			{
				return this._template;
			}
			set
			{
				if ((this._template != value))
				{
					this.OntemplateChanging(value);
					this.SendPropertyChanging();
					this._template = value;
					this.SendPropertyChanged("template");
					this.OntemplateChanged();
				}
			}
		}
		
		[Association(Name="IKGD_RNODE_IKGD_VNODE", Storage="_IKGD_RNODE", ThisKey="rnode", OtherKey="code", IsForeignKey=true)]
		public IKGD_RNODE IKGD_RNODE
		{
			get
			{
				return this._IKGD_RNODE.Entity;
			}
			set
			{
				IKGD_RNODE previousValue = this._IKGD_RNODE.Entity;
				if (((previousValue != value) 
							|| (this._IKGD_RNODE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKGD_RNODE.Entity = null;
						previousValue.IKGD_VNODEs.Remove(this);
					}
					this._IKGD_RNODE.Entity = value;
					if ((value != null))
					{
						value.IKGD_VNODEs.Add(this);
						this._rnode = value.code;
					}
					else
					{
						this._rnode = default(int);
					}
					this.SendPropertyChanged("IKGD_RNODE");
				}
			}
		}
		
		[Association(Name="IKGD_RNODE_IKGD_VNODE1", Storage="_IKGD_RNODE_folder", ThisKey="folder", OtherKey="code", IsForeignKey=true)]
		public IKGD_RNODE IKGD_RNODE_folder
		{
			get
			{
				return this._IKGD_RNODE_folder.Entity;
			}
			set
			{
				IKGD_RNODE previousValue = this._IKGD_RNODE_folder.Entity;
				if (((previousValue != value) 
							|| (this._IKGD_RNODE_folder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKGD_RNODE_folder.Entity = null;
						previousValue.IKGD_VNODEs_folder.Remove(this);
					}
					this._IKGD_RNODE_folder.Entity = value;
					if ((value != null))
					{
						value.IKGD_VNODEs_folder.Add(this);
						this._folder = value.code;
					}
					else
					{
						this._folder = default(int);
					}
					this.SendPropertyChanged("IKGD_RNODE_folder");
				}
			}
		}
		
		[Association(Name="IKGD_RNODE_IKGD_VNODE2", Storage="_IKGD_RNODE_parent", ThisKey="parent", OtherKey="code", IsForeignKey=true)]
		public IKGD_RNODE IKGD_RNODE_parent
		{
			get
			{
				return this._IKGD_RNODE_parent.Entity;
			}
			set
			{
				IKGD_RNODE previousValue = this._IKGD_RNODE_parent.Entity;
				if (((previousValue != value) 
							|| (this._IKGD_RNODE_parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKGD_RNODE_parent.Entity = null;
						previousValue.IKGD_VNODEs_parent.Remove(this);
					}
					this._IKGD_RNODE_parent.Entity = value;
					if ((value != null))
					{
						value.IKGD_VNODEs_parent.Add(this);
						this._parent = value.code;
					}
					else
					{
						this._parent = default(Nullable<int>);
					}
					this.SendPropertyChanged("IKGD_RNODE_parent");
				}
			}
		}
		
		[Association(Name="IKGD_SNODE_IKGD_VNODE", Storage="_IKGD_SNODE", ThisKey="snode", OtherKey="code", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public IKGD_SNODE IKGD_SNODE
		{
			get
			{
				return this._IKGD_SNODE.Entity;
			}
			set
			{
				IKGD_SNODE previousValue = this._IKGD_SNODE.Entity;
				if (((previousValue != value) 
							|| (this._IKGD_SNODE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKGD_SNODE.Entity = null;
						previousValue.IKGD_VNODEs.Remove(this);
					}
					this._IKGD_SNODE.Entity = value;
					if ((value != null))
					{
						value.IKGD_VNODEs.Add(this);
						this._snode = value.code;
					}
					else
					{
						this._snode = default(int);
					}
					this.SendPropertyChanged("IKGD_SNODE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._IKGD_RNODE = default(EntityRef<IKGD_RNODE>);
			this._IKGD_RNODE_folder = default(EntityRef<IKGD_RNODE>);
			this._IKGD_RNODE_parent = default(EntityRef<IKGD_RNODE>);
			this._IKGD_SNODE = default(EntityRef<IKGD_SNODE>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.IKGD_VDATA")]
	[DataContract()]
	public partial class IKGD_VDATA : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _version;
		
		private System.Nullable<int> _version_frozen;
		
		private System.DateTime _version_date;
		
		private int _rnode;
		
		private bool _flag_published;
		
		private bool _flag_current;
		
		private bool _flag_deleted;
		
		private bool _flag_inactive;
		
		private bool _flag_unstructured;
		
		private System.Data.Linq.Link<bool> _flag_autoDeleteOnRels;
		
		private int _flags_menu;
		
		private System.Data.Linq.Link<string> _username;
		
		private string _area;
		
		private string _manager_type;
		
		private string _category;
		
		private string _key;
		
		private string _settings;
		
		private System.DateTime _date_node;
		
		private System.Nullable<System.DateTime> _date_node_aux;
		
		private System.Nullable<System.DateTime> _date_activation;
		
		private System.Nullable<System.DateTime> _date_expiry;
		
		private System.Nullable<double> _geoLatY;
		
		private System.Nullable<double> _geoLonX;
		
		private System.Nullable<double> _geoRangeM;
		
		private EntitySet<IKGD_VDATA_KEYVALUE> _IKGD_VDATA_KEYVALUEs;
		
		private EntityRef<IKGD_RNODE> _IKGD_RNODE;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnversionChanging(int value);
    partial void OnversionChanged();
    partial void Onversion_frozenChanging(System.Nullable<int> value);
    partial void Onversion_frozenChanged();
    partial void Onversion_dateChanging(System.DateTime value);
    partial void Onversion_dateChanged();
    partial void OnrnodeChanging(int value);
    partial void OnrnodeChanged();
    partial void Onflag_publishedChanging(bool value);
    partial void Onflag_publishedChanged();
    partial void Onflag_currentChanging(bool value);
    partial void Onflag_currentChanged();
    partial void Onflag_deletedChanging(bool value);
    partial void Onflag_deletedChanged();
    partial void Onflag_inactiveChanging(bool value);
    partial void Onflag_inactiveChanged();
    partial void Onflag_unstructuredChanging(bool value);
    partial void Onflag_unstructuredChanged();
    partial void Onflag_autoDeleteOnRelsChanging(bool value);
    partial void Onflag_autoDeleteOnRelsChanged();
    partial void Onflags_menuChanging(int value);
    partial void Onflags_menuChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnareaChanging(string value);
    partial void OnareaChanged();
    partial void Onmanager_typeChanging(string value);
    partial void Onmanager_typeChanged();
    partial void OncategoryChanging(string value);
    partial void OncategoryChanged();
    partial void OnkeyChanging(string value);
    partial void OnkeyChanged();
    partial void OnsettingsChanging(string value);
    partial void OnsettingsChanged();
    partial void Ondate_nodeChanging(System.DateTime value);
    partial void Ondate_nodeChanged();
    partial void Ondate_node_auxChanging(System.Nullable<System.DateTime> value);
    partial void Ondate_node_auxChanged();
    partial void Ondate_activationChanging(System.Nullable<System.DateTime> value);
    partial void Ondate_activationChanged();
    partial void Ondate_expiryChanging(System.Nullable<System.DateTime> value);
    partial void Ondate_expiryChanged();
    partial void OngeoLatYChanging(System.Nullable<double> value);
    partial void OngeoLatYChanged();
    partial void OngeoLonXChanging(System.Nullable<double> value);
    partial void OngeoLonXChanged();
    partial void OngeoRangeMChanging(System.Nullable<double> value);
    partial void OngeoRangeMChanged();
    #endregion
		
		public IKGD_VDATA()
		{
			this.Initialize();
		}
		
		[Column(Storage="_version", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int version
		{
			get
			{
				return this._version;
			}
			set
			{
				if ((this._version != value))
				{
					this.OnversionChanging(value);
					this.SendPropertyChanging();
					this._version = value;
					this.SendPropertyChanged("version");
					this.OnversionChanged();
				}
			}
		}
		
		[Column(Storage="_version_frozen", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public System.Nullable<int> version_frozen
		{
			get
			{
				return this._version_frozen;
			}
			set
			{
				if ((this._version_frozen != value))
				{
					this.Onversion_frozenChanging(value);
					this.SendPropertyChanging();
					this._version_frozen = value;
					this.SendPropertyChanged("version_frozen");
					this.Onversion_frozenChanged();
				}
			}
		}
		
		[Column(Storage="_version_date", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public System.DateTime version_date
		{
			get
			{
				return this._version_date;
			}
			set
			{
				if ((this._version_date != value))
				{
					this.Onversion_dateChanging(value);
					this.SendPropertyChanging();
					this._version_date = value;
					this.SendPropertyChanged("version_date");
					this.Onversion_dateChanged();
				}
			}
		}
		
		[Column(Storage="_rnode", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public int rnode
		{
			get
			{
				return this._rnode;
			}
			set
			{
				if ((this._rnode != value))
				{
					if (this._IKGD_RNODE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrnodeChanging(value);
					this.SendPropertyChanging();
					this._rnode = value;
					this.SendPropertyChanged("rnode");
					this.OnrnodeChanged();
				}
			}
		}
		
		[Column(Storage="_flag_published", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public bool flag_published
		{
			get
			{
				return this._flag_published;
			}
			set
			{
				if ((this._flag_published != value))
				{
					this.Onflag_publishedChanging(value);
					this.SendPropertyChanging();
					this._flag_published = value;
					this.SendPropertyChanged("flag_published");
					this.Onflag_publishedChanged();
				}
			}
		}
		
		[Column(Storage="_flag_current", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public bool flag_current
		{
			get
			{
				return this._flag_current;
			}
			set
			{
				if ((this._flag_current != value))
				{
					this.Onflag_currentChanging(value);
					this.SendPropertyChanging();
					this._flag_current = value;
					this.SendPropertyChanged("flag_current");
					this.Onflag_currentChanged();
				}
			}
		}
		
		[Column(Storage="_flag_deleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=7)]
		public bool flag_deleted
		{
			get
			{
				return this._flag_deleted;
			}
			set
			{
				if ((this._flag_deleted != value))
				{
					this.Onflag_deletedChanging(value);
					this.SendPropertyChanging();
					this._flag_deleted = value;
					this.SendPropertyChanged("flag_deleted");
					this.Onflag_deletedChanged();
				}
			}
		}
		
		[Column(Storage="_flag_inactive", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=8)]
		public bool flag_inactive
		{
			get
			{
				return this._flag_inactive;
			}
			set
			{
				if ((this._flag_inactive != value))
				{
					this.Onflag_inactiveChanging(value);
					this.SendPropertyChanging();
					this._flag_inactive = value;
					this.SendPropertyChanged("flag_inactive");
					this.Onflag_inactiveChanged();
				}
			}
		}
		
		[Column(Storage="_flag_unstructured", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=9)]
		public bool flag_unstructured
		{
			get
			{
				return this._flag_unstructured;
			}
			set
			{
				if ((this._flag_unstructured != value))
				{
					this.Onflag_unstructuredChanging(value);
					this.SendPropertyChanging();
					this._flag_unstructured = value;
					this.SendPropertyChanged("flag_unstructured");
					this.Onflag_unstructuredChanged();
				}
			}
		}
		
		[Column(Storage="_flag_autoDeleteOnRels", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=10)]
		public bool flag_autoDeleteOnRels
		{
			get
			{
				return this._flag_autoDeleteOnRels.Value;
			}
			set
			{
				if ((this._flag_autoDeleteOnRels.Value != value))
				{
					this.Onflag_autoDeleteOnRelsChanging(value);
					this.SendPropertyChanging();
					this._flag_autoDeleteOnRels.Value = value;
					this.SendPropertyChanged("flag_autoDeleteOnRels");
					this.Onflag_autoDeleteOnRelsChanged();
				}
			}
		}
		
		[Column(Storage="_flags_menu", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=11)]
		public int flags_menu
		{
			get
			{
				return this._flags_menu;
			}
			set
			{
				if ((this._flags_menu != value))
				{
					this.Onflags_menuChanging(value);
					this.SendPropertyChanging();
					this._flags_menu = value;
					this.SendPropertyChanged("flags_menu");
					this.Onflags_menuChanged();
				}
			}
		}
		
		[Column(Storage="_username", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=12)]
		public string username
		{
			get
			{
				return this._username.Value;
			}
			set
			{
				if ((this._username.Value != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username.Value = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[Column(Storage="_area", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=13)]
		public string area
		{
			get
			{
				return this._area;
			}
			set
			{
				if ((this._area != value))
				{
					this.OnareaChanging(value);
					this.SendPropertyChanging();
					this._area = value;
					this.SendPropertyChanged("area");
					this.OnareaChanged();
				}
			}
		}
		
		[Column(Storage="_manager_type", DbType="VarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=14)]
		public string manager_type
		{
			get
			{
				return this._manager_type;
			}
			set
			{
				if ((this._manager_type != value))
				{
					this.Onmanager_typeChanging(value);
					this.SendPropertyChanging();
					this._manager_type = value;
					this.SendPropertyChanged("manager_type");
					this.Onmanager_typeChanged();
				}
			}
		}
		
		[Column(Storage="_category", DbType="VarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=15)]
		public string category
		{
			get
			{
				return this._category;
			}
			set
			{
				if ((this._category != value))
				{
					this.OncategoryChanging(value);
					this.SendPropertyChanging();
					this._category = value;
					this.SendPropertyChanged("category");
					this.OncategoryChanged();
				}
			}
		}
		
		[Column(Name="[key]", Storage="_key", DbType="VarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=16)]
		public string key
		{
			get
			{
				return this._key;
			}
			set
			{
				if ((this._key != value))
				{
					this.OnkeyChanging(value);
					this.SendPropertyChanging();
					this._key = value;
					this.SendPropertyChanged("key");
					this.OnkeyChanged();
				}
			}
		}
		
		[Column(Storage="_settings", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=17)]
		public string settings
		{
			get
			{
				return this._settings;
			}
			set
			{
				if ((this._settings != value))
				{
					this.OnsettingsChanging(value);
					this.SendPropertyChanging();
					this._settings = value;
					this.SendPropertyChanged("settings");
					this.OnsettingsChanged();
				}
			}
		}
		
		[Column(Storage="_date_node", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=18)]
		public System.DateTime date_node
		{
			get
			{
				return this._date_node;
			}
			set
			{
				if ((this._date_node != value))
				{
					this.Ondate_nodeChanging(value);
					this.SendPropertyChanging();
					this._date_node = value;
					this.SendPropertyChanged("date_node");
					this.Ondate_nodeChanged();
				}
			}
		}
		
		[Column(Storage="_date_node_aux", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=19)]
		public System.Nullable<System.DateTime> date_node_aux
		{
			get
			{
				return this._date_node_aux;
			}
			set
			{
				if ((this._date_node_aux != value))
				{
					this.Ondate_node_auxChanging(value);
					this.SendPropertyChanging();
					this._date_node_aux = value;
					this.SendPropertyChanged("date_node_aux");
					this.Ondate_node_auxChanged();
				}
			}
		}
		
		[Column(Storage="_date_activation", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=20)]
		public System.Nullable<System.DateTime> date_activation
		{
			get
			{
				return this._date_activation;
			}
			set
			{
				if ((this._date_activation != value))
				{
					this.Ondate_activationChanging(value);
					this.SendPropertyChanging();
					this._date_activation = value;
					this.SendPropertyChanged("date_activation");
					this.Ondate_activationChanged();
				}
			}
		}
		
		[Column(Storage="_date_expiry", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=21)]
		public System.Nullable<System.DateTime> date_expiry
		{
			get
			{
				return this._date_expiry;
			}
			set
			{
				if ((this._date_expiry != value))
				{
					this.Ondate_expiryChanging(value);
					this.SendPropertyChanging();
					this._date_expiry = value;
					this.SendPropertyChanged("date_expiry");
					this.Ondate_expiryChanged();
				}
			}
		}
		
		[Column(Storage="_geoLatY", DbType="Float", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=22)]
		public System.Nullable<double> geoLatY
		{
			get
			{
				return this._geoLatY;
			}
			set
			{
				if ((this._geoLatY != value))
				{
					this.OngeoLatYChanging(value);
					this.SendPropertyChanging();
					this._geoLatY = value;
					this.SendPropertyChanged("geoLatY");
					this.OngeoLatYChanged();
				}
			}
		}
		
		[Column(Storage="_geoLonX", DbType="Float", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=23)]
		public System.Nullable<double> geoLonX
		{
			get
			{
				return this._geoLonX;
			}
			set
			{
				if ((this._geoLonX != value))
				{
					this.OngeoLonXChanging(value);
					this.SendPropertyChanging();
					this._geoLonX = value;
					this.SendPropertyChanged("geoLonX");
					this.OngeoLonXChanged();
				}
			}
		}
		
		[Column(Storage="_geoRangeM", DbType="Float", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=24)]
		public System.Nullable<double> geoRangeM
		{
			get
			{
				return this._geoRangeM;
			}
			set
			{
				if ((this._geoRangeM != value))
				{
					this.OngeoRangeMChanging(value);
					this.SendPropertyChanging();
					this._geoRangeM = value;
					this.SendPropertyChanged("geoRangeM");
					this.OngeoRangeMChanged();
				}
			}
		}
		
		[Association(Name="IKGD_VDATA_IKGD_VDATA_KEYVALUE", Storage="_IKGD_VDATA_KEYVALUEs", ThisKey="version", OtherKey="vDataVersion")]
		[DataMember(Order=25, EmitDefaultValue=false)]
		public EntitySet<IKGD_VDATA_KEYVALUE> IKGD_VDATA_KEYVALUEs
		{
			get
			{
				if ((this.serializing 
							&& (this._IKGD_VDATA_KEYVALUEs.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKGD_VDATA_KEYVALUEs;
			}
			set
			{
				this._IKGD_VDATA_KEYVALUEs.Assign(value);
			}
		}
		
		[Association(Name="IKGD_RNODE_IKGD_VDATA", Storage="_IKGD_RNODE", ThisKey="rnode", OtherKey="code", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public IKGD_RNODE IKGD_RNODE
		{
			get
			{
				return this._IKGD_RNODE.Entity;
			}
			set
			{
				IKGD_RNODE previousValue = this._IKGD_RNODE.Entity;
				if (((previousValue != value) 
							|| (this._IKGD_RNODE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKGD_RNODE.Entity = null;
						previousValue.IKGD_VDATAs.Remove(this);
					}
					this._IKGD_RNODE.Entity = value;
					if ((value != null))
					{
						value.IKGD_VDATAs.Add(this);
						this._rnode = value.code;
					}
					else
					{
						this._rnode = default(int);
					}
					this.SendPropertyChanged("IKGD_RNODE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IKGD_VDATA_KEYVALUEs(IKGD_VDATA_KEYVALUE entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_VDATA = this;
		}
		
		private void detach_IKGD_VDATA_KEYVALUEs(IKGD_VDATA_KEYVALUE entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_VDATA = null;
		}
		
		private void Initialize()
		{
			this._IKGD_VDATA_KEYVALUEs = new EntitySet<IKGD_VDATA_KEYVALUE>(new Action<IKGD_VDATA_KEYVALUE>(this.attach_IKGD_VDATA_KEYVALUEs), new Action<IKGD_VDATA_KEYVALUE>(this.detach_IKGD_VDATA_KEYVALUEs));
			this._IKGD_RNODE = default(EntityRef<IKGD_RNODE>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.IKGD_INODE")]
	[DataContract()]
	public partial class IKGD_INODE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _version;
		
		private System.Nullable<int> _version_frozen;
		
		private System.DateTime _version_date;
		
		private int _rnode;
		
		private bool _flag_published;
		
		private bool _flag_current;
		
		private bool _flag_deleted;
		
		private System.Data.Linq.Link<string> _username;
		
		private string _filename;
		
		private string _mime;
		
		private int _size;
		
		private EntitySet<IKGD_STREAM> _IKGD_STREAMs;
		
		private EntitySet<IKGD_MSTREAM> _IKGD_MSTREAMs;
		
		private EntityRef<IKGD_RNODE> _IKGD_RNODE;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnversionChanging(int value);
    partial void OnversionChanged();
    partial void Onversion_frozenChanging(System.Nullable<int> value);
    partial void Onversion_frozenChanged();
    partial void Onversion_dateChanging(System.DateTime value);
    partial void Onversion_dateChanged();
    partial void OnrnodeChanging(int value);
    partial void OnrnodeChanged();
    partial void Onflag_publishedChanging(bool value);
    partial void Onflag_publishedChanged();
    partial void Onflag_currentChanging(bool value);
    partial void Onflag_currentChanged();
    partial void Onflag_deletedChanging(bool value);
    partial void Onflag_deletedChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnfilenameChanging(string value);
    partial void OnfilenameChanged();
    partial void OnmimeChanging(string value);
    partial void OnmimeChanged();
    partial void OnsizeChanging(int value);
    partial void OnsizeChanged();
    #endregion
		
		public IKGD_INODE()
		{
			this.Initialize();
		}
		
		[Column(Storage="_version", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int version
		{
			get
			{
				return this._version;
			}
			set
			{
				if ((this._version != value))
				{
					this.OnversionChanging(value);
					this.SendPropertyChanging();
					this._version = value;
					this.SendPropertyChanged("version");
					this.OnversionChanged();
				}
			}
		}
		
		[Column(Storage="_version_frozen", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public System.Nullable<int> version_frozen
		{
			get
			{
				return this._version_frozen;
			}
			set
			{
				if ((this._version_frozen != value))
				{
					this.Onversion_frozenChanging(value);
					this.SendPropertyChanging();
					this._version_frozen = value;
					this.SendPropertyChanged("version_frozen");
					this.Onversion_frozenChanged();
				}
			}
		}
		
		[Column(Storage="_version_date", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public System.DateTime version_date
		{
			get
			{
				return this._version_date;
			}
			set
			{
				if ((this._version_date != value))
				{
					this.Onversion_dateChanging(value);
					this.SendPropertyChanging();
					this._version_date = value;
					this.SendPropertyChanged("version_date");
					this.Onversion_dateChanged();
				}
			}
		}
		
		[Column(Storage="_rnode", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public int rnode
		{
			get
			{
				return this._rnode;
			}
			set
			{
				if ((this._rnode != value))
				{
					if (this._IKGD_RNODE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrnodeChanging(value);
					this.SendPropertyChanging();
					this._rnode = value;
					this.SendPropertyChanged("rnode");
					this.OnrnodeChanged();
				}
			}
		}
		
		[Column(Storage="_flag_published", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public bool flag_published
		{
			get
			{
				return this._flag_published;
			}
			set
			{
				if ((this._flag_published != value))
				{
					this.Onflag_publishedChanging(value);
					this.SendPropertyChanging();
					this._flag_published = value;
					this.SendPropertyChanged("flag_published");
					this.Onflag_publishedChanged();
				}
			}
		}
		
		[Column(Storage="_flag_current", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public bool flag_current
		{
			get
			{
				return this._flag_current;
			}
			set
			{
				if ((this._flag_current != value))
				{
					this.Onflag_currentChanging(value);
					this.SendPropertyChanging();
					this._flag_current = value;
					this.SendPropertyChanged("flag_current");
					this.Onflag_currentChanged();
				}
			}
		}
		
		[Column(Storage="_flag_deleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=7)]
		public bool flag_deleted
		{
			get
			{
				return this._flag_deleted;
			}
			set
			{
				if ((this._flag_deleted != value))
				{
					this.Onflag_deletedChanging(value);
					this.SendPropertyChanging();
					this._flag_deleted = value;
					this.SendPropertyChanged("flag_deleted");
					this.Onflag_deletedChanged();
				}
			}
		}
		
		[Column(Storage="_username", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=8)]
		public string username
		{
			get
			{
				return this._username.Value;
			}
			set
			{
				if ((this._username.Value != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username.Value = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[Column(Storage="_filename", DbType="NVarChar(260) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=9)]
		public string filename
		{
			get
			{
				return this._filename;
			}
			set
			{
				if ((this._filename != value))
				{
					this.OnfilenameChanging(value);
					this.SendPropertyChanging();
					this._filename = value;
					this.SendPropertyChanged("filename");
					this.OnfilenameChanged();
				}
			}
		}
		
		[Column(Storage="_mime", DbType="VarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=10)]
		public string mime
		{
			get
			{
				return this._mime;
			}
			set
			{
				if ((this._mime != value))
				{
					this.OnmimeChanging(value);
					this.SendPropertyChanging();
					this._mime = value;
					this.SendPropertyChanged("mime");
					this.OnmimeChanged();
				}
			}
		}
		
		[Column(Storage="_size", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=11)]
		public int size
		{
			get
			{
				return this._size;
			}
			set
			{
				if ((this._size != value))
				{
					this.OnsizeChanging(value);
					this.SendPropertyChanging();
					this._size = value;
					this.SendPropertyChanged("size");
					this.OnsizeChanged();
				}
			}
		}
		
		[Association(Name="IKGD_INODE_IKGD_STREAM", Storage="_IKGD_STREAMs", ThisKey="version", OtherKey="inode")]
		[DataMember(Order=12, EmitDefaultValue=false)]
		public EntitySet<IKGD_STREAM> IKGD_STREAMs
		{
			get
			{
				if ((this.serializing 
							&& (this._IKGD_STREAMs.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKGD_STREAMs;
			}
			set
			{
				this._IKGD_STREAMs.Assign(value);
			}
		}
		
		[Association(Name="IKGD_INODE_IKGD_MSTREAM", Storage="_IKGD_MSTREAMs", ThisKey="version", OtherKey="inode")]
		[DataMember(Order=13, EmitDefaultValue=false)]
		public EntitySet<IKGD_MSTREAM> IKGD_MSTREAMs
		{
			get
			{
				if ((this.serializing 
							&& (this._IKGD_MSTREAMs.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKGD_MSTREAMs;
			}
			set
			{
				this._IKGD_MSTREAMs.Assign(value);
			}
		}
		
		[Association(Name="IKGD_RNODE_IKGD_INODE", Storage="_IKGD_RNODE", ThisKey="rnode", OtherKey="code", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public IKGD_RNODE IKGD_RNODE
		{
			get
			{
				return this._IKGD_RNODE.Entity;
			}
			set
			{
				IKGD_RNODE previousValue = this._IKGD_RNODE.Entity;
				if (((previousValue != value) 
							|| (this._IKGD_RNODE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKGD_RNODE.Entity = null;
						previousValue.IKGD_INODEs.Remove(this);
					}
					this._IKGD_RNODE.Entity = value;
					if ((value != null))
					{
						value.IKGD_INODEs.Add(this);
						this._rnode = value.code;
					}
					else
					{
						this._rnode = default(int);
					}
					this.SendPropertyChanged("IKGD_RNODE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IKGD_STREAMs(IKGD_STREAM entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_INODE = this;
		}
		
		private void detach_IKGD_STREAMs(IKGD_STREAM entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_INODE = null;
		}
		
		private void attach_IKGD_MSTREAMs(IKGD_MSTREAM entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_INODE = this;
		}
		
		private void detach_IKGD_MSTREAMs(IKGD_MSTREAM entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_INODE = null;
		}
		
		private void Initialize()
		{
			this._IKGD_STREAMs = new EntitySet<IKGD_STREAM>(new Action<IKGD_STREAM>(this.attach_IKGD_STREAMs), new Action<IKGD_STREAM>(this.detach_IKGD_STREAMs));
			this._IKGD_MSTREAMs = new EntitySet<IKGD_MSTREAM>(new Action<IKGD_MSTREAM>(this.attach_IKGD_MSTREAMs), new Action<IKGD_MSTREAM>(this.detach_IKGD_MSTREAMs));
			this._IKGD_RNODE = default(EntityRef<IKGD_RNODE>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.IKGD_STREAM")]
	[DataContract()]
	public partial class IKGD_STREAM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _inode;
		
		private string _key;
		
		private string _source;
		
		private string _type;
		
		private System.Data.Linq.Link<System.Data.Linq.Binary> _data;
		
		private EntitySet<IKGD_MSTREAM> _IKGD_MSTREAMs;
		
		private EntityRef<IKGD_INODE> _IKGD_INODE;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OninodeChanging(System.Nullable<int> value);
    partial void OninodeChanged();
    partial void OnkeyChanging(string value);
    partial void OnkeyChanged();
    partial void OnsourceChanging(string value);
    partial void OnsourceChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void OndataChanging(System.Data.Linq.Binary value);
    partial void OndataChanged();
    #endregion
		
		public IKGD_STREAM()
		{
			this.Initialize();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_inode", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public System.Nullable<int> inode
		{
			get
			{
				return this._inode;
			}
			set
			{
				if ((this._inode != value))
				{
					if (this._IKGD_INODE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OninodeChanging(value);
					this.SendPropertyChanging();
					this._inode = value;
					this.SendPropertyChanged("inode");
					this.OninodeChanged();
				}
			}
		}
		
		[Column(Name="[key]", Storage="_key", DbType="VarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public string key
		{
			get
			{
				return this._key;
			}
			set
			{
				if ((this._key != value))
				{
					this.OnkeyChanging(value);
					this.SendPropertyChanging();
					this._key = value;
					this.SendPropertyChanged("key");
					this.OnkeyChanged();
				}
			}
		}
		
		[Column(Storage="_source", DbType="VarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public string source
		{
			get
			{
				return this._source;
			}
			set
			{
				if ((this._source != value))
				{
					this.OnsourceChanging(value);
					this.SendPropertyChanging();
					this._source = value;
					this.SendPropertyChanged("source");
					this.OnsourceChanged();
				}
			}
		}
		
		[Column(Storage="_type", DbType="VarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[Column(Storage="_data", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public System.Data.Linq.Binary data
		{
			get
			{
				return this._data.Value;
			}
			set
			{
				if ((this._data.Value != value))
				{
					this.OndataChanging(value);
					this.SendPropertyChanging();
					this._data.Value = value;
					this.SendPropertyChanged("data");
					this.OndataChanged();
				}
			}
		}
		
		[Association(Name="IKGD_STREAM_IKGD_MSTREAM", Storage="_IKGD_MSTREAMs", ThisKey="id", OtherKey="stream")]
		[DataMember(Order=7, EmitDefaultValue=false)]
		public EntitySet<IKGD_MSTREAM> IKGD_MSTREAMs
		{
			get
			{
				if ((this.serializing 
							&& (this._IKGD_MSTREAMs.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKGD_MSTREAMs;
			}
			set
			{
				this._IKGD_MSTREAMs.Assign(value);
			}
		}
		
		[Association(Name="IKGD_INODE_IKGD_STREAM", Storage="_IKGD_INODE", ThisKey="inode", OtherKey="version", IsForeignKey=true)]
		public IKGD_INODE IKGD_INODE
		{
			get
			{
				return this._IKGD_INODE.Entity;
			}
			set
			{
				IKGD_INODE previousValue = this._IKGD_INODE.Entity;
				if (((previousValue != value) 
							|| (this._IKGD_INODE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKGD_INODE.Entity = null;
						previousValue.IKGD_STREAMs.Remove(this);
					}
					this._IKGD_INODE.Entity = value;
					if ((value != null))
					{
						value.IKGD_STREAMs.Add(this);
						this._inode = value.version;
					}
					else
					{
						this._inode = default(Nullable<int>);
					}
					this.SendPropertyChanged("IKGD_INODE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IKGD_MSTREAMs(IKGD_MSTREAM entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_STREAM = this;
		}
		
		private void detach_IKGD_MSTREAMs(IKGD_MSTREAM entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_STREAM = null;
		}
		
		private void Initialize()
		{
			this._IKGD_MSTREAMs = new EntitySet<IKGD_MSTREAM>(new Action<IKGD_MSTREAM>(this.attach_IKGD_MSTREAMs), new Action<IKGD_MSTREAM>(this.detach_IKGD_MSTREAMs));
			this._IKGD_INODE = default(EntityRef<IKGD_INODE>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.IKGD_MSTREAM")]
	[DataContract()]
	public partial class IKGD_MSTREAM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _inode;
		
		private int _stream;
		
		private EntityRef<IKGD_INODE> _IKGD_INODE;
		
		private EntityRef<IKGD_STREAM> _IKGD_STREAM;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OninodeChanging(int value);
    partial void OninodeChanged();
    partial void OnstreamChanging(int value);
    partial void OnstreamChanged();
    #endregion
		
		public IKGD_MSTREAM()
		{
			this.Initialize();
		}
		
		[Column(Storage="_inode", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int inode
		{
			get
			{
				return this._inode;
			}
			set
			{
				if ((this._inode != value))
				{
					if (this._IKGD_INODE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OninodeChanging(value);
					this.SendPropertyChanging();
					this._inode = value;
					this.SendPropertyChanged("inode");
					this.OninodeChanged();
				}
			}
		}
		
		[Column(Storage="_stream", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int stream
		{
			get
			{
				return this._stream;
			}
			set
			{
				if ((this._stream != value))
				{
					if (this._IKGD_STREAM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstreamChanging(value);
					this.SendPropertyChanging();
					this._stream = value;
					this.SendPropertyChanged("stream");
					this.OnstreamChanged();
				}
			}
		}
		
		[Association(Name="IKGD_INODE_IKGD_MSTREAM", Storage="_IKGD_INODE", ThisKey="inode", OtherKey="version", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public IKGD_INODE IKGD_INODE
		{
			get
			{
				return this._IKGD_INODE.Entity;
			}
			set
			{
				IKGD_INODE previousValue = this._IKGD_INODE.Entity;
				if (((previousValue != value) 
							|| (this._IKGD_INODE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKGD_INODE.Entity = null;
						previousValue.IKGD_MSTREAMs.Remove(this);
					}
					this._IKGD_INODE.Entity = value;
					if ((value != null))
					{
						value.IKGD_MSTREAMs.Add(this);
						this._inode = value.version;
					}
					else
					{
						this._inode = default(int);
					}
					this.SendPropertyChanged("IKGD_INODE");
				}
			}
		}
		
		[Association(Name="IKGD_STREAM_IKGD_MSTREAM", Storage="_IKGD_STREAM", ThisKey="stream", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public IKGD_STREAM IKGD_STREAM
		{
			get
			{
				return this._IKGD_STREAM.Entity;
			}
			set
			{
				IKGD_STREAM previousValue = this._IKGD_STREAM.Entity;
				if (((previousValue != value) 
							|| (this._IKGD_STREAM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKGD_STREAM.Entity = null;
						previousValue.IKGD_MSTREAMs.Remove(this);
					}
					this._IKGD_STREAM.Entity = value;
					if ((value != null))
					{
						value.IKGD_MSTREAMs.Add(this);
						this._stream = value.id;
					}
					else
					{
						this._stream = default(int);
					}
					this.SendPropertyChanged("IKGD_STREAM");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._IKGD_INODE = default(EntityRef<IKGD_INODE>);
			this._IKGD_STREAM = default(EntityRef<IKGD_STREAM>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.IKGD_FREEZED")]
	[DataContract()]
	public partial class IKGD_FREEZED : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _version_frozen;
		
		private int _node_version;
		
		private int _node_type;
		
		private EntityRef<IKGD_SNAPSHOT> _IKGD_SNAPSHOT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onversion_frozenChanging(int value);
    partial void Onversion_frozenChanged();
    partial void Onnode_versionChanging(int value);
    partial void Onnode_versionChanged();
    partial void Onnode_typeChanging(int value);
    partial void Onnode_typeChanged();
    #endregion
		
		public IKGD_FREEZED()
		{
			this.Initialize();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_version_frozen", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int version_frozen
		{
			get
			{
				return this._version_frozen;
			}
			set
			{
				if ((this._version_frozen != value))
				{
					if (this._IKGD_SNAPSHOT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onversion_frozenChanging(value);
					this.SendPropertyChanging();
					this._version_frozen = value;
					this.SendPropertyChanged("version_frozen");
					this.Onversion_frozenChanged();
				}
			}
		}
		
		[Column(Storage="_node_version", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int node_version
		{
			get
			{
				return this._node_version;
			}
			set
			{
				if ((this._node_version != value))
				{
					this.Onnode_versionChanging(value);
					this.SendPropertyChanging();
					this._node_version = value;
					this.SendPropertyChanged("node_version");
					this.Onnode_versionChanged();
				}
			}
		}
		
		[Column(Storage="_node_type", DbType="Int NOT NULL")]
		[DataMember(Order=4)]
		public int node_type
		{
			get
			{
				return this._node_type;
			}
			set
			{
				if ((this._node_type != value))
				{
					this.Onnode_typeChanging(value);
					this.SendPropertyChanging();
					this._node_type = value;
					this.SendPropertyChanged("node_type");
					this.Onnode_typeChanged();
				}
			}
		}
		
		[Association(Name="IKGD_SNAPSHOT_IKGD_FREEZED", Storage="_IKGD_SNAPSHOT", ThisKey="version_frozen", OtherKey="version_frozen", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public IKGD_SNAPSHOT IKGD_SNAPSHOT
		{
			get
			{
				return this._IKGD_SNAPSHOT.Entity;
			}
			set
			{
				IKGD_SNAPSHOT previousValue = this._IKGD_SNAPSHOT.Entity;
				if (((previousValue != value) 
							|| (this._IKGD_SNAPSHOT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKGD_SNAPSHOT.Entity = null;
						previousValue.IKGD_FREEZEDs.Remove(this);
					}
					this._IKGD_SNAPSHOT.Entity = value;
					if ((value != null))
					{
						value.IKGD_FREEZEDs.Add(this);
						this._version_frozen = value.version_frozen;
					}
					else
					{
						this._version_frozen = default(int);
					}
					this.SendPropertyChanged("IKGD_SNAPSHOT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._IKGD_SNAPSHOT = default(EntityRef<IKGD_SNAPSHOT>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.IKGD_PROPERTY")]
	[DataContract()]
	public partial class IKGD_PROPERTY : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _version;
		
		private System.Nullable<int> _version_frozen;
		
		private System.DateTime _version_date;
		
		private int _rnode;
		
		private bool _flag_published;
		
		private bool _flag_current;
		
		private bool _flag_deleted;
		
		private System.Data.Linq.Link<string> _username;
		
		private string _name;
		
		private string _value;
		
		private System.Data.Linq.Link<string> _data;
		
		private System.Nullable<int> _attributeId;
		
		private EntityRef<IKGD_RNODE> _IKGD_RNODE;
		
		private EntityRef<IKCAT_Attribute> _IKCAT_Attribute;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnversionChanging(int value);
    partial void OnversionChanged();
    partial void Onversion_frozenChanging(System.Nullable<int> value);
    partial void Onversion_frozenChanged();
    partial void Onversion_dateChanging(System.DateTime value);
    partial void Onversion_dateChanged();
    partial void OnrnodeChanging(int value);
    partial void OnrnodeChanged();
    partial void Onflag_publishedChanging(bool value);
    partial void Onflag_publishedChanged();
    partial void Onflag_currentChanging(bool value);
    partial void Onflag_currentChanged();
    partial void Onflag_deletedChanging(bool value);
    partial void Onflag_deletedChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void OndataChanging(string value);
    partial void OndataChanged();
    partial void OnattributeIdChanging(System.Nullable<int> value);
    partial void OnattributeIdChanged();
    #endregion
		
		public IKGD_PROPERTY()
		{
			this.Initialize();
		}
		
		[Column(Storage="_version", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int version
		{
			get
			{
				return this._version;
			}
			set
			{
				if ((this._version != value))
				{
					this.OnversionChanging(value);
					this.SendPropertyChanging();
					this._version = value;
					this.SendPropertyChanged("version");
					this.OnversionChanged();
				}
			}
		}
		
		[Column(Storage="_version_frozen", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public System.Nullable<int> version_frozen
		{
			get
			{
				return this._version_frozen;
			}
			set
			{
				if ((this._version_frozen != value))
				{
					this.Onversion_frozenChanging(value);
					this.SendPropertyChanging();
					this._version_frozen = value;
					this.SendPropertyChanged("version_frozen");
					this.Onversion_frozenChanged();
				}
			}
		}
		
		[Column(Storage="_version_date", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public System.DateTime version_date
		{
			get
			{
				return this._version_date;
			}
			set
			{
				if ((this._version_date != value))
				{
					this.Onversion_dateChanging(value);
					this.SendPropertyChanging();
					this._version_date = value;
					this.SendPropertyChanged("version_date");
					this.Onversion_dateChanged();
				}
			}
		}
		
		[Column(Storage="_rnode", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public int rnode
		{
			get
			{
				return this._rnode;
			}
			set
			{
				if ((this._rnode != value))
				{
					if (this._IKGD_RNODE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrnodeChanging(value);
					this.SendPropertyChanging();
					this._rnode = value;
					this.SendPropertyChanged("rnode");
					this.OnrnodeChanged();
				}
			}
		}
		
		[Column(Storage="_flag_published", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public bool flag_published
		{
			get
			{
				return this._flag_published;
			}
			set
			{
				if ((this._flag_published != value))
				{
					this.Onflag_publishedChanging(value);
					this.SendPropertyChanging();
					this._flag_published = value;
					this.SendPropertyChanged("flag_published");
					this.Onflag_publishedChanged();
				}
			}
		}
		
		[Column(Storage="_flag_current", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public bool flag_current
		{
			get
			{
				return this._flag_current;
			}
			set
			{
				if ((this._flag_current != value))
				{
					this.Onflag_currentChanging(value);
					this.SendPropertyChanging();
					this._flag_current = value;
					this.SendPropertyChanged("flag_current");
					this.Onflag_currentChanged();
				}
			}
		}
		
		[Column(Storage="_flag_deleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=7)]
		public bool flag_deleted
		{
			get
			{
				return this._flag_deleted;
			}
			set
			{
				if ((this._flag_deleted != value))
				{
					this.Onflag_deletedChanging(value);
					this.SendPropertyChanging();
					this._flag_deleted = value;
					this.SendPropertyChanged("flag_deleted");
					this.Onflag_deletedChanged();
				}
			}
		}
		
		[Column(Storage="_username", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=8)]
		public string username
		{
			get
			{
				return this._username.Value;
			}
			set
			{
				if ((this._username.Value != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username.Value = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="VarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=9)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_value", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=10)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[Column(Storage="_data", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=11)]
		public string data
		{
			get
			{
				return this._data.Value;
			}
			set
			{
				if ((this._data.Value != value))
				{
					this.OndataChanging(value);
					this.SendPropertyChanging();
					this._data.Value = value;
					this.SendPropertyChanged("data");
					this.OndataChanged();
				}
			}
		}
		
		[Column(Storage="_attributeId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=12)]
		public System.Nullable<int> attributeId
		{
			get
			{
				return this._attributeId;
			}
			set
			{
				if ((this._attributeId != value))
				{
					if (this._IKCAT_Attribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnattributeIdChanging(value);
					this.SendPropertyChanging();
					this._attributeId = value;
					this.SendPropertyChanged("attributeId");
					this.OnattributeIdChanged();
				}
			}
		}
		
		[Association(Name="IKGD_RNODE_IKGD_PROPERTY", Storage="_IKGD_RNODE", ThisKey="rnode", OtherKey="code", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public IKGD_RNODE IKGD_RNODE
		{
			get
			{
				return this._IKGD_RNODE.Entity;
			}
			set
			{
				IKGD_RNODE previousValue = this._IKGD_RNODE.Entity;
				if (((previousValue != value) 
							|| (this._IKGD_RNODE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKGD_RNODE.Entity = null;
						previousValue.IKGD_PROPERTies.Remove(this);
					}
					this._IKGD_RNODE.Entity = value;
					if ((value != null))
					{
						value.IKGD_PROPERTies.Add(this);
						this._rnode = value.code;
					}
					else
					{
						this._rnode = default(int);
					}
					this.SendPropertyChanged("IKGD_RNODE");
				}
			}
		}
		
		[Association(Name="IKCAT_Attribute_IKGD_PROPERTY", Storage="_IKCAT_Attribute", ThisKey="attributeId", OtherKey="AttributeId", IsForeignKey=true, DeleteRule="CASCADE")]
		public IKCAT_Attribute IKCAT_Attribute
		{
			get
			{
				return this._IKCAT_Attribute.Entity;
			}
			set
			{
				IKCAT_Attribute previousValue = this._IKCAT_Attribute.Entity;
				if (((previousValue != value) 
							|| (this._IKCAT_Attribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKCAT_Attribute.Entity = null;
						previousValue.IKGD_PROPERTies.Remove(this);
					}
					this._IKCAT_Attribute.Entity = value;
					if ((value != null))
					{
						value.IKGD_PROPERTies.Add(this);
						this._attributeId = value.AttributeId;
					}
					else
					{
						this._attributeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("IKCAT_Attribute");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._IKGD_RNODE = default(EntityRef<IKGD_RNODE>);
			this._IKCAT_Attribute = default(EntityRef<IKCAT_Attribute>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.IKGD_RELATION")]
	[DataContract()]
	public partial class IKGD_RELATION : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _version;
		
		private System.Nullable<int> _version_frozen;
		
		private System.DateTime _version_date;
		
		private int _rnode;
		
		private int _rnode_dst;
		
		private bool _flag_published;
		
		private bool _flag_current;
		
		private bool _flag_deleted;
		
		private System.Data.Linq.Link<string> _username;
		
		private int _snode_src;
		
		private int _snode_dst;
		
		private string _type;
		
		private double _position;
		
		private EntityRef<IKGD_RNODE> _IKGD_RNODE;
		
		private EntityRef<IKGD_RNODE> _IKGD_RNODE_dst;
		
		private EntityRef<IKGD_SNODE> _IKGD_SNODE_dst;
		
		private EntityRef<IKGD_SNODE> _IKGD_SNODE_src;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnversionChanging(int value);
    partial void OnversionChanged();
    partial void Onversion_frozenChanging(System.Nullable<int> value);
    partial void Onversion_frozenChanged();
    partial void Onversion_dateChanging(System.DateTime value);
    partial void Onversion_dateChanged();
    partial void OnrnodeChanging(int value);
    partial void OnrnodeChanged();
    partial void Onrnode_dstChanging(int value);
    partial void Onrnode_dstChanged();
    partial void Onflag_publishedChanging(bool value);
    partial void Onflag_publishedChanged();
    partial void Onflag_currentChanging(bool value);
    partial void Onflag_currentChanged();
    partial void Onflag_deletedChanging(bool value);
    partial void Onflag_deletedChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void Onsnode_srcChanging(int value);
    partial void Onsnode_srcChanged();
    partial void Onsnode_dstChanging(int value);
    partial void Onsnode_dstChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void OnpositionChanging(double value);
    partial void OnpositionChanged();
    #endregion
		
		public IKGD_RELATION()
		{
			this.Initialize();
		}
		
		[Column(Storage="_version", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int version
		{
			get
			{
				return this._version;
			}
			set
			{
				if ((this._version != value))
				{
					this.OnversionChanging(value);
					this.SendPropertyChanging();
					this._version = value;
					this.SendPropertyChanged("version");
					this.OnversionChanged();
				}
			}
		}
		
		[Column(Storage="_version_frozen", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public System.Nullable<int> version_frozen
		{
			get
			{
				return this._version_frozen;
			}
			set
			{
				if ((this._version_frozen != value))
				{
					this.Onversion_frozenChanging(value);
					this.SendPropertyChanging();
					this._version_frozen = value;
					this.SendPropertyChanged("version_frozen");
					this.Onversion_frozenChanged();
				}
			}
		}
		
		[Column(Storage="_version_date", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public System.DateTime version_date
		{
			get
			{
				return this._version_date;
			}
			set
			{
				if ((this._version_date != value))
				{
					this.Onversion_dateChanging(value);
					this.SendPropertyChanging();
					this._version_date = value;
					this.SendPropertyChanged("version_date");
					this.Onversion_dateChanged();
				}
			}
		}
		
		[Column(Storage="_rnode", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public int rnode
		{
			get
			{
				return this._rnode;
			}
			set
			{
				if ((this._rnode != value))
				{
					if (this._IKGD_RNODE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrnodeChanging(value);
					this.SendPropertyChanging();
					this._rnode = value;
					this.SendPropertyChanged("rnode");
					this.OnrnodeChanged();
				}
			}
		}
		
		[Column(Storage="_rnode_dst", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public int rnode_dst
		{
			get
			{
				return this._rnode_dst;
			}
			set
			{
				if ((this._rnode_dst != value))
				{
					if (this._IKGD_RNODE_dst.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onrnode_dstChanging(value);
					this.SendPropertyChanging();
					this._rnode_dst = value;
					this.SendPropertyChanged("rnode_dst");
					this.Onrnode_dstChanged();
				}
			}
		}
		
		[Column(Storage="_flag_published", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public bool flag_published
		{
			get
			{
				return this._flag_published;
			}
			set
			{
				if ((this._flag_published != value))
				{
					this.Onflag_publishedChanging(value);
					this.SendPropertyChanging();
					this._flag_published = value;
					this.SendPropertyChanged("flag_published");
					this.Onflag_publishedChanged();
				}
			}
		}
		
		[Column(Storage="_flag_current", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=7)]
		public bool flag_current
		{
			get
			{
				return this._flag_current;
			}
			set
			{
				if ((this._flag_current != value))
				{
					this.Onflag_currentChanging(value);
					this.SendPropertyChanging();
					this._flag_current = value;
					this.SendPropertyChanged("flag_current");
					this.Onflag_currentChanged();
				}
			}
		}
		
		[Column(Storage="_flag_deleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=8)]
		public bool flag_deleted
		{
			get
			{
				return this._flag_deleted;
			}
			set
			{
				if ((this._flag_deleted != value))
				{
					this.Onflag_deletedChanging(value);
					this.SendPropertyChanging();
					this._flag_deleted = value;
					this.SendPropertyChanged("flag_deleted");
					this.Onflag_deletedChanged();
				}
			}
		}
		
		[Column(Storage="_username", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=9)]
		public string username
		{
			get
			{
				return this._username.Value;
			}
			set
			{
				if ((this._username.Value != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username.Value = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[Column(Storage="_snode_src", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=10)]
		public int snode_src
		{
			get
			{
				return this._snode_src;
			}
			set
			{
				if ((this._snode_src != value))
				{
					if (this._IKGD_SNODE_src.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsnode_srcChanging(value);
					this.SendPropertyChanging();
					this._snode_src = value;
					this.SendPropertyChanged("snode_src");
					this.Onsnode_srcChanged();
				}
			}
		}
		
		[Column(Storage="_snode_dst", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=11)]
		public int snode_dst
		{
			get
			{
				return this._snode_dst;
			}
			set
			{
				if ((this._snode_dst != value))
				{
					if (this._IKGD_SNODE_dst.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsnode_dstChanging(value);
					this.SendPropertyChanging();
					this._snode_dst = value;
					this.SendPropertyChanged("snode_dst");
					this.Onsnode_dstChanged();
				}
			}
		}
		
		[Column(Storage="_type", DbType="VarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=12)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[Column(Storage="_position", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=13)]
		public double position
		{
			get
			{
				return this._position;
			}
			set
			{
				if ((this._position != value))
				{
					this.OnpositionChanging(value);
					this.SendPropertyChanging();
					this._position = value;
					this.SendPropertyChanged("position");
					this.OnpositionChanged();
				}
			}
		}
		
		[Association(Name="IKGD_RNODE_IKGD_RELATION", Storage="_IKGD_RNODE", ThisKey="rnode", OtherKey="code", IsForeignKey=true)]
		public IKGD_RNODE IKGD_RNODE
		{
			get
			{
				return this._IKGD_RNODE.Entity;
			}
			set
			{
				IKGD_RNODE previousValue = this._IKGD_RNODE.Entity;
				if (((previousValue != value) 
							|| (this._IKGD_RNODE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKGD_RNODE.Entity = null;
						previousValue.IKGD_RELATIONs.Remove(this);
					}
					this._IKGD_RNODE.Entity = value;
					if ((value != null))
					{
						value.IKGD_RELATIONs.Add(this);
						this._rnode = value.code;
					}
					else
					{
						this._rnode = default(int);
					}
					this.SendPropertyChanged("IKGD_RNODE");
				}
			}
		}
		
		[Association(Name="IKGD_RNODE_IKGD_RELATION1", Storage="_IKGD_RNODE_dst", ThisKey="rnode_dst", OtherKey="code", IsForeignKey=true)]
		public IKGD_RNODE IKGD_RNODE_dst
		{
			get
			{
				return this._IKGD_RNODE_dst.Entity;
			}
			set
			{
				IKGD_RNODE previousValue = this._IKGD_RNODE_dst.Entity;
				if (((previousValue != value) 
							|| (this._IKGD_RNODE_dst.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKGD_RNODE_dst.Entity = null;
						previousValue.IKGD_RELATIONs_dst.Remove(this);
					}
					this._IKGD_RNODE_dst.Entity = value;
					if ((value != null))
					{
						value.IKGD_RELATIONs_dst.Add(this);
						this._rnode_dst = value.code;
					}
					else
					{
						this._rnode_dst = default(int);
					}
					this.SendPropertyChanged("IKGD_RNODE_dst");
				}
			}
		}
		
		[Association(Name="IKGD_SNODE_IKGD_RELATION", Storage="_IKGD_SNODE_dst", ThisKey="snode_dst", OtherKey="code", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public IKGD_SNODE IKGD_SNODE_dst
		{
			get
			{
				return this._IKGD_SNODE_dst.Entity;
			}
			set
			{
				IKGD_SNODE previousValue = this._IKGD_SNODE_dst.Entity;
				if (((previousValue != value) 
							|| (this._IKGD_SNODE_dst.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKGD_SNODE_dst.Entity = null;
						previousValue.IKGD_RELATIONs_dst.Remove(this);
					}
					this._IKGD_SNODE_dst.Entity = value;
					if ((value != null))
					{
						value.IKGD_RELATIONs_dst.Add(this);
						this._snode_dst = value.code;
					}
					else
					{
						this._snode_dst = default(int);
					}
					this.SendPropertyChanged("IKGD_SNODE_dst");
				}
			}
		}
		
		[Association(Name="IKGD_SNODE_IKGD_RELATION1", Storage="_IKGD_SNODE_src", ThisKey="snode_src", OtherKey="code", IsForeignKey=true)]
		public IKGD_SNODE IKGD_SNODE_src
		{
			get
			{
				return this._IKGD_SNODE_src.Entity;
			}
			set
			{
				IKGD_SNODE previousValue = this._IKGD_SNODE_src.Entity;
				if (((previousValue != value) 
							|| (this._IKGD_SNODE_src.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKGD_SNODE_src.Entity = null;
						previousValue.IKGD_RELATIONs_src.Remove(this);
					}
					this._IKGD_SNODE_src.Entity = value;
					if ((value != null))
					{
						value.IKGD_RELATIONs_src.Add(this);
						this._snode_src = value.code;
					}
					else
					{
						this._snode_src = default(int);
					}
					this.SendPropertyChanged("IKGD_SNODE_src");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._IKGD_RNODE = default(EntityRef<IKGD_RNODE>);
			this._IKGD_RNODE_dst = default(EntityRef<IKGD_RNODE>);
			this._IKGD_SNODE_dst = default(EntityRef<IKGD_SNODE>);
			this._IKGD_SNODE_src = default(EntityRef<IKGD_SNODE>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.IKGD_SEARCH")]
	[DataContract()]
	public partial class IKGD_SEARCH : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.DateTime _date_op;
		
		private string _server;
		
		private string _status;
		
		private System.Nullable<int> _version_vnode;
		
		private System.Nullable<int> _version_inode;
		
		private System.Nullable<int> _version_vdata;
		
		private string _message;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Ondate_opChanging(System.DateTime value);
    partial void Ondate_opChanged();
    partial void OnserverChanging(string value);
    partial void OnserverChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void Onversion_vnodeChanging(System.Nullable<int> value);
    partial void Onversion_vnodeChanged();
    partial void Onversion_inodeChanging(System.Nullable<int> value);
    partial void Onversion_inodeChanged();
    partial void Onversion_vdataChanging(System.Nullable<int> value);
    partial void Onversion_vdataChanged();
    partial void OnmessageChanging(string value);
    partial void OnmessageChanged();
    #endregion
		
		public IKGD_SEARCH()
		{
			this.Initialize();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_date_op", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public System.DateTime date_op
		{
			get
			{
				return this._date_op;
			}
			set
			{
				if ((this._date_op != value))
				{
					this.Ondate_opChanging(value);
					this.SendPropertyChanging();
					this._date_op = value;
					this.SendPropertyChanged("date_op");
					this.Ondate_opChanged();
				}
			}
		}
		
		[Column(Storage="_server", DbType="VarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public string server
		{
			get
			{
				return this._server;
			}
			set
			{
				if ((this._server != value))
				{
					this.OnserverChanging(value);
					this.SendPropertyChanging();
					this._server = value;
					this.SendPropertyChanged("server");
					this.OnserverChanged();
				}
			}
		}
		
		[Column(Storage="_status", DbType="VarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[Column(Storage="_version_vnode", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public System.Nullable<int> version_vnode
		{
			get
			{
				return this._version_vnode;
			}
			set
			{
				if ((this._version_vnode != value))
				{
					this.Onversion_vnodeChanging(value);
					this.SendPropertyChanging();
					this._version_vnode = value;
					this.SendPropertyChanged("version_vnode");
					this.Onversion_vnodeChanged();
				}
			}
		}
		
		[Column(Storage="_version_inode", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public System.Nullable<int> version_inode
		{
			get
			{
				return this._version_inode;
			}
			set
			{
				if ((this._version_inode != value))
				{
					this.Onversion_inodeChanging(value);
					this.SendPropertyChanging();
					this._version_inode = value;
					this.SendPropertyChanged("version_inode");
					this.Onversion_inodeChanged();
				}
			}
		}
		
		[Column(Storage="_version_vdata", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=7)]
		public System.Nullable<int> version_vdata
		{
			get
			{
				return this._version_vdata;
			}
			set
			{
				if ((this._version_vdata != value))
				{
					this.Onversion_vdataChanging(value);
					this.SendPropertyChanging();
					this._version_vdata = value;
					this.SendPropertyChanged("version_vdata");
					this.Onversion_vdataChanged();
				}
			}
		}
		
		[Column(Storage="_message", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=8)]
		public string message
		{
			get
			{
				return this._message;
			}
			set
			{
				if ((this._message != value))
				{
					this.OnmessageChanging(value);
					this.SendPropertyChanging();
					this._message = value;
					this.SendPropertyChanged("message");
					this.OnmessageChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.IKGD_SNAPSHOT")]
	[DataContract()]
	public partial class IKGD_SNAPSHOT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Data.Linq.Binary _ts;
		
		private int _version_frozen;
		
		private int _snode_root;
		
		private int _snode_folder;
		
		private string _name;
		
		private string _path;
		
		private int _affected;
		
		private bool _flag_published;
		
		private bool _flag_rejected;
		
		private System.DateTime _date_frozen;
		
		private System.Nullable<System.DateTime> _date_published;
		
		private string _username;
		
		private string _validator;
		
		private string _message;
		
		private EntitySet<IKGD_FREEZED> _IKGD_FREEZEDs;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntsChanging(System.Data.Linq.Binary value);
    partial void OntsChanged();
    partial void Onversion_frozenChanging(int value);
    partial void Onversion_frozenChanged();
    partial void Onsnode_rootChanging(int value);
    partial void Onsnode_rootChanged();
    partial void Onsnode_folderChanging(int value);
    partial void Onsnode_folderChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpathChanging(string value);
    partial void OnpathChanged();
    partial void OnaffectedChanging(int value);
    partial void OnaffectedChanged();
    partial void Onflag_publishedChanging(bool value);
    partial void Onflag_publishedChanged();
    partial void Onflag_rejectedChanging(bool value);
    partial void Onflag_rejectedChanged();
    partial void Ondate_frozenChanging(System.DateTime value);
    partial void Ondate_frozenChanged();
    partial void Ondate_publishedChanging(System.Nullable<System.DateTime> value);
    partial void Ondate_publishedChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnvalidatorChanging(string value);
    partial void OnvalidatorChanged();
    partial void OnmessageChanging(string value);
    partial void OnmessageChanged();
    #endregion
		
		public IKGD_SNAPSHOT()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ts", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public System.Data.Linq.Binary ts
		{
			get
			{
				return this._ts;
			}
			set
			{
				if ((this._ts != value))
				{
					this.OntsChanging(value);
					this.SendPropertyChanging();
					this._ts = value;
					this.SendPropertyChanged("ts");
					this.OntsChanged();
				}
			}
		}
		
		[Column(Storage="_version_frozen", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int version_frozen
		{
			get
			{
				return this._version_frozen;
			}
			set
			{
				if ((this._version_frozen != value))
				{
					this.Onversion_frozenChanging(value);
					this.SendPropertyChanging();
					this._version_frozen = value;
					this.SendPropertyChanged("version_frozen");
					this.Onversion_frozenChanged();
				}
			}
		}
		
		[Column(Storage="_snode_root", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public int snode_root
		{
			get
			{
				return this._snode_root;
			}
			set
			{
				if ((this._snode_root != value))
				{
					this.Onsnode_rootChanging(value);
					this.SendPropertyChanging();
					this._snode_root = value;
					this.SendPropertyChanged("snode_root");
					this.Onsnode_rootChanged();
				}
			}
		}
		
		[Column(Storage="_snode_folder", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public int snode_folder
		{
			get
			{
				return this._snode_folder;
			}
			set
			{
				if ((this._snode_folder != value))
				{
					this.Onsnode_folderChanging(value);
					this.SendPropertyChanging();
					this._snode_folder = value;
					this.SendPropertyChanged("snode_folder");
					this.Onsnode_folderChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="NVarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_path", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public string path
		{
			get
			{
				return this._path;
			}
			set
			{
				if ((this._path != value))
				{
					this.OnpathChanging(value);
					this.SendPropertyChanging();
					this._path = value;
					this.SendPropertyChanged("path");
					this.OnpathChanged();
				}
			}
		}
		
		[Column(Storage="_affected", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=7)]
		public int affected
		{
			get
			{
				return this._affected;
			}
			set
			{
				if ((this._affected != value))
				{
					this.OnaffectedChanging(value);
					this.SendPropertyChanging();
					this._affected = value;
					this.SendPropertyChanged("affected");
					this.OnaffectedChanged();
				}
			}
		}
		
		[Column(Storage="_flag_published", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=8)]
		public bool flag_published
		{
			get
			{
				return this._flag_published;
			}
			set
			{
				if ((this._flag_published != value))
				{
					this.Onflag_publishedChanging(value);
					this.SendPropertyChanging();
					this._flag_published = value;
					this.SendPropertyChanged("flag_published");
					this.Onflag_publishedChanged();
				}
			}
		}
		
		[Column(Storage="_flag_rejected", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=9)]
		public bool flag_rejected
		{
			get
			{
				return this._flag_rejected;
			}
			set
			{
				if ((this._flag_rejected != value))
				{
					this.Onflag_rejectedChanging(value);
					this.SendPropertyChanging();
					this._flag_rejected = value;
					this.SendPropertyChanged("flag_rejected");
					this.Onflag_rejectedChanged();
				}
			}
		}
		
		[Column(Storage="_date_frozen", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=10)]
		public System.DateTime date_frozen
		{
			get
			{
				return this._date_frozen;
			}
			set
			{
				if ((this._date_frozen != value))
				{
					this.Ondate_frozenChanging(value);
					this.SendPropertyChanging();
					this._date_frozen = value;
					this.SendPropertyChanged("date_frozen");
					this.Ondate_frozenChanged();
				}
			}
		}
		
		[Column(Storage="_date_published", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=11)]
		public System.Nullable<System.DateTime> date_published
		{
			get
			{
				return this._date_published;
			}
			set
			{
				if ((this._date_published != value))
				{
					this.Ondate_publishedChanging(value);
					this.SendPropertyChanging();
					this._date_published = value;
					this.SendPropertyChanged("date_published");
					this.Ondate_publishedChanged();
				}
			}
		}
		
		[Column(Storage="_username", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=12)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[Column(Storage="_validator", DbType="VarChar(100)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=13)]
		public string validator
		{
			get
			{
				return this._validator;
			}
			set
			{
				if ((this._validator != value))
				{
					this.OnvalidatorChanging(value);
					this.SendPropertyChanging();
					this._validator = value;
					this.SendPropertyChanged("validator");
					this.OnvalidatorChanged();
				}
			}
		}
		
		[Column(Storage="_message", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=14)]
		public string message
		{
			get
			{
				return this._message;
			}
			set
			{
				if ((this._message != value))
				{
					this.OnmessageChanging(value);
					this.SendPropertyChanging();
					this._message = value;
					this.SendPropertyChanged("message");
					this.OnmessageChanged();
				}
			}
		}
		
		[Association(Name="IKGD_SNAPSHOT_IKGD_FREEZED", Storage="_IKGD_FREEZEDs", ThisKey="version_frozen", OtherKey="version_frozen")]
		[DataMember(Order=15, EmitDefaultValue=false)]
		public EntitySet<IKGD_FREEZED> IKGD_FREEZEDs
		{
			get
			{
				if ((this.serializing 
							&& (this._IKGD_FREEZEDs.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKGD_FREEZEDs;
			}
			set
			{
				this._IKGD_FREEZEDs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IKGD_FREEZEDs(IKGD_FREEZED entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_SNAPSHOT = this;
		}
		
		private void detach_IKGD_FREEZEDs(IKGD_FREEZED entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_SNAPSHOT = null;
		}
		
		private void Initialize()
		{
			this._IKGD_FREEZEDs = new EntitySet<IKGD_FREEZED>(new Action<IKGD_FREEZED>(this.attach_IKGD_FREEZEDs), new Action<IKGD_FREEZED>(this.detach_IKGD_FREEZEDs));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.IKG_PREF")]
	[DataContract()]
	public partial class IKG_PREF : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _username;
		
		private string _key;
		
		private string _value;
		
		private System.DateTime _lastUpdate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnkeyChanging(string value);
    partial void OnkeyChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void OnlastUpdateChanging(System.DateTime value);
    partial void OnlastUpdateChanged();
    #endregion
		
		public IKG_PREF()
		{
			this.Initialize();
		}
		
		[Column(Storage="_username", DbType="VarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[Column(Name="[key]", Storage="_key", DbType="VarChar(250) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public string key
		{
			get
			{
				return this._key;
			}
			set
			{
				if ((this._key != value))
				{
					this.OnkeyChanging(value);
					this.SendPropertyChanging();
					this._key = value;
					this.SendPropertyChanged("key");
					this.OnkeyChanged();
				}
			}
		}
		
		[Column(Storage="_value", DbType="VarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[Column(Storage="_lastUpdate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public System.DateTime lastUpdate
		{
			get
			{
				return this._lastUpdate;
			}
			set
			{
				if ((this._lastUpdate != value))
				{
					this.OnlastUpdateChanging(value);
					this.SendPropertyChanging();
					this._lastUpdate = value;
					this.SendPropertyChanged("lastUpdate");
					this.OnlastUpdateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.IKG_SETTING")]
	[DataContract()]
	public partial class IKG_SETTING : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _username;
		
		private int _sNode;
		
		private string _settings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnsNodeChanging(int value);
    partial void OnsNodeChanged();
    partial void OnsettingsChanging(string value);
    partial void OnsettingsChanged();
    #endregion
		
		public IKG_SETTING()
		{
			this.Initialize();
		}
		
		[Column(Storage="_username", DbType="VarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[Column(Storage="_sNode", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int sNode
		{
			get
			{
				return this._sNode;
			}
			set
			{
				if ((this._sNode != value))
				{
					this.OnsNodeChanging(value);
					this.SendPropertyChanging();
					this._sNode = value;
					this.SendPropertyChanged("sNode");
					this.OnsNodeChanged();
				}
			}
		}
		
		[Column(Storage="_settings", DbType="VarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public string settings
		{
			get
			{
				return this._settings;
			}
			set
			{
				if ((this._settings != value))
				{
					this.OnsettingsChanging(value);
					this.SendPropertyChanging();
					this._settings = value;
					this.SendPropertyChanged("settings");
					this.OnsettingsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.IKG_TAB")]
	[DataContract()]
	public partial class IKG_TAB : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _username;
		
		private int _sNode;
		
		private int _version_node;
		
		private int _version_data;
		
		private string _name;
		
		private int _layout;
		
		private System.DateTime _lastUpdate;
		
		private string _wdata;
		
		private EntitySet<IKG_WIDGET> _IKG_WIDGETs;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnsNodeChanging(int value);
    partial void OnsNodeChanged();
    partial void Onversion_nodeChanging(int value);
    partial void Onversion_nodeChanged();
    partial void Onversion_dataChanging(int value);
    partial void Onversion_dataChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnlayoutChanging(int value);
    partial void OnlayoutChanged();
    partial void OnlastUpdateChanging(System.DateTime value);
    partial void OnlastUpdateChanged();
    partial void OnwdataChanging(string value);
    partial void OnwdataChanged();
    #endregion
		
		public IKG_TAB()
		{
			this.Initialize();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_username", DbType="VarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[Column(Storage="_sNode", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public int sNode
		{
			get
			{
				return this._sNode;
			}
			set
			{
				if ((this._sNode != value))
				{
					this.OnsNodeChanging(value);
					this.SendPropertyChanging();
					this._sNode = value;
					this.SendPropertyChanged("sNode");
					this.OnsNodeChanged();
				}
			}
		}
		
		[Column(Storage="_version_node", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public int version_node
		{
			get
			{
				return this._version_node;
			}
			set
			{
				if ((this._version_node != value))
				{
					this.Onversion_nodeChanging(value);
					this.SendPropertyChanging();
					this._version_node = value;
					this.SendPropertyChanged("version_node");
					this.Onversion_nodeChanged();
				}
			}
		}
		
		[Column(Storage="_version_data", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public int version_data
		{
			get
			{
				return this._version_data;
			}
			set
			{
				if ((this._version_data != value))
				{
					this.Onversion_dataChanging(value);
					this.SendPropertyChanging();
					this._version_data = value;
					this.SendPropertyChanged("version_data");
					this.Onversion_dataChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_layout", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=7)]
		public int layout
		{
			get
			{
				return this._layout;
			}
			set
			{
				if ((this._layout != value))
				{
					this.OnlayoutChanging(value);
					this.SendPropertyChanging();
					this._layout = value;
					this.SendPropertyChanged("layout");
					this.OnlayoutChanged();
				}
			}
		}
		
		[Column(Storage="_lastUpdate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=8)]
		public System.DateTime lastUpdate
		{
			get
			{
				return this._lastUpdate;
			}
			set
			{
				if ((this._lastUpdate != value))
				{
					this.OnlastUpdateChanging(value);
					this.SendPropertyChanging();
					this._lastUpdate = value;
					this.SendPropertyChanged("lastUpdate");
					this.OnlastUpdateChanged();
				}
			}
		}
		
		[Column(Storage="_wdata", DbType="VarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=9)]
		public string wdata
		{
			get
			{
				return this._wdata;
			}
			set
			{
				if ((this._wdata != value))
				{
					this.OnwdataChanging(value);
					this.SendPropertyChanging();
					this._wdata = value;
					this.SendPropertyChanged("wdata");
					this.OnwdataChanged();
				}
			}
		}
		
		[Association(Name="IKG_TAB_IKG_WIDGET", Storage="_IKG_WIDGETs", ThisKey="username,sNode", OtherKey="username,sNodeTab")]
		[DataMember(Order=10, EmitDefaultValue=false)]
		public EntitySet<IKG_WIDGET> IKG_WIDGETs
		{
			get
			{
				if ((this.serializing 
							&& (this._IKG_WIDGETs.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKG_WIDGETs;
			}
			set
			{
				this._IKG_WIDGETs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IKG_WIDGETs(IKG_WIDGET entity)
		{
			this.SendPropertyChanging();
			entity.IKG_TAB = this;
		}
		
		private void detach_IKG_WIDGETs(IKG_WIDGET entity)
		{
			this.SendPropertyChanging();
			entity.IKG_TAB = null;
		}
		
		private void Initialize()
		{
			this._IKG_WIDGETs = new EntitySet<IKG_WIDGET>(new Action<IKG_WIDGET>(this.attach_IKG_WIDGETs), new Action<IKG_WIDGET>(this.detach_IKG_WIDGETs));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.IKG_WIDGET")]
	[DataContract()]
	public partial class IKG_WIDGET : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _instance;
		
		private string _username;
		
		private int _sNode;
		
		private int _sNodeTab;
		
		private int _columnIdx;
		
		private int _rowIdx;
		
		private int _state;
		
		private System.DateTime _lastupdate;
		
		private EntityRef<IKG_TAB> _IKG_TAB;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OninstanceChanging(string value);
    partial void OninstanceChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnsNodeChanging(int value);
    partial void OnsNodeChanged();
    partial void OnsNodeTabChanging(int value);
    partial void OnsNodeTabChanged();
    partial void OncolumnIdxChanging(int value);
    partial void OncolumnIdxChanged();
    partial void OnrowIdxChanging(int value);
    partial void OnrowIdxChanged();
    partial void OnstateChanging(int value);
    partial void OnstateChanged();
    partial void OnlastupdateChanging(System.DateTime value);
    partial void OnlastupdateChanged();
    #endregion
		
		public IKG_WIDGET()
		{
			this.Initialize();
		}
		
		[Column(Storage="_instance", DbType="VarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public string instance
		{
			get
			{
				return this._instance;
			}
			set
			{
				if ((this._instance != value))
				{
					this.OninstanceChanging(value);
					this.SendPropertyChanging();
					this._instance = value;
					this.SendPropertyChanged("instance");
					this.OninstanceChanged();
				}
			}
		}
		
		[Column(Storage="_username", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					if (this._IKG_TAB.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[Column(Storage="_sNode", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public int sNode
		{
			get
			{
				return this._sNode;
			}
			set
			{
				if ((this._sNode != value))
				{
					this.OnsNodeChanging(value);
					this.SendPropertyChanging();
					this._sNode = value;
					this.SendPropertyChanged("sNode");
					this.OnsNodeChanged();
				}
			}
		}
		
		[Column(Storage="_sNodeTab", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public int sNodeTab
		{
			get
			{
				return this._sNodeTab;
			}
			set
			{
				if ((this._sNodeTab != value))
				{
					if (this._IKG_TAB.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsNodeTabChanging(value);
					this.SendPropertyChanging();
					this._sNodeTab = value;
					this.SendPropertyChanged("sNodeTab");
					this.OnsNodeTabChanged();
				}
			}
		}
		
		[Column(Storage="_columnIdx", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public int columnIdx
		{
			get
			{
				return this._columnIdx;
			}
			set
			{
				if ((this._columnIdx != value))
				{
					this.OncolumnIdxChanging(value);
					this.SendPropertyChanging();
					this._columnIdx = value;
					this.SendPropertyChanged("columnIdx");
					this.OncolumnIdxChanged();
				}
			}
		}
		
		[Column(Storage="_rowIdx", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public int rowIdx
		{
			get
			{
				return this._rowIdx;
			}
			set
			{
				if ((this._rowIdx != value))
				{
					this.OnrowIdxChanging(value);
					this.SendPropertyChanging();
					this._rowIdx = value;
					this.SendPropertyChanged("rowIdx");
					this.OnrowIdxChanged();
				}
			}
		}
		
		[Column(Storage="_state", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=7)]
		public int state
		{
			get
			{
				return this._state;
			}
			set
			{
				if ((this._state != value))
				{
					this.OnstateChanging(value);
					this.SendPropertyChanging();
					this._state = value;
					this.SendPropertyChanged("state");
					this.OnstateChanged();
				}
			}
		}
		
		[Column(Storage="_lastupdate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=8)]
		public System.DateTime lastupdate
		{
			get
			{
				return this._lastupdate;
			}
			set
			{
				if ((this._lastupdate != value))
				{
					this.OnlastupdateChanging(value);
					this.SendPropertyChanging();
					this._lastupdate = value;
					this.SendPropertyChanged("lastupdate");
					this.OnlastupdateChanged();
				}
			}
		}
		
		[Association(Name="IKG_TAB_IKG_WIDGET", Storage="_IKG_TAB", ThisKey="username,sNodeTab", OtherKey="username,sNode", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public IKG_TAB IKG_TAB
		{
			get
			{
				return this._IKG_TAB.Entity;
			}
			set
			{
				IKG_TAB previousValue = this._IKG_TAB.Entity;
				if (((previousValue != value) 
							|| (this._IKG_TAB.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKG_TAB.Entity = null;
						previousValue.IKG_WIDGETs.Remove(this);
					}
					this._IKG_TAB.Entity = value;
					if ((value != null))
					{
						value.IKG_WIDGETs.Add(this);
						this._username = value.username;
						this._sNodeTab = value.sNode;
					}
					else
					{
						this._username = default(string);
						this._sNodeTab = default(int);
					}
					this.SendPropertyChanged("IKG_TAB");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._IKG_TAB = default(EntityRef<IKG_TAB>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.IKGD_ACL")]
	[DataContract()]
	public partial class IKGD_ACL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _version;
		
		private System.Nullable<int> _version_frozen;
		
		private System.DateTime _version_date;
		
		private int _rnode;
		
		private bool _flag_published;
		
		private bool _flag_current;
		
		private bool _flag_deleted;
		
		private System.Data.Linq.Link<string> _username;
		
		private string _area;
		
		private int _flags_acl;
		
		private EntityRef<IKGD_RNODE> _IKGD_RNODE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnversionChanging(int value);
    partial void OnversionChanged();
    partial void Onversion_frozenChanging(System.Nullable<int> value);
    partial void Onversion_frozenChanged();
    partial void Onversion_dateChanging(System.DateTime value);
    partial void Onversion_dateChanged();
    partial void OnrnodeChanging(int value);
    partial void OnrnodeChanged();
    partial void Onflag_publishedChanging(bool value);
    partial void Onflag_publishedChanged();
    partial void Onflag_currentChanging(bool value);
    partial void Onflag_currentChanged();
    partial void Onflag_deletedChanging(bool value);
    partial void Onflag_deletedChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnareaChanging(string value);
    partial void OnareaChanged();
    partial void Onflags_aclChanging(int value);
    partial void Onflags_aclChanged();
    #endregion
		
		public IKGD_ACL()
		{
			this.Initialize();
		}
		
		[Column(Storage="_version", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int version
		{
			get
			{
				return this._version;
			}
			set
			{
				if ((this._version != value))
				{
					this.OnversionChanging(value);
					this.SendPropertyChanging();
					this._version = value;
					this.SendPropertyChanged("version");
					this.OnversionChanged();
				}
			}
		}
		
		[Column(Storage="_version_frozen", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public System.Nullable<int> version_frozen
		{
			get
			{
				return this._version_frozen;
			}
			set
			{
				if ((this._version_frozen != value))
				{
					this.Onversion_frozenChanging(value);
					this.SendPropertyChanging();
					this._version_frozen = value;
					this.SendPropertyChanged("version_frozen");
					this.Onversion_frozenChanged();
				}
			}
		}
		
		[Column(Storage="_version_date", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public System.DateTime version_date
		{
			get
			{
				return this._version_date;
			}
			set
			{
				if ((this._version_date != value))
				{
					this.Onversion_dateChanging(value);
					this.SendPropertyChanging();
					this._version_date = value;
					this.SendPropertyChanged("version_date");
					this.Onversion_dateChanged();
				}
			}
		}
		
		[Column(Storage="_rnode", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public int rnode
		{
			get
			{
				return this._rnode;
			}
			set
			{
				if ((this._rnode != value))
				{
					if (this._IKGD_RNODE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrnodeChanging(value);
					this.SendPropertyChanging();
					this._rnode = value;
					this.SendPropertyChanged("rnode");
					this.OnrnodeChanged();
				}
			}
		}
		
		[Column(Storage="_flag_published", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public bool flag_published
		{
			get
			{
				return this._flag_published;
			}
			set
			{
				if ((this._flag_published != value))
				{
					this.Onflag_publishedChanging(value);
					this.SendPropertyChanging();
					this._flag_published = value;
					this.SendPropertyChanged("flag_published");
					this.Onflag_publishedChanged();
				}
			}
		}
		
		[Column(Storage="_flag_current", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public bool flag_current
		{
			get
			{
				return this._flag_current;
			}
			set
			{
				if ((this._flag_current != value))
				{
					this.Onflag_currentChanging(value);
					this.SendPropertyChanging();
					this._flag_current = value;
					this.SendPropertyChanged("flag_current");
					this.Onflag_currentChanged();
				}
			}
		}
		
		[Column(Storage="_flag_deleted", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=7)]
		public bool flag_deleted
		{
			get
			{
				return this._flag_deleted;
			}
			set
			{
				if ((this._flag_deleted != value))
				{
					this.Onflag_deletedChanging(value);
					this.SendPropertyChanging();
					this._flag_deleted = value;
					this.SendPropertyChanged("flag_deleted");
					this.Onflag_deletedChanged();
				}
			}
		}
		
		[Column(Storage="_username", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=8)]
		public string username
		{
			get
			{
				return this._username.Value;
			}
			set
			{
				if ((this._username.Value != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username.Value = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[Column(Storage="_area", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=9)]
		public string area
		{
			get
			{
				return this._area;
			}
			set
			{
				if ((this._area != value))
				{
					this.OnareaChanging(value);
					this.SendPropertyChanging();
					this._area = value;
					this.SendPropertyChanged("area");
					this.OnareaChanged();
				}
			}
		}
		
		[Column(Storage="_flags_acl", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=10)]
		public int flags_acl
		{
			get
			{
				return this._flags_acl;
			}
			set
			{
				if ((this._flags_acl != value))
				{
					this.Onflags_aclChanging(value);
					this.SendPropertyChanging();
					this._flags_acl = value;
					this.SendPropertyChanged("flags_acl");
					this.Onflags_aclChanged();
				}
			}
		}
		
		[Association(Name="IKGD_RNODE_IKGD_ACL", Storage="_IKGD_RNODE", ThisKey="rnode", OtherKey="code", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public IKGD_RNODE IKGD_RNODE
		{
			get
			{
				return this._IKGD_RNODE.Entity;
			}
			set
			{
				IKGD_RNODE previousValue = this._IKGD_RNODE.Entity;
				if (((previousValue != value) 
							|| (this._IKGD_RNODE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKGD_RNODE.Entity = null;
						previousValue.IKGD_ACLs.Remove(this);
					}
					this._IKGD_RNODE.Entity = value;
					if ((value != null))
					{
						value.IKGD_ACLs.Add(this);
						this._rnode = value.code;
					}
					else
					{
						this._rnode = default(int);
					}
					this.SendPropertyChanged("IKGD_RNODE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._IKGD_RNODE = default(EntityRef<IKGD_RNODE>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.IKGD_ADMIN")]
	[DataContract()]
	public partial class IKGD_ADMIN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _username;
		
		private string _area;
		
		private int _flags_acl;
		
		private System.DateTime _date_modif;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnareaChanging(string value);
    partial void OnareaChanged();
    partial void Onflags_aclChanging(int value);
    partial void Onflags_aclChanged();
    partial void Ondate_modifChanging(System.DateTime value);
    partial void Ondate_modifChanged();
    #endregion
		
		public IKGD_ADMIN()
		{
			this.Initialize();
		}
		
		[Column(Storage="_username", DbType="VarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[Column(Storage="_area", DbType="VarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public string area
		{
			get
			{
				return this._area;
			}
			set
			{
				if ((this._area != value))
				{
					this.OnareaChanging(value);
					this.SendPropertyChanging();
					this._area = value;
					this.SendPropertyChanged("area");
					this.OnareaChanged();
				}
			}
		}
		
		[Column(Storage="_flags_acl", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public int flags_acl
		{
			get
			{
				return this._flags_acl;
			}
			set
			{
				if ((this._flags_acl != value))
				{
					this.Onflags_aclChanging(value);
					this.SendPropertyChanging();
					this._flags_acl = value;
					this.SendPropertyChanged("flags_acl");
					this.Onflags_aclChanged();
				}
			}
		}
		
		[Column(Storage="_date_modif", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public System.DateTime date_modif
		{
			get
			{
				return this._date_modif;
			}
			set
			{
				if ((this._date_modif != value))
				{
					this.Ondate_modifChanging(value);
					this.SendPropertyChanging();
					this._date_modif = value;
					this.SendPropertyChanged("date_modif");
					this.Ondate_modifChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.IKGD_CONFIG")]
	[DataContract()]
	public partial class IKGD_CONFIG : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.DateTime _modif;
		
		private string _application;
		
		private string _instance;
		
		private string _type;
		
		private string _key;
		
		private string _value;
		
		private string _description;
		
		private bool _flag_active;
		
		private bool _flag_system;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnmodifChanging(System.DateTime value);
    partial void OnmodifChanged();
    partial void OnapplicationChanging(string value);
    partial void OnapplicationChanged();
    partial void OninstanceChanging(string value);
    partial void OninstanceChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void OnkeyChanging(string value);
    partial void OnkeyChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void Onflag_activeChanging(bool value);
    partial void Onflag_activeChanged();
    partial void Onflag_systemChanging(bool value);
    partial void Onflag_systemChanged();
    #endregion
		
		public IKGD_CONFIG()
		{
			this.Initialize();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_modif", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public System.DateTime modif
		{
			get
			{
				return this._modif;
			}
			set
			{
				if ((this._modif != value))
				{
					this.OnmodifChanging(value);
					this.SendPropertyChanging();
					this._modif = value;
					this.SendPropertyChanged("modif");
					this.OnmodifChanged();
				}
			}
		}
		
		[Column(Storage="_application", DbType="VarChar(256) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public string application
		{
			get
			{
				return this._application;
			}
			set
			{
				if ((this._application != value))
				{
					this.OnapplicationChanging(value);
					this.SendPropertyChanging();
					this._application = value;
					this.SendPropertyChanged("application");
					this.OnapplicationChanged();
				}
			}
		}
		
		[Column(Storage="_instance", DbType="VarChar(256)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public string instance
		{
			get
			{
				return this._instance;
			}
			set
			{
				if ((this._instance != value))
				{
					this.OninstanceChanging(value);
					this.SendPropertyChanging();
					this._instance = value;
					this.SendPropertyChanged("instance");
					this.OninstanceChanged();
				}
			}
		}
		
		[Column(Storage="_type", DbType="VarChar(256)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[Column(Name="[key]", Storage="_key", DbType="VarChar(256) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public string key
		{
			get
			{
				return this._key;
			}
			set
			{
				if ((this._key != value))
				{
					this.OnkeyChanging(value);
					this.SendPropertyChanging();
					this._key = value;
					this.SendPropertyChanged("key");
					this.OnkeyChanged();
				}
			}
		}
		
		[Column(Storage="_value", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=7)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[Column(Storage="_description", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=8)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_flag_active", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=9)]
		public bool flag_active
		{
			get
			{
				return this._flag_active;
			}
			set
			{
				if ((this._flag_active != value))
				{
					this.Onflag_activeChanging(value);
					this.SendPropertyChanging();
					this._flag_active = value;
					this.SendPropertyChanged("flag_active");
					this.Onflag_activeChanged();
				}
			}
		}
		
		[Column(Storage="_flag_system", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=10)]
		public bool flag_system
		{
			get
			{
				return this._flag_system;
			}
			set
			{
				if ((this._flag_system != value))
				{
					this.Onflag_systemChanging(value);
					this.SendPropertyChanging();
					this._flag_system = value;
					this.SendPropertyChanged("flag_system");
					this.Onflag_systemChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.IKGD_KEYSTORAGE")]
	[DataContract()]
	public partial class IKGD_KEYSTORAGE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _modif;
		
		private string _application;
		
		private string _type;
		
		private string _key;
		
		private string _value;
		
		private string _description;
		
		private double _position;
		
		private bool _flag_active;
		
		private bool _flag_system;
		
		private EntitySet<IKGD_KEYSTORAGE_MAP> _IKGD_KEYSTORAGE_MAPs;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmodifChanging(System.DateTime value);
    partial void OnmodifChanged();
    partial void OnapplicationChanging(string value);
    partial void OnapplicationChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void OnkeyChanging(string value);
    partial void OnkeyChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnpositionChanging(double value);
    partial void OnpositionChanged();
    partial void Onflag_activeChanging(bool value);
    partial void Onflag_activeChanged();
    partial void Onflag_systemChanging(bool value);
    partial void Onflag_systemChanged();
    #endregion
		
		public IKGD_KEYSTORAGE()
		{
			this.Initialize();
		}
		
		[Column(Storage="_modif", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public System.DateTime modif
		{
			get
			{
				return this._modif;
			}
			set
			{
				if ((this._modif != value))
				{
					this.OnmodifChanging(value);
					this.SendPropertyChanging();
					this._modif = value;
					this.SendPropertyChanged("modif");
					this.OnmodifChanged();
				}
			}
		}
		
		[Column(Storage="_application", DbType="VarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public string application
		{
			get
			{
				return this._application;
			}
			set
			{
				if ((this._application != value))
				{
					this.OnapplicationChanging(value);
					this.SendPropertyChanging();
					this._application = value;
					this.SendPropertyChanged("application");
					this.OnapplicationChanged();
				}
			}
		}
		
		[Column(Storage="_type", DbType="VarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[Column(Name="[key]", Storage="_key", DbType="VarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public string key
		{
			get
			{
				return this._key;
			}
			set
			{
				if ((this._key != value))
				{
					this.OnkeyChanging(value);
					this.SendPropertyChanging();
					this._key = value;
					this.SendPropertyChanged("key");
					this.OnkeyChanged();
				}
			}
		}
		
		[Column(Storage="_value", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[Column(Storage="_description", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_position", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=7)]
		public double position
		{
			get
			{
				return this._position;
			}
			set
			{
				if ((this._position != value))
				{
					this.OnpositionChanging(value);
					this.SendPropertyChanging();
					this._position = value;
					this.SendPropertyChanged("position");
					this.OnpositionChanged();
				}
			}
		}
		
		[Column(Storage="_flag_active", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=8)]
		public bool flag_active
		{
			get
			{
				return this._flag_active;
			}
			set
			{
				if ((this._flag_active != value))
				{
					this.Onflag_activeChanging(value);
					this.SendPropertyChanging();
					this._flag_active = value;
					this.SendPropertyChanged("flag_active");
					this.Onflag_activeChanged();
				}
			}
		}
		
		[Column(Storage="_flag_system", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=9)]
		public bool flag_system
		{
			get
			{
				return this._flag_system;
			}
			set
			{
				if ((this._flag_system != value))
				{
					this.Onflag_systemChanging(value);
					this.SendPropertyChanging();
					this._flag_system = value;
					this.SendPropertyChanged("flag_system");
					this.Onflag_systemChanged();
				}
			}
		}
		
		[Association(Name="IKGD_KEYSTORAGE_IKGD_KEYSTORAGE_MAP", Storage="_IKGD_KEYSTORAGE_MAPs", ThisKey="application,type,key", OtherKey="application,type,key")]
		[DataMember(Order=10, EmitDefaultValue=false)]
		public EntitySet<IKGD_KEYSTORAGE_MAP> IKGD_KEYSTORAGE_MAPs
		{
			get
			{
				if ((this.serializing 
							&& (this._IKGD_KEYSTORAGE_MAPs.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKGD_KEYSTORAGE_MAPs;
			}
			set
			{
				this._IKGD_KEYSTORAGE_MAPs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IKGD_KEYSTORAGE_MAPs(IKGD_KEYSTORAGE_MAP entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_KEYSTORAGE = this;
		}
		
		private void detach_IKGD_KEYSTORAGE_MAPs(IKGD_KEYSTORAGE_MAP entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_KEYSTORAGE = null;
		}
		
		private void Initialize()
		{
			this._IKGD_KEYSTORAGE_MAPs = new EntitySet<IKGD_KEYSTORAGE_MAP>(new Action<IKGD_KEYSTORAGE_MAP>(this.attach_IKGD_KEYSTORAGE_MAPs), new Action<IKGD_KEYSTORAGE_MAP>(this.detach_IKGD_KEYSTORAGE_MAPs));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.IKGD_KEYSTORAGE_MAP")]
	[DataContract()]
	public partial class IKGD_KEYSTORAGE_MAP : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _application;
		
		private string _type;
		
		private string _key;
		
		private string _language;
		
		private string _description;
		
		private EntityRef<IKGD_KEYSTORAGE> _IKGD_KEYSTORAGE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnapplicationChanging(string value);
    partial void OnapplicationChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void OnkeyChanging(string value);
    partial void OnkeyChanged();
    partial void OnlanguageChanging(string value);
    partial void OnlanguageChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public IKGD_KEYSTORAGE_MAP()
		{
			this.Initialize();
		}
		
		[Column(Storage="_application", DbType="VarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public string application
		{
			get
			{
				return this._application;
			}
			set
			{
				if ((this._application != value))
				{
					if (this._IKGD_KEYSTORAGE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnapplicationChanging(value);
					this.SendPropertyChanging();
					this._application = value;
					this.SendPropertyChanged("application");
					this.OnapplicationChanged();
				}
			}
		}
		
		[Column(Storage="_type", DbType="VarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					if (this._IKGD_KEYSTORAGE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[Column(Name="[key]", Storage="_key", DbType="VarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public string key
		{
			get
			{
				return this._key;
			}
			set
			{
				if ((this._key != value))
				{
					this.OnkeyChanging(value);
					this.SendPropertyChanging();
					this._key = value;
					this.SendPropertyChanged("key");
					this.OnkeyChanged();
				}
			}
		}
		
		[Column(Storage="_language", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public string language
		{
			get
			{
				return this._language;
			}
			set
			{
				if ((this._language != value))
				{
					this.OnlanguageChanging(value);
					this.SendPropertyChanging();
					this._language = value;
					this.SendPropertyChanged("language");
					this.OnlanguageChanged();
				}
			}
		}
		
		[Column(Storage="_description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[Association(Name="IKGD_KEYSTORAGE_IKGD_KEYSTORAGE_MAP", Storage="_IKGD_KEYSTORAGE", ThisKey="application,type,key", OtherKey="application,type,key", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public IKGD_KEYSTORAGE IKGD_KEYSTORAGE
		{
			get
			{
				return this._IKGD_KEYSTORAGE.Entity;
			}
			set
			{
				IKGD_KEYSTORAGE previousValue = this._IKGD_KEYSTORAGE.Entity;
				if (((previousValue != value) 
							|| (this._IKGD_KEYSTORAGE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKGD_KEYSTORAGE.Entity = null;
						previousValue.IKGD_KEYSTORAGE_MAPs.Remove(this);
					}
					this._IKGD_KEYSTORAGE.Entity = value;
					if ((value != null))
					{
						value.IKGD_KEYSTORAGE_MAPs.Add(this);
						this._application = value.application;
						this._type = value.type;
						this._key = value.key;
					}
					else
					{
						this._application = default(string);
						this._type = default(string);
						this._key = default(string);
					}
					this.SendPropertyChanged("IKGD_KEYSTORAGE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._IKGD_KEYSTORAGE = default(EntityRef<IKGD_KEYSTORAGE>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.LazyLoginMapper")]
	[DataContract()]
	public partial class LazyLoginMapper : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Guid _UserId;
		
		private bool _flag_active;
		
		private System.DateTime _Creat;
		
		private EntitySet<LazyLogin_Log> _LazyLogin_Logs;
		
		private EntitySet<LazyLogin_Vote> _LazyLogin_Votes;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void Onflag_activeChanging(bool value);
    partial void Onflag_activeChanged();
    partial void OnCreatChanging(System.DateTime value);
    partial void OnCreatChanged();
    #endregion
		
		public LazyLoginMapper()
		{
			this.Initialize();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_flag_active", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public bool flag_active
		{
			get
			{
				return this._flag_active;
			}
			set
			{
				if ((this._flag_active != value))
				{
					this.Onflag_activeChanging(value);
					this.SendPropertyChanging();
					this._flag_active = value;
					this.SendPropertyChanged("flag_active");
					this.Onflag_activeChanged();
				}
			}
		}
		
		[Column(Storage="_Creat", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public System.DateTime Creat
		{
			get
			{
				return this._Creat;
			}
			set
			{
				if ((this._Creat != value))
				{
					this.OnCreatChanging(value);
					this.SendPropertyChanging();
					this._Creat = value;
					this.SendPropertyChanged("Creat");
					this.OnCreatChanged();
				}
			}
		}
		
		[Association(Name="LazyLoginMapper_LazyLogin_Log", Storage="_LazyLogin_Logs", ThisKey="Id", OtherKey="IdLL")]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public EntitySet<LazyLogin_Log> LazyLogin_Logs
		{
			get
			{
				if ((this.serializing 
							&& (this._LazyLogin_Logs.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._LazyLogin_Logs;
			}
			set
			{
				this._LazyLogin_Logs.Assign(value);
			}
		}
		
		[Association(Name="LazyLoginMapper_LazyLogin_Vote", Storage="_LazyLogin_Votes", ThisKey="Id", OtherKey="IdLL")]
		[DataMember(Order=6, EmitDefaultValue=false)]
		public EntitySet<LazyLogin_Vote> LazyLogin_Votes
		{
			get
			{
				if ((this.serializing 
							&& (this._LazyLogin_Votes.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._LazyLogin_Votes;
			}
			set
			{
				this._LazyLogin_Votes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LazyLogin_Logs(LazyLogin_Log entity)
		{
			this.SendPropertyChanging();
			entity.LazyLoginMapper = this;
		}
		
		private void detach_LazyLogin_Logs(LazyLogin_Log entity)
		{
			this.SendPropertyChanging();
			entity.LazyLoginMapper = null;
		}
		
		private void attach_LazyLogin_Votes(LazyLogin_Vote entity)
		{
			this.SendPropertyChanging();
			entity.LazyLoginMapper = this;
		}
		
		private void detach_LazyLogin_Votes(LazyLogin_Vote entity)
		{
			this.SendPropertyChanging();
			entity.LazyLoginMapper = null;
		}
		
		private void Initialize()
		{
			this._LazyLogin_Logs = new EntitySet<LazyLogin_Log>(new Action<LazyLogin_Log>(this.attach_LazyLogin_Logs), new Action<LazyLogin_Log>(this.detach_LazyLogin_Logs));
			this._LazyLogin_Votes = new EntitySet<LazyLogin_Vote>(new Action<LazyLogin_Vote>(this.attach_LazyLogin_Votes), new Action<LazyLogin_Vote>(this.detach_LazyLogin_Votes));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.LazyLogin_Log")]
	[DataContract()]
	public partial class LazyLogin_Log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdLL;
		
		private System.DateTime _Date;
		
		private System.Nullable<int> _Code;
		
		private System.Nullable<int> _Value;
		
		private string _Text;
		
		private EntityRef<LazyLoginMapper> _LazyLoginMapper;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdLLChanging(int value);
    partial void OnIdLLChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnCodeChanging(System.Nullable<int> value);
    partial void OnCodeChanged();
    partial void OnValueChanging(System.Nullable<int> value);
    partial void OnValueChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public LazyLogin_Log()
		{
			this.Initialize();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdLL", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int IdLL
		{
			get
			{
				return this._IdLL;
			}
			set
			{
				if ((this._IdLL != value))
				{
					if (this._LazyLoginMapper.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdLLChanging(value);
					this.SendPropertyChanging();
					this._IdLL = value;
					this.SendPropertyChanged("IdLL");
					this.OnIdLLChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public System.Nullable<int> Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public System.Nullable<int> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Association(Name="LazyLoginMapper_LazyLogin_Log", Storage="_LazyLoginMapper", ThisKey="IdLL", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LazyLoginMapper LazyLoginMapper
		{
			get
			{
				return this._LazyLoginMapper.Entity;
			}
			set
			{
				LazyLoginMapper previousValue = this._LazyLoginMapper.Entity;
				if (((previousValue != value) 
							|| (this._LazyLoginMapper.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LazyLoginMapper.Entity = null;
						previousValue.LazyLogin_Logs.Remove(this);
					}
					this._LazyLoginMapper.Entity = value;
					if ((value != null))
					{
						value.LazyLogin_Logs.Add(this);
						this._IdLL = value.Id;
					}
					else
					{
						this._IdLL = default(int);
					}
					this.SendPropertyChanged("LazyLoginMapper");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._LazyLoginMapper = default(EntityRef<LazyLoginMapper>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.LazyLogin_Vote")]
	[DataContract()]
	public partial class LazyLogin_Vote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdLL;
		
		private int _rNode;
		
		private int _Category;
		
		private System.DateTime _Date;
		
		private System.Nullable<int> _Value;
		
		private string _Text;
		
		private EntityRef<IKGD_RNODE> _IKGD_RNODE;
		
		private EntityRef<LazyLoginMapper> _LazyLoginMapper;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdLLChanging(int value);
    partial void OnIdLLChanged();
    partial void OnrNodeChanging(int value);
    partial void OnrNodeChanged();
    partial void OnCategoryChanging(int value);
    partial void OnCategoryChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnValueChanging(System.Nullable<int> value);
    partial void OnValueChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public LazyLogin_Vote()
		{
			this.Initialize();
		}
		
		[Column(Storage="_IdLL", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int IdLL
		{
			get
			{
				return this._IdLL;
			}
			set
			{
				if ((this._IdLL != value))
				{
					if (this._LazyLoginMapper.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdLLChanging(value);
					this.SendPropertyChanging();
					this._IdLL = value;
					this.SendPropertyChanged("IdLL");
					this.OnIdLLChanged();
				}
			}
		}
		
		[Column(Storage="_rNode", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int rNode
		{
			get
			{
				return this._rNode;
			}
			set
			{
				if ((this._rNode != value))
				{
					if (this._IKGD_RNODE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrNodeChanging(value);
					this.SendPropertyChanging();
					this._rNode = value;
					this.SendPropertyChanged("rNode");
					this.OnrNodeChanged();
				}
			}
		}
		
		[Column(Storage="_Category", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public int Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public System.Nullable<int> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Association(Name="IKGD_RNODE_LazyLogin_Vote", Storage="_IKGD_RNODE", ThisKey="rNode", OtherKey="code", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public IKGD_RNODE IKGD_RNODE
		{
			get
			{
				return this._IKGD_RNODE.Entity;
			}
			set
			{
				IKGD_RNODE previousValue = this._IKGD_RNODE.Entity;
				if (((previousValue != value) 
							|| (this._IKGD_RNODE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKGD_RNODE.Entity = null;
						previousValue.LazyLogin_Votes.Remove(this);
					}
					this._IKGD_RNODE.Entity = value;
					if ((value != null))
					{
						value.LazyLogin_Votes.Add(this);
						this._rNode = value.code;
					}
					else
					{
						this._rNode = default(int);
					}
					this.SendPropertyChanged("IKGD_RNODE");
				}
			}
		}
		
		[Association(Name="LazyLoginMapper_LazyLogin_Vote", Storage="_LazyLoginMapper", ThisKey="IdLL", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LazyLoginMapper LazyLoginMapper
		{
			get
			{
				return this._LazyLoginMapper.Entity;
			}
			set
			{
				LazyLoginMapper previousValue = this._LazyLoginMapper.Entity;
				if (((previousValue != value) 
							|| (this._LazyLoginMapper.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LazyLoginMapper.Entity = null;
						previousValue.LazyLogin_Votes.Remove(this);
					}
					this._LazyLoginMapper.Entity = value;
					if ((value != null))
					{
						value.LazyLogin_Votes.Add(this);
						this._IdLL = value.Id;
					}
					else
					{
						this._IdLL = default(int);
					}
					this.SendPropertyChanged("LazyLoginMapper");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._IKGD_RNODE = default(EntityRef<IKGD_RNODE>);
			this._LazyLoginMapper = default(EntityRef<LazyLoginMapper>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.IKGD_ASSEMBLY")]
	[DataContract()]
	public partial class IKGD_ASSEMBLY : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _modif;
		
		private string _Name;
		
		private string _FullName;
		
		private System.Data.Linq.Binary _AssemblyStream;
		
		private string _AssembliesMain;
		
		private int _Hash;
		
		private bool _Enabled;
		
		private string _Arch;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnmodifChanging(System.DateTime value);
    partial void OnmodifChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnAssemblyStreamChanging(System.Data.Linq.Binary value);
    partial void OnAssemblyStreamChanged();
    partial void OnAssembliesMainChanging(string value);
    partial void OnAssembliesMainChanged();
    partial void OnHashChanging(int value);
    partial void OnHashChanged();
    partial void OnEnabledChanging(bool value);
    partial void OnEnabledChanged();
    partial void OnArchChanging(string value);
    partial void OnArchChanged();
    #endregion
		
		public IKGD_ASSEMBLY()
		{
			this.Initialize();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_modif", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public System.DateTime modif
		{
			get
			{
				return this._modif;
			}
			set
			{
				if ((this._modif != value))
				{
					this.OnmodifChanging(value);
					this.SendPropertyChanging();
					this._modif = value;
					this.SendPropertyChanged("modif");
					this.OnmodifChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="VarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[Column(Storage="_AssemblyStream", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public System.Data.Linq.Binary AssemblyStream
		{
			get
			{
				return this._AssemblyStream;
			}
			set
			{
				if ((this._AssemblyStream != value))
				{
					this.OnAssemblyStreamChanging(value);
					this.SendPropertyChanging();
					this._AssemblyStream = value;
					this.SendPropertyChanged("AssemblyStream");
					this.OnAssemblyStreamChanged();
				}
			}
		}
		
		[Column(Storage="_AssembliesMain", DbType="VarChar(750) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public string AssembliesMain
		{
			get
			{
				return this._AssembliesMain;
			}
			set
			{
				if ((this._AssembliesMain != value))
				{
					this.OnAssembliesMainChanging(value);
					this.SendPropertyChanging();
					this._AssembliesMain = value;
					this.SendPropertyChanged("AssembliesMain");
					this.OnAssembliesMainChanged();
				}
			}
		}
		
		[Column(Storage="_Hash", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=7)]
		public int Hash
		{
			get
			{
				return this._Hash;
			}
			set
			{
				if ((this._Hash != value))
				{
					this.OnHashChanging(value);
					this.SendPropertyChanging();
					this._Hash = value;
					this.SendPropertyChanged("Hash");
					this.OnHashChanged();
				}
			}
		}
		
		[Column(Storage="_Enabled", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=8)]
		public bool Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		[Column(Storage="_Arch", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=9)]
		public string Arch
		{
			get
			{
				return this._Arch;
			}
			set
			{
				if ((this._Arch != value))
				{
					this.OnArchChanging(value);
					this.SendPropertyChanging();
					this._Arch = value;
					this.SendPropertyChanged("Arch");
					this.OnArchChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.IKCMS_SEO")]
	[DataContract()]
	public partial class IKCMS_SEO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _application;
		
		private string _SEO_url;
		
		private System.Nullable<int> _target_snode;
		
		private System.Nullable<int> _target_rnode;
		
		private string _target_url;
		
		private string _language;
		
		private bool _canonical;
		
		private bool _active;
		
		private System.Nullable<int> _http_code;
		
		private double _priority;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnapplicationChanging(string value);
    partial void OnapplicationChanged();
    partial void OnSEO_urlChanging(string value);
    partial void OnSEO_urlChanged();
    partial void Ontarget_snodeChanging(System.Nullable<int> value);
    partial void Ontarget_snodeChanged();
    partial void Ontarget_rnodeChanging(System.Nullable<int> value);
    partial void Ontarget_rnodeChanged();
    partial void Ontarget_urlChanging(string value);
    partial void Ontarget_urlChanged();
    partial void OnlanguageChanging(string value);
    partial void OnlanguageChanged();
    partial void OncanonicalChanging(bool value);
    partial void OncanonicalChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void Onhttp_codeChanging(System.Nullable<int> value);
    partial void Onhttp_codeChanged();
    partial void OnpriorityChanging(double value);
    partial void OnpriorityChanged();
    #endregion
		
		public IKCMS_SEO()
		{
			this.Initialize();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_application", DbType="VarChar(256) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public string application
		{
			get
			{
				return this._application;
			}
			set
			{
				if ((this._application != value))
				{
					this.OnapplicationChanging(value);
					this.SendPropertyChanging();
					this._application = value;
					this.SendPropertyChanged("application");
					this.OnapplicationChanged();
				}
			}
		}
		
		[Column(Storage="_SEO_url", DbType="NVarChar(450) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public string SEO_url
		{
			get
			{
				return this._SEO_url;
			}
			set
			{
				if ((this._SEO_url != value))
				{
					this.OnSEO_urlChanging(value);
					this.SendPropertyChanging();
					this._SEO_url = value;
					this.SendPropertyChanged("SEO_url");
					this.OnSEO_urlChanged();
				}
			}
		}
		
		[Column(Storage="_target_snode", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public System.Nullable<int> target_snode
		{
			get
			{
				return this._target_snode;
			}
			set
			{
				if ((this._target_snode != value))
				{
					this.Ontarget_snodeChanging(value);
					this.SendPropertyChanging();
					this._target_snode = value;
					this.SendPropertyChanged("target_snode");
					this.Ontarget_snodeChanged();
				}
			}
		}
		
		[Column(Storage="_target_rnode", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public System.Nullable<int> target_rnode
		{
			get
			{
				return this._target_rnode;
			}
			set
			{
				if ((this._target_rnode != value))
				{
					this.Ontarget_rnodeChanging(value);
					this.SendPropertyChanging();
					this._target_rnode = value;
					this.SendPropertyChanged("target_rnode");
					this.Ontarget_rnodeChanged();
				}
			}
		}
		
		[Column(Storage="_target_url", DbType="NVarChar(450)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public string target_url
		{
			get
			{
				return this._target_url;
			}
			set
			{
				if ((this._target_url != value))
				{
					this.Ontarget_urlChanging(value);
					this.SendPropertyChanging();
					this._target_url = value;
					this.SendPropertyChanged("target_url");
					this.Ontarget_urlChanged();
				}
			}
		}
		
		[Column(Storage="_language", DbType="VarChar(2)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=7)]
		public string language
		{
			get
			{
				return this._language;
			}
			set
			{
				if ((this._language != value))
				{
					this.OnlanguageChanging(value);
					this.SendPropertyChanging();
					this._language = value;
					this.SendPropertyChanged("language");
					this.OnlanguageChanged();
				}
			}
		}
		
		[Column(Storage="_canonical", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=8)]
		public bool canonical
		{
			get
			{
				return this._canonical;
			}
			set
			{
				if ((this._canonical != value))
				{
					this.OncanonicalChanging(value);
					this.SendPropertyChanging();
					this._canonical = value;
					this.SendPropertyChanged("canonical");
					this.OncanonicalChanged();
				}
			}
		}
		
		[Column(Storage="_active", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=9)]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[Column(Storage="_http_code", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=10)]
		public System.Nullable<int> http_code
		{
			get
			{
				return this._http_code;
			}
			set
			{
				if ((this._http_code != value))
				{
					this.Onhttp_codeChanging(value);
					this.SendPropertyChanging();
					this._http_code = value;
					this.SendPropertyChanged("http_code");
					this.Onhttp_codeChanged();
				}
			}
		}
		
		[Column(Storage="_priority", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=11)]
		public double priority
		{
			get
			{
				return this._priority;
			}
			set
			{
				if ((this._priority != value))
				{
					this.OnpriorityChanging(value);
					this.SendPropertyChanging();
					this._priority = value;
					this.SendPropertyChanged("priority");
					this.OnpriorityChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.IKCAT_Attribute")]
	[DataContract()]
	public partial class IKCAT_Attribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AttributeId;
		
		private string _AttributeCode;
		
		private string _AttributeType;
		
		private System.Nullable<int> _ParentAttributeId;
		
		private int _DepthLevel;
		
		private double _Position;
		
		private bool _FlagActive;
		
		private bool _FlagSystem;
		
		private int _Flags;
		
		private int _DataType;
		
		private System.Nullable<System.DateTime> _Modif;
		
		private string _Name;
		
		private string _Text;
		
		private System.Data.Linq.Binary _Data;
		
		private EntitySet<IKGD_PROPERTY> _IKGD_PROPERTies;
		
		private EntitySet<IKCAT_Attribute> _IKCAT_Attributes;
		
		private EntitySet<IKCAT_AttributeResource> _IKCAT_AttributeResources;
		
		private EntitySet<IKCAT_AttributeStream> _IKCAT_AttributeStreams;
		
		private EntitySet<IKCAT_ElementAttribute> _IKCAT_ElementAttributes;
		
		private EntityRef<IKCAT_Attribute> _IKCAT_AttributeParent;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAttributeIdChanging(int value);
    partial void OnAttributeIdChanged();
    partial void OnAttributeCodeChanging(string value);
    partial void OnAttributeCodeChanged();
    partial void OnAttributeTypeChanging(string value);
    partial void OnAttributeTypeChanged();
    partial void OnParentAttributeIdChanging(System.Nullable<int> value);
    partial void OnParentAttributeIdChanged();
    partial void OnDepthLevelChanging(int value);
    partial void OnDepthLevelChanged();
    partial void OnPositionChanging(double value);
    partial void OnPositionChanged();
    partial void OnFlagActiveChanging(bool value);
    partial void OnFlagActiveChanged();
    partial void OnFlagSystemChanging(bool value);
    partial void OnFlagSystemChanged();
    partial void OnFlagsChanging(int value);
    partial void OnFlagsChanged();
    partial void OnDataTypeChanging(int value);
    partial void OnDataTypeChanged();
    partial void OnModifChanging(System.Nullable<System.DateTime> value);
    partial void OnModifChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnDataChanging(System.Data.Linq.Binary value);
    partial void OnDataChanged();
    #endregion
		
		public IKCAT_Attribute()
		{
			this.Initialize();
		}
		
		[Column(Storage="_AttributeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int AttributeId
		{
			get
			{
				return this._AttributeId;
			}
			set
			{
				if ((this._AttributeId != value))
				{
					this.OnAttributeIdChanging(value);
					this.SendPropertyChanging();
					this._AttributeId = value;
					this.SendPropertyChanged("AttributeId");
					this.OnAttributeIdChanged();
				}
			}
		}
		
		[Column(Storage="_AttributeCode", DbType="VarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public string AttributeCode
		{
			get
			{
				return this._AttributeCode;
			}
			set
			{
				if ((this._AttributeCode != value))
				{
					this.OnAttributeCodeChanging(value);
					this.SendPropertyChanging();
					this._AttributeCode = value;
					this.SendPropertyChanged("AttributeCode");
					this.OnAttributeCodeChanged();
				}
			}
		}
		
		[Column(Storage="_AttributeType", DbType="VarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public string AttributeType
		{
			get
			{
				return this._AttributeType;
			}
			set
			{
				if ((this._AttributeType != value))
				{
					this.OnAttributeTypeChanging(value);
					this.SendPropertyChanging();
					this._AttributeType = value;
					this.SendPropertyChanged("AttributeType");
					this.OnAttributeTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ParentAttributeId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public System.Nullable<int> ParentAttributeId
		{
			get
			{
				return this._ParentAttributeId;
			}
			set
			{
				if ((this._ParentAttributeId != value))
				{
					if (this._IKCAT_AttributeParent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentAttributeIdChanging(value);
					this.SendPropertyChanging();
					this._ParentAttributeId = value;
					this.SendPropertyChanged("ParentAttributeId");
					this.OnParentAttributeIdChanged();
				}
			}
		}
		
		[Column(Storage="_DepthLevel", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public int DepthLevel
		{
			get
			{
				return this._DepthLevel;
			}
			set
			{
				if ((this._DepthLevel != value))
				{
					this.OnDepthLevelChanging(value);
					this.SendPropertyChanging();
					this._DepthLevel = value;
					this.SendPropertyChanged("DepthLevel");
					this.OnDepthLevelChanged();
				}
			}
		}
		
		[Column(Storage="_Position", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public double Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[Column(Storage="_FlagActive", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=7)]
		public bool FlagActive
		{
			get
			{
				return this._FlagActive;
			}
			set
			{
				if ((this._FlagActive != value))
				{
					this.OnFlagActiveChanging(value);
					this.SendPropertyChanging();
					this._FlagActive = value;
					this.SendPropertyChanged("FlagActive");
					this.OnFlagActiveChanged();
				}
			}
		}
		
		[Column(Storage="_FlagSystem", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=8)]
		public bool FlagSystem
		{
			get
			{
				return this._FlagSystem;
			}
			set
			{
				if ((this._FlagSystem != value))
				{
					this.OnFlagSystemChanging(value);
					this.SendPropertyChanging();
					this._FlagSystem = value;
					this.SendPropertyChanged("FlagSystem");
					this.OnFlagSystemChanged();
				}
			}
		}
		
		[Column(Storage="_Flags", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=9)]
		public int Flags
		{
			get
			{
				return this._Flags;
			}
			set
			{
				if ((this._Flags != value))
				{
					this.OnFlagsChanging(value);
					this.SendPropertyChanging();
					this._Flags = value;
					this.SendPropertyChanged("Flags");
					this.OnFlagsChanged();
				}
			}
		}
		
		[Column(Storage="_DataType", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=10)]
		public int DataType
		{
			get
			{
				return this._DataType;
			}
			set
			{
				if ((this._DataType != value))
				{
					this.OnDataTypeChanging(value);
					this.SendPropertyChanging();
					this._DataType = value;
					this.SendPropertyChanged("DataType");
					this.OnDataTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Modif", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=11)]
		public System.Nullable<System.DateTime> Modif
		{
			get
			{
				return this._Modif;
			}
			set
			{
				if ((this._Modif != value))
				{
					this.OnModifChanging(value);
					this.SendPropertyChanging();
					this._Modif = value;
					this.SendPropertyChanged("Modif");
					this.OnModifChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=12)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=13)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Column(Storage="_Data", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=14)]
		public System.Data.Linq.Binary Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[Association(Name="IKCAT_Attribute_IKGD_PROPERTY", Storage="_IKGD_PROPERTies", ThisKey="AttributeId", OtherKey="attributeId")]
		[DataMember(Order=15, EmitDefaultValue=false)]
		public EntitySet<IKGD_PROPERTY> IKGD_PROPERTies
		{
			get
			{
				if ((this.serializing 
							&& (this._IKGD_PROPERTies.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKGD_PROPERTies;
			}
			set
			{
				this._IKGD_PROPERTies.Assign(value);
			}
		}
		
		[Association(Name="IKCAT_Attribute_IKCAT_Attribute", Storage="_IKCAT_Attributes", ThisKey="AttributeId", OtherKey="ParentAttributeId")]
		[DataMember(Order=16, EmitDefaultValue=false)]
		public EntitySet<IKCAT_Attribute> IKCAT_Attributes
		{
			get
			{
				if ((this.serializing 
							&& (this._IKCAT_Attributes.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKCAT_Attributes;
			}
			set
			{
				this._IKCAT_Attributes.Assign(value);
			}
		}
		
		[Association(Name="IKCAT_Attribute_IKCAT_AttributeResource", Storage="_IKCAT_AttributeResources", ThisKey="AttributeId", OtherKey="AttributeId")]
		[DataMember(Order=17, EmitDefaultValue=false)]
		public EntitySet<IKCAT_AttributeResource> IKCAT_AttributeResources
		{
			get
			{
				if ((this.serializing 
							&& (this._IKCAT_AttributeResources.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKCAT_AttributeResources;
			}
			set
			{
				this._IKCAT_AttributeResources.Assign(value);
			}
		}
		
		[Association(Name="IKCAT_Attribute_IKCAT_AttributeStream", Storage="_IKCAT_AttributeStreams", ThisKey="AttributeId", OtherKey="AttributeId")]
		[DataMember(Order=18, EmitDefaultValue=false)]
		public EntitySet<IKCAT_AttributeStream> IKCAT_AttributeStreams
		{
			get
			{
				if ((this.serializing 
							&& (this._IKCAT_AttributeStreams.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKCAT_AttributeStreams;
			}
			set
			{
				this._IKCAT_AttributeStreams.Assign(value);
			}
		}
		
		[Association(Name="IKCAT_Attribute_IKCAT_ElementAttribute", Storage="_IKCAT_ElementAttributes", ThisKey="AttributeId", OtherKey="AttributeId")]
		[DataMember(Order=19, EmitDefaultValue=false)]
		public EntitySet<IKCAT_ElementAttribute> IKCAT_ElementAttributes
		{
			get
			{
				if ((this.serializing 
							&& (this._IKCAT_ElementAttributes.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKCAT_ElementAttributes;
			}
			set
			{
				this._IKCAT_ElementAttributes.Assign(value);
			}
		}
		
		[Association(Name="IKCAT_Attribute_IKCAT_Attribute", Storage="_IKCAT_AttributeParent", ThisKey="ParentAttributeId", OtherKey="AttributeId", IsForeignKey=true)]
		public IKCAT_Attribute IKCAT_AttributeParent
		{
			get
			{
				return this._IKCAT_AttributeParent.Entity;
			}
			set
			{
				IKCAT_Attribute previousValue = this._IKCAT_AttributeParent.Entity;
				if (((previousValue != value) 
							|| (this._IKCAT_AttributeParent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKCAT_AttributeParent.Entity = null;
						previousValue.IKCAT_Attributes.Remove(this);
					}
					this._IKCAT_AttributeParent.Entity = value;
					if ((value != null))
					{
						value.IKCAT_Attributes.Add(this);
						this._ParentAttributeId = value.AttributeId;
					}
					else
					{
						this._ParentAttributeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("IKCAT_AttributeParent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IKGD_PROPERTies(IKGD_PROPERTY entity)
		{
			this.SendPropertyChanging();
			entity.IKCAT_Attribute = this;
		}
		
		private void detach_IKGD_PROPERTies(IKGD_PROPERTY entity)
		{
			this.SendPropertyChanging();
			entity.IKCAT_Attribute = null;
		}
		
		private void attach_IKCAT_Attributes(IKCAT_Attribute entity)
		{
			this.SendPropertyChanging();
			entity.IKCAT_AttributeParent = this;
		}
		
		private void detach_IKCAT_Attributes(IKCAT_Attribute entity)
		{
			this.SendPropertyChanging();
			entity.IKCAT_AttributeParent = null;
		}
		
		private void attach_IKCAT_AttributeResources(IKCAT_AttributeResource entity)
		{
			this.SendPropertyChanging();
			entity.IKCAT_Attribute = this;
		}
		
		private void detach_IKCAT_AttributeResources(IKCAT_AttributeResource entity)
		{
			this.SendPropertyChanging();
			entity.IKCAT_Attribute = null;
		}
		
		private void attach_IKCAT_AttributeStreams(IKCAT_AttributeStream entity)
		{
			this.SendPropertyChanging();
			entity.IKCAT_Attribute = this;
		}
		
		private void detach_IKCAT_AttributeStreams(IKCAT_AttributeStream entity)
		{
			this.SendPropertyChanging();
			entity.IKCAT_Attribute = null;
		}
		
		private void attach_IKCAT_ElementAttributes(IKCAT_ElementAttribute entity)
		{
			this.SendPropertyChanging();
			entity.IKCAT_Attribute = this;
		}
		
		private void detach_IKCAT_ElementAttributes(IKCAT_ElementAttribute entity)
		{
			this.SendPropertyChanging();
			entity.IKCAT_Attribute = null;
		}
		
		private void Initialize()
		{
			this._IKGD_PROPERTies = new EntitySet<IKGD_PROPERTY>(new Action<IKGD_PROPERTY>(this.attach_IKGD_PROPERTies), new Action<IKGD_PROPERTY>(this.detach_IKGD_PROPERTies));
			this._IKCAT_Attributes = new EntitySet<IKCAT_Attribute>(new Action<IKCAT_Attribute>(this.attach_IKCAT_Attributes), new Action<IKCAT_Attribute>(this.detach_IKCAT_Attributes));
			this._IKCAT_AttributeResources = new EntitySet<IKCAT_AttributeResource>(new Action<IKCAT_AttributeResource>(this.attach_IKCAT_AttributeResources), new Action<IKCAT_AttributeResource>(this.detach_IKCAT_AttributeResources));
			this._IKCAT_AttributeStreams = new EntitySet<IKCAT_AttributeStream>(new Action<IKCAT_AttributeStream>(this.attach_IKCAT_AttributeStreams), new Action<IKCAT_AttributeStream>(this.detach_IKCAT_AttributeStreams));
			this._IKCAT_ElementAttributes = new EntitySet<IKCAT_ElementAttribute>(new Action<IKCAT_ElementAttribute>(this.attach_IKCAT_ElementAttributes), new Action<IKCAT_ElementAttribute>(this.detach_IKCAT_ElementAttributes));
			this._IKCAT_AttributeParent = default(EntityRef<IKCAT_Attribute>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.IKCAT_AttributeResource")]
	[DataContract()]
	public partial class IKCAT_AttributeResource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<System.DateTime> _Modif;
		
		private int _AttributeId;
		
		private string _Key;
		
		private string _Language;
		
		private System.Nullable<int> _Type;
		
		private string _Value;
		
		private EntityRef<IKCAT_Attribute> _IKCAT_Attribute;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnModifChanging(System.Nullable<System.DateTime> value);
    partial void OnModifChanged();
    partial void OnAttributeIdChanging(int value);
    partial void OnAttributeIdChanged();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnLanguageChanging(string value);
    partial void OnLanguageChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public IKCAT_AttributeResource()
		{
			this.Initialize();
		}
		
		[Column(Storage="_Modif", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public System.Nullable<System.DateTime> Modif
		{
			get
			{
				return this._Modif;
			}
			set
			{
				if ((this._Modif != value))
				{
					this.OnModifChanging(value);
					this.SendPropertyChanging();
					this._Modif = value;
					this.SendPropertyChanged("Modif");
					this.OnModifChanged();
				}
			}
		}
		
		[Column(Storage="_AttributeId", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int AttributeId
		{
			get
			{
				return this._AttributeId;
			}
			set
			{
				if ((this._AttributeId != value))
				{
					if (this._IKCAT_Attribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttributeIdChanging(value);
					this.SendPropertyChanging();
					this._AttributeId = value;
					this.SendPropertyChanged("AttributeId");
					this.OnAttributeIdChanged();
				}
			}
		}
		
		[Column(Name="[Key]", Storage="_Key", DbType="VarChar(250) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[Column(Storage="_Language", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public string Language
		{
			get
			{
				return this._Language;
			}
			set
			{
				if ((this._Language != value))
				{
					this.OnLanguageChanging(value);
					this.SendPropertyChanging();
					this._Language = value;
					this.SendPropertyChanged("Language");
					this.OnLanguageChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Association(Name="IKCAT_Attribute_IKCAT_AttributeResource", Storage="_IKCAT_Attribute", ThisKey="AttributeId", OtherKey="AttributeId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public IKCAT_Attribute IKCAT_Attribute
		{
			get
			{
				return this._IKCAT_Attribute.Entity;
			}
			set
			{
				IKCAT_Attribute previousValue = this._IKCAT_Attribute.Entity;
				if (((previousValue != value) 
							|| (this._IKCAT_Attribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKCAT_Attribute.Entity = null;
						previousValue.IKCAT_AttributeResources.Remove(this);
					}
					this._IKCAT_Attribute.Entity = value;
					if ((value != null))
					{
						value.IKCAT_AttributeResources.Add(this);
						this._AttributeId = value.AttributeId;
					}
					else
					{
						this._AttributeId = default(int);
					}
					this.SendPropertyChanged("IKCAT_Attribute");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._IKCAT_Attribute = default(EntityRef<IKCAT_Attribute>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.IKCAT_AttributeStream")]
	[DataContract()]
	public partial class IKCAT_AttributeStream : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AttributeId;
		
		private string _Key;
		
		private System.Nullable<System.DateTime> _Modif;
		
		private string _Filename;
		
		private string _Mime;
		
		private System.Data.Linq.Binary _Data;
		
		private EntityRef<IKCAT_Attribute> _IKCAT_Attribute;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAttributeIdChanging(int value);
    partial void OnAttributeIdChanged();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnModifChanging(System.Nullable<System.DateTime> value);
    partial void OnModifChanged();
    partial void OnFilenameChanging(string value);
    partial void OnFilenameChanged();
    partial void OnMimeChanging(string value);
    partial void OnMimeChanged();
    partial void OnDataChanging(System.Data.Linq.Binary value);
    partial void OnDataChanged();
    #endregion
		
		public IKCAT_AttributeStream()
		{
			this.Initialize();
		}
		
		[Column(Storage="_AttributeId", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int AttributeId
		{
			get
			{
				return this._AttributeId;
			}
			set
			{
				if ((this._AttributeId != value))
				{
					if (this._IKCAT_Attribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttributeIdChanging(value);
					this.SendPropertyChanging();
					this._AttributeId = value;
					this.SendPropertyChanged("AttributeId");
					this.OnAttributeIdChanged();
				}
			}
		}
		
		[Column(Name="[Key]", Storage="_Key", DbType="VarChar(250) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[Column(Storage="_Modif", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public System.Nullable<System.DateTime> Modif
		{
			get
			{
				return this._Modif;
			}
			set
			{
				if ((this._Modif != value))
				{
					this.OnModifChanging(value);
					this.SendPropertyChanging();
					this._Modif = value;
					this.SendPropertyChanged("Modif");
					this.OnModifChanged();
				}
			}
		}
		
		[Column(Storage="_Filename", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public string Filename
		{
			get
			{
				return this._Filename;
			}
			set
			{
				if ((this._Filename != value))
				{
					this.OnFilenameChanging(value);
					this.SendPropertyChanging();
					this._Filename = value;
					this.SendPropertyChanged("Filename");
					this.OnFilenameChanged();
				}
			}
		}
		
		[Column(Storage="_Mime", DbType="VarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public string Mime
		{
			get
			{
				return this._Mime;
			}
			set
			{
				if ((this._Mime != value))
				{
					this.OnMimeChanging(value);
					this.SendPropertyChanging();
					this._Mime = value;
					this.SendPropertyChanged("Mime");
					this.OnMimeChanged();
				}
			}
		}
		
		[Column(Storage="_Data", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public System.Data.Linq.Binary Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[Association(Name="IKCAT_Attribute_IKCAT_AttributeStream", Storage="_IKCAT_Attribute", ThisKey="AttributeId", OtherKey="AttributeId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public IKCAT_Attribute IKCAT_Attribute
		{
			get
			{
				return this._IKCAT_Attribute.Entity;
			}
			set
			{
				IKCAT_Attribute previousValue = this._IKCAT_Attribute.Entity;
				if (((previousValue != value) 
							|| (this._IKCAT_Attribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKCAT_Attribute.Entity = null;
						previousValue.IKCAT_AttributeStreams.Remove(this);
					}
					this._IKCAT_Attribute.Entity = value;
					if ((value != null))
					{
						value.IKCAT_AttributeStreams.Add(this);
						this._AttributeId = value.AttributeId;
					}
					else
					{
						this._AttributeId = default(int);
					}
					this.SendPropertyChanged("IKCAT_Attribute");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._IKCAT_Attribute = default(EntityRef<IKCAT_Attribute>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.IKCAT_ElementFolder")]
	[DataContract()]
	public partial class IKCAT_ElementFolder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdMain;
		
		private int _rNode;
		
		private System.Nullable<int> _sNode;
		
		private bool _flag_published;
		
		private bool _flag_current;
		
		private EntityRef<IKGD_RNODE> _IKGD_RNODE;
		
		private EntityRef<IKGD_SNODE> _IKGD_SNODE;
		
		private EntityRef<IKCAT_ElementMain> _IKCAT_ElementMain;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdMainChanging(int value);
    partial void OnIdMainChanged();
    partial void OnrNodeChanging(int value);
    partial void OnrNodeChanged();
    partial void OnsNodeChanging(System.Nullable<int> value);
    partial void OnsNodeChanged();
    partial void Onflag_publishedChanging(bool value);
    partial void Onflag_publishedChanged();
    partial void Onflag_currentChanging(bool value);
    partial void Onflag_currentChanged();
    #endregion
		
		public IKCAT_ElementFolder()
		{
			this.Initialize();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdMain", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int IdMain
		{
			get
			{
				return this._IdMain;
			}
			set
			{
				if ((this._IdMain != value))
				{
					if (this._IKCAT_ElementMain.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdMainChanging(value);
					this.SendPropertyChanging();
					this._IdMain = value;
					this.SendPropertyChanged("IdMain");
					this.OnIdMainChanged();
				}
			}
		}
		
		[Column(Storage="_rNode", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public int rNode
		{
			get
			{
				return this._rNode;
			}
			set
			{
				if ((this._rNode != value))
				{
					if (this._IKGD_RNODE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrNodeChanging(value);
					this.SendPropertyChanging();
					this._rNode = value;
					this.SendPropertyChanged("rNode");
					this.OnrNodeChanged();
				}
			}
		}
		
		[Column(Storage="_sNode", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public System.Nullable<int> sNode
		{
			get
			{
				return this._sNode;
			}
			set
			{
				if ((this._sNode != value))
				{
					if (this._IKGD_SNODE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsNodeChanging(value);
					this.SendPropertyChanging();
					this._sNode = value;
					this.SendPropertyChanged("sNode");
					this.OnsNodeChanged();
				}
			}
		}
		
		[Column(Storage="_flag_published", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public bool flag_published
		{
			get
			{
				return this._flag_published;
			}
			set
			{
				if ((this._flag_published != value))
				{
					this.Onflag_publishedChanging(value);
					this.SendPropertyChanging();
					this._flag_published = value;
					this.SendPropertyChanged("flag_published");
					this.Onflag_publishedChanged();
				}
			}
		}
		
		[Column(Storage="_flag_current", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public bool flag_current
		{
			get
			{
				return this._flag_current;
			}
			set
			{
				if ((this._flag_current != value))
				{
					this.Onflag_currentChanging(value);
					this.SendPropertyChanging();
					this._flag_current = value;
					this.SendPropertyChanged("flag_current");
					this.Onflag_currentChanged();
				}
			}
		}
		
		[Association(Name="IKGD_RNODE_IKCAT_ElementFolder", Storage="_IKGD_RNODE", ThisKey="rNode", OtherKey="code", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public IKGD_RNODE IKGD_RNODE
		{
			get
			{
				return this._IKGD_RNODE.Entity;
			}
			set
			{
				IKGD_RNODE previousValue = this._IKGD_RNODE.Entity;
				if (((previousValue != value) 
							|| (this._IKGD_RNODE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKGD_RNODE.Entity = null;
						previousValue.IKCAT_ElementFolders.Remove(this);
					}
					this._IKGD_RNODE.Entity = value;
					if ((value != null))
					{
						value.IKCAT_ElementFolders.Add(this);
						this._rNode = value.code;
					}
					else
					{
						this._rNode = default(int);
					}
					this.SendPropertyChanged("IKGD_RNODE");
				}
			}
		}
		
		[Association(Name="IKGD_SNODE_IKCAT_ElementFolder", Storage="_IKGD_SNODE", ThisKey="sNode", OtherKey="code", IsForeignKey=true)]
		public IKGD_SNODE IKGD_SNODE
		{
			get
			{
				return this._IKGD_SNODE.Entity;
			}
			set
			{
				IKGD_SNODE previousValue = this._IKGD_SNODE.Entity;
				if (((previousValue != value) 
							|| (this._IKGD_SNODE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKGD_SNODE.Entity = null;
						previousValue.IKCAT_ElementFolders.Remove(this);
					}
					this._IKGD_SNODE.Entity = value;
					if ((value != null))
					{
						value.IKCAT_ElementFolders.Add(this);
						this._sNode = value.code;
					}
					else
					{
						this._sNode = default(Nullable<int>);
					}
					this.SendPropertyChanged("IKGD_SNODE");
				}
			}
		}
		
		[Association(Name="IKCAT_ElementMain_IKCAT_ElementFolder", Storage="_IKCAT_ElementMain", ThisKey="IdMain", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public IKCAT_ElementMain IKCAT_ElementMain
		{
			get
			{
				return this._IKCAT_ElementMain.Entity;
			}
			set
			{
				IKCAT_ElementMain previousValue = this._IKCAT_ElementMain.Entity;
				if (((previousValue != value) 
							|| (this._IKCAT_ElementMain.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKCAT_ElementMain.Entity = null;
						previousValue.IKCAT_ElementFolders.Remove(this);
					}
					this._IKCAT_ElementMain.Entity = value;
					if ((value != null))
					{
						value.IKCAT_ElementFolders.Add(this);
						this._IdMain = value.Id;
					}
					else
					{
						this._IdMain = default(int);
					}
					this.SendPropertyChanged("IKCAT_ElementMain");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._IKGD_RNODE = default(EntityRef<IKGD_RNODE>);
			this._IKGD_SNODE = default(EntityRef<IKGD_SNODE>);
			this._IKCAT_ElementMain = default(EntityRef<IKCAT_ElementMain>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.IKCAT_ElementMain")]
	[DataContract()]
	public partial class IKCAT_ElementMain : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Code;
		
		private int _rNode;
		
		private int _rNodeFolder;
		
		private string _Catalog;
		
		private bool _flag_published;
		
		private bool _flag_current;
		
		private string _Name;
		
		private string _Text;
		
		private EntitySet<IKCAT_ElementFolder> _IKCAT_ElementFolders;
		
		private EntitySet<IKCAT_ElementVariant> _IKCAT_ElementVariants;
		
		private EntitySet<IKCAT_ElementAttribute> _IKCAT_ElementAttributes;
		
		private EntityRef<IKGD_RNODE> _IKGD_RNODE;
		
		private EntityRef<IKGD_RNODE> _IKGD_RNODE_Folder;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnrNodeChanging(int value);
    partial void OnrNodeChanged();
    partial void OnrNodeFolderChanging(int value);
    partial void OnrNodeFolderChanged();
    partial void OnCatalogChanging(string value);
    partial void OnCatalogChanged();
    partial void Onflag_publishedChanging(bool value);
    partial void Onflag_publishedChanged();
    partial void Onflag_currentChanging(bool value);
    partial void Onflag_currentChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public IKCAT_ElementMain()
		{
			this.Initialize();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_rNode", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public int rNode
		{
			get
			{
				return this._rNode;
			}
			set
			{
				if ((this._rNode != value))
				{
					if (this._IKGD_RNODE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrNodeChanging(value);
					this.SendPropertyChanging();
					this._rNode = value;
					this.SendPropertyChanged("rNode");
					this.OnrNodeChanged();
				}
			}
		}
		
		[Column(Storage="_rNodeFolder", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public int rNodeFolder
		{
			get
			{
				return this._rNodeFolder;
			}
			set
			{
				if ((this._rNodeFolder != value))
				{
					if (this._IKGD_RNODE_Folder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrNodeFolderChanging(value);
					this.SendPropertyChanging();
					this._rNodeFolder = value;
					this.SendPropertyChanged("rNodeFolder");
					this.OnrNodeFolderChanged();
				}
			}
		}
		
		[Column(Storage="_Catalog", DbType="VarChar(10)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public string Catalog
		{
			get
			{
				return this._Catalog;
			}
			set
			{
				if ((this._Catalog != value))
				{
					this.OnCatalogChanging(value);
					this.SendPropertyChanging();
					this._Catalog = value;
					this.SendPropertyChanged("Catalog");
					this.OnCatalogChanged();
				}
			}
		}
		
		[Column(Storage="_flag_published", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public bool flag_published
		{
			get
			{
				return this._flag_published;
			}
			set
			{
				if ((this._flag_published != value))
				{
					this.Onflag_publishedChanging(value);
					this.SendPropertyChanging();
					this._flag_published = value;
					this.SendPropertyChanged("flag_published");
					this.Onflag_publishedChanged();
				}
			}
		}
		
		[Column(Storage="_flag_current", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=7)]
		public bool flag_current
		{
			get
			{
				return this._flag_current;
			}
			set
			{
				if ((this._flag_current != value))
				{
					this.Onflag_currentChanging(value);
					this.SendPropertyChanging();
					this._flag_current = value;
					this.SendPropertyChanged("flag_current");
					this.Onflag_currentChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=8)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=9)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Association(Name="IKCAT_ElementMain_IKCAT_ElementFolder", Storage="_IKCAT_ElementFolders", ThisKey="Id", OtherKey="IdMain")]
		[DataMember(Order=10, EmitDefaultValue=false)]
		public EntitySet<IKCAT_ElementFolder> IKCAT_ElementFolders
		{
			get
			{
				if ((this.serializing 
							&& (this._IKCAT_ElementFolders.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKCAT_ElementFolders;
			}
			set
			{
				this._IKCAT_ElementFolders.Assign(value);
			}
		}
		
		[Association(Name="IKCAT_ElementMain_IKCAT_ElementVariant", Storage="_IKCAT_ElementVariants", ThisKey="Id", OtherKey="IdMain")]
		[DataMember(Order=11, EmitDefaultValue=false)]
		public EntitySet<IKCAT_ElementVariant> IKCAT_ElementVariants
		{
			get
			{
				if ((this.serializing 
							&& (this._IKCAT_ElementVariants.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKCAT_ElementVariants;
			}
			set
			{
				this._IKCAT_ElementVariants.Assign(value);
			}
		}
		
		[Association(Name="IKCAT_ElementMain_IKCAT_ElementAttribute", Storage="_IKCAT_ElementAttributes", ThisKey="Id", OtherKey="IdMain")]
		[DataMember(Order=12, EmitDefaultValue=false)]
		public EntitySet<IKCAT_ElementAttribute> IKCAT_ElementAttributes
		{
			get
			{
				if ((this.serializing 
							&& (this._IKCAT_ElementAttributes.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKCAT_ElementAttributes;
			}
			set
			{
				this._IKCAT_ElementAttributes.Assign(value);
			}
		}
		
		[Association(Name="IKGD_RNODE_IKCAT_ElementMain", Storage="_IKGD_RNODE", ThisKey="rNode", OtherKey="code", IsForeignKey=true)]
		public IKGD_RNODE IKGD_RNODE
		{
			get
			{
				return this._IKGD_RNODE.Entity;
			}
			set
			{
				IKGD_RNODE previousValue = this._IKGD_RNODE.Entity;
				if (((previousValue != value) 
							|| (this._IKGD_RNODE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKGD_RNODE.Entity = null;
						previousValue.IKCAT_ElementMains.Remove(this);
					}
					this._IKGD_RNODE.Entity = value;
					if ((value != null))
					{
						value.IKCAT_ElementMains.Add(this);
						this._rNode = value.code;
					}
					else
					{
						this._rNode = default(int);
					}
					this.SendPropertyChanged("IKGD_RNODE");
				}
			}
		}
		
		[Association(Name="IKGD_RNODE_IKCAT_ElementMain1", Storage="_IKGD_RNODE_Folder", ThisKey="rNodeFolder", OtherKey="code", IsForeignKey=true)]
		[DataMember(Order=13, EmitDefaultValue=false)]
		public IKGD_RNODE IKGD_RNODE_Folder
		{
			get
			{
				if ((this.serializing 
							&& (this._IKGD_RNODE_Folder.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._IKGD_RNODE_Folder.Entity;
			}
			set
			{
				if ((this._IKGD_RNODE_Folder.Entity != value))
				{
					this.SendPropertyChanging();
					this._IKGD_RNODE_Folder.Entity = value;
					this.SendPropertyChanged("IKGD_RNODE_Folder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IKCAT_ElementFolders(IKCAT_ElementFolder entity)
		{
			this.SendPropertyChanging();
			entity.IKCAT_ElementMain = this;
		}
		
		private void detach_IKCAT_ElementFolders(IKCAT_ElementFolder entity)
		{
			this.SendPropertyChanging();
			entity.IKCAT_ElementMain = null;
		}
		
		private void attach_IKCAT_ElementVariants(IKCAT_ElementVariant entity)
		{
			this.SendPropertyChanging();
			entity.IKCAT_ElementMain = this;
		}
		
		private void detach_IKCAT_ElementVariants(IKCAT_ElementVariant entity)
		{
			this.SendPropertyChanging();
			entity.IKCAT_ElementMain = null;
		}
		
		private void attach_IKCAT_ElementAttributes(IKCAT_ElementAttribute entity)
		{
			this.SendPropertyChanging();
			entity.IKCAT_ElementMain = this;
		}
		
		private void detach_IKCAT_ElementAttributes(IKCAT_ElementAttribute entity)
		{
			this.SendPropertyChanging();
			entity.IKCAT_ElementMain = null;
		}
		
		private void Initialize()
		{
			this._IKCAT_ElementFolders = new EntitySet<IKCAT_ElementFolder>(new Action<IKCAT_ElementFolder>(this.attach_IKCAT_ElementFolders), new Action<IKCAT_ElementFolder>(this.detach_IKCAT_ElementFolders));
			this._IKCAT_ElementVariants = new EntitySet<IKCAT_ElementVariant>(new Action<IKCAT_ElementVariant>(this.attach_IKCAT_ElementVariants), new Action<IKCAT_ElementVariant>(this.detach_IKCAT_ElementVariants));
			this._IKCAT_ElementAttributes = new EntitySet<IKCAT_ElementAttribute>(new Action<IKCAT_ElementAttribute>(this.attach_IKCAT_ElementAttributes), new Action<IKCAT_ElementAttribute>(this.detach_IKCAT_ElementAttributes));
			this._IKGD_RNODE = default(EntityRef<IKGD_RNODE>);
			this._IKGD_RNODE_Folder = default(EntityRef<IKGD_RNODE>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.IKCAT_ElementVariant")]
	[DataContract()]
	public partial class IKCAT_ElementVariant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdMain;
		
		private string _CodeVariant;
		
		private string _Name;
		
		private string _Text;
		
		private EntitySet<IKCAT_ElementAttribute> _IKCAT_ElementAttributes;
		
		private EntityRef<IKCAT_ElementMain> _IKCAT_ElementMain;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdMainChanging(int value);
    partial void OnIdMainChanged();
    partial void OnCodeVariantChanging(string value);
    partial void OnCodeVariantChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public IKCAT_ElementVariant()
		{
			this.Initialize();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdMain", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int IdMain
		{
			get
			{
				return this._IdMain;
			}
			set
			{
				if ((this._IdMain != value))
				{
					if (this._IKCAT_ElementMain.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdMainChanging(value);
					this.SendPropertyChanging();
					this._IdMain = value;
					this.SendPropertyChanged("IdMain");
					this.OnIdMainChanged();
				}
			}
		}
		
		[Column(Storage="_CodeVariant", DbType="NVarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public string CodeVariant
		{
			get
			{
				return this._CodeVariant;
			}
			set
			{
				if ((this._CodeVariant != value))
				{
					this.OnCodeVariantChanging(value);
					this.SendPropertyChanging();
					this._CodeVariant = value;
					this.SendPropertyChanged("CodeVariant");
					this.OnCodeVariantChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Association(Name="IKCAT_ElementVariant_IKCAT_ElementAttribute", Storage="_IKCAT_ElementAttributes", ThisKey="Id", OtherKey="IdVariant")]
		[DataMember(Order=6, EmitDefaultValue=false)]
		public EntitySet<IKCAT_ElementAttribute> IKCAT_ElementAttributes
		{
			get
			{
				if ((this.serializing 
							&& (this._IKCAT_ElementAttributes.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKCAT_ElementAttributes;
			}
			set
			{
				this._IKCAT_ElementAttributes.Assign(value);
			}
		}
		
		[Association(Name="IKCAT_ElementMain_IKCAT_ElementVariant", Storage="_IKCAT_ElementMain", ThisKey="IdMain", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public IKCAT_ElementMain IKCAT_ElementMain
		{
			get
			{
				return this._IKCAT_ElementMain.Entity;
			}
			set
			{
				IKCAT_ElementMain previousValue = this._IKCAT_ElementMain.Entity;
				if (((previousValue != value) 
							|| (this._IKCAT_ElementMain.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKCAT_ElementMain.Entity = null;
						previousValue.IKCAT_ElementVariants.Remove(this);
					}
					this._IKCAT_ElementMain.Entity = value;
					if ((value != null))
					{
						value.IKCAT_ElementVariants.Add(this);
						this._IdMain = value.Id;
					}
					else
					{
						this._IdMain = default(int);
					}
					this.SendPropertyChanged("IKCAT_ElementMain");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IKCAT_ElementAttributes(IKCAT_ElementAttribute entity)
		{
			this.SendPropertyChanging();
			entity.IKCAT_ElementVariant = this;
		}
		
		private void detach_IKCAT_ElementAttributes(IKCAT_ElementAttribute entity)
		{
			this.SendPropertyChanging();
			entity.IKCAT_ElementVariant = null;
		}
		
		private void Initialize()
		{
			this._IKCAT_ElementAttributes = new EntitySet<IKCAT_ElementAttribute>(new Action<IKCAT_ElementAttribute>(this.attach_IKCAT_ElementAttributes), new Action<IKCAT_ElementAttribute>(this.detach_IKCAT_ElementAttributes));
			this._IKCAT_ElementMain = default(EntityRef<IKCAT_ElementMain>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.IKCAT_ElementAttribute")]
	[DataContract()]
	public partial class IKCAT_ElementAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _AttributeId;
		
		private int _IdMain;
		
		private System.Nullable<int> _IdVariant;
		
		private int _RankLevel;
		
		private System.Nullable<int> _Value_Int;
		
		private string _Value_String;
		
		private System.Nullable<double> _Value_Double;
		
		private EntityRef<IKCAT_Attribute> _IKCAT_Attribute;
		
		private EntityRef<IKCAT_ElementMain> _IKCAT_ElementMain;
		
		private EntityRef<IKCAT_ElementVariant> _IKCAT_ElementVariant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAttributeIdChanging(int value);
    partial void OnAttributeIdChanged();
    partial void OnIdMainChanging(int value);
    partial void OnIdMainChanged();
    partial void OnIdVariantChanging(System.Nullable<int> value);
    partial void OnIdVariantChanged();
    partial void OnRankLevelChanging(int value);
    partial void OnRankLevelChanged();
    partial void OnValue_IntChanging(System.Nullable<int> value);
    partial void OnValue_IntChanged();
    partial void OnValue_StringChanging(string value);
    partial void OnValue_StringChanged();
    partial void OnValue_DoubleChanging(System.Nullable<double> value);
    partial void OnValue_DoubleChanged();
    #endregion
		
		public IKCAT_ElementAttribute()
		{
			this.Initialize();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_AttributeId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int AttributeId
		{
			get
			{
				return this._AttributeId;
			}
			set
			{
				if ((this._AttributeId != value))
				{
					if (this._IKCAT_Attribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttributeIdChanging(value);
					this.SendPropertyChanging();
					this._AttributeId = value;
					this.SendPropertyChanged("AttributeId");
					this.OnAttributeIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdMain", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public int IdMain
		{
			get
			{
				return this._IdMain;
			}
			set
			{
				if ((this._IdMain != value))
				{
					if (this._IKCAT_ElementMain.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdMainChanging(value);
					this.SendPropertyChanging();
					this._IdMain = value;
					this.SendPropertyChanged("IdMain");
					this.OnIdMainChanged();
				}
			}
		}
		
		[Column(Storage="_IdVariant", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public System.Nullable<int> IdVariant
		{
			get
			{
				return this._IdVariant;
			}
			set
			{
				if ((this._IdVariant != value))
				{
					if (this._IKCAT_ElementVariant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdVariantChanging(value);
					this.SendPropertyChanging();
					this._IdVariant = value;
					this.SendPropertyChanged("IdVariant");
					this.OnIdVariantChanged();
				}
			}
		}
		
		[Column(Storage="_RankLevel", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public int RankLevel
		{
			get
			{
				return this._RankLevel;
			}
			set
			{
				if ((this._RankLevel != value))
				{
					this.OnRankLevelChanging(value);
					this.SendPropertyChanging();
					this._RankLevel = value;
					this.SendPropertyChanged("RankLevel");
					this.OnRankLevelChanged();
				}
			}
		}
		
		[Column(Storage="_Value_Int", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public System.Nullable<int> Value_Int
		{
			get
			{
				return this._Value_Int;
			}
			set
			{
				if ((this._Value_Int != value))
				{
					this.OnValue_IntChanging(value);
					this.SendPropertyChanging();
					this._Value_Int = value;
					this.SendPropertyChanged("Value_Int");
					this.OnValue_IntChanged();
				}
			}
		}
		
		[Column(Storage="_Value_String", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=7)]
		public string Value_String
		{
			get
			{
				return this._Value_String;
			}
			set
			{
				if ((this._Value_String != value))
				{
					this.OnValue_StringChanging(value);
					this.SendPropertyChanging();
					this._Value_String = value;
					this.SendPropertyChanged("Value_String");
					this.OnValue_StringChanged();
				}
			}
		}
		
		[Column(Storage="_Value_Double", DbType="Float", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=8)]
		public System.Nullable<double> Value_Double
		{
			get
			{
				return this._Value_Double;
			}
			set
			{
				if ((this._Value_Double != value))
				{
					this.OnValue_DoubleChanging(value);
					this.SendPropertyChanging();
					this._Value_Double = value;
					this.SendPropertyChanged("Value_Double");
					this.OnValue_DoubleChanged();
				}
			}
		}
		
		[Association(Name="IKCAT_Attribute_IKCAT_ElementAttribute", Storage="_IKCAT_Attribute", ThisKey="AttributeId", OtherKey="AttributeId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public IKCAT_Attribute IKCAT_Attribute
		{
			get
			{
				return this._IKCAT_Attribute.Entity;
			}
			set
			{
				IKCAT_Attribute previousValue = this._IKCAT_Attribute.Entity;
				if (((previousValue != value) 
							|| (this._IKCAT_Attribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKCAT_Attribute.Entity = null;
						previousValue.IKCAT_ElementAttributes.Remove(this);
					}
					this._IKCAT_Attribute.Entity = value;
					if ((value != null))
					{
						value.IKCAT_ElementAttributes.Add(this);
						this._AttributeId = value.AttributeId;
					}
					else
					{
						this._AttributeId = default(int);
					}
					this.SendPropertyChanged("IKCAT_Attribute");
				}
			}
		}
		
		[Association(Name="IKCAT_ElementMain_IKCAT_ElementAttribute", Storage="_IKCAT_ElementMain", ThisKey="IdMain", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public IKCAT_ElementMain IKCAT_ElementMain
		{
			get
			{
				return this._IKCAT_ElementMain.Entity;
			}
			set
			{
				IKCAT_ElementMain previousValue = this._IKCAT_ElementMain.Entity;
				if (((previousValue != value) 
							|| (this._IKCAT_ElementMain.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKCAT_ElementMain.Entity = null;
						previousValue.IKCAT_ElementAttributes.Remove(this);
					}
					this._IKCAT_ElementMain.Entity = value;
					if ((value != null))
					{
						value.IKCAT_ElementAttributes.Add(this);
						this._IdMain = value.Id;
					}
					else
					{
						this._IdMain = default(int);
					}
					this.SendPropertyChanged("IKCAT_ElementMain");
				}
			}
		}
		
		[Association(Name="IKCAT_ElementVariant_IKCAT_ElementAttribute", Storage="_IKCAT_ElementVariant", ThisKey="IdVariant", OtherKey="Id", IsForeignKey=true)]
		public IKCAT_ElementVariant IKCAT_ElementVariant
		{
			get
			{
				return this._IKCAT_ElementVariant.Entity;
			}
			set
			{
				IKCAT_ElementVariant previousValue = this._IKCAT_ElementVariant.Entity;
				if (((previousValue != value) 
							|| (this._IKCAT_ElementVariant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKCAT_ElementVariant.Entity = null;
						previousValue.IKCAT_ElementAttributes.Remove(this);
					}
					this._IKCAT_ElementVariant.Entity = value;
					if ((value != null))
					{
						value.IKCAT_ElementAttributes.Add(this);
						this._IdVariant = value.Id;
					}
					else
					{
						this._IdVariant = default(Nullable<int>);
					}
					this.SendPropertyChanged("IKCAT_ElementVariant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._IKCAT_Attribute = default(EntityRef<IKCAT_Attribute>);
			this._IKCAT_ElementMain = default(EntityRef<IKCAT_ElementMain>);
			this._IKCAT_ElementVariant = default(EntityRef<IKCAT_ElementVariant>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.IKG_LOGGER")]
	[DataContract()]
	public partial class IKG_LOGGER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.DateTime _ts;
		
		private string _username;
		
		private System.Nullable<int> _sessionHash;
		
		private int _action;
		
		private string _data;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntsChanging(System.DateTime value);
    partial void OntsChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnsessionHashChanging(System.Nullable<int> value);
    partial void OnsessionHashChanged();
    partial void OnactionChanging(int value);
    partial void OnactionChanged();
    partial void OndataChanging(string value);
    partial void OndataChanged();
    #endregion
		
		public IKG_LOGGER()
		{
			this.Initialize();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_ts", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public System.DateTime ts
		{
			get
			{
				return this._ts;
			}
			set
			{
				if ((this._ts != value))
				{
					this.OntsChanging(value);
					this.SendPropertyChanging();
					this._ts = value;
					this.SendPropertyChanged("ts");
					this.OntsChanged();
				}
			}
		}
		
		[Column(Storage="_username", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[Column(Storage="_sessionHash", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public System.Nullable<int> sessionHash
		{
			get
			{
				return this._sessionHash;
			}
			set
			{
				if ((this._sessionHash != value))
				{
					this.OnsessionHashChanging(value);
					this.SendPropertyChanging();
					this._sessionHash = value;
					this.SendPropertyChanged("sessionHash");
					this.OnsessionHashChanged();
				}
			}
		}
		
		[Column(Storage="_action", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public int action
		{
			get
			{
				return this._action;
			}
			set
			{
				if ((this._action != value))
				{
					this.OnactionChanging(value);
					this.SendPropertyChanging();
					this._action = value;
					this.SendPropertyChanged("action");
					this.OnactionChanged();
				}
			}
		}
		
		[Column(Storage="_data", DbType="NVarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public string data
		{
			get
			{
				return this._data;
			}
			set
			{
				if ((this._data != value))
				{
					this.OndataChanging(value);
					this.SendPropertyChanging();
					this._data = value;
					this.SendPropertyChanged("data");
					this.OndataChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.IKG_HITLOG")]
	[DataContract()]
	public partial class IKG_HITLOG : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _wID;
		
		private int _resID;
		
		private System.Nullable<int> _sessionHash;
		
		private System.DateTime _ts;
		
		private System.Nullable<int> _action;
		
		private System.Nullable<int> _code;
		
		private EntityRef<IKGD_RNODE> _IKGD_RNODE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnwIDChanging(int value);
    partial void OnwIDChanged();
    partial void OnresIDChanging(int value);
    partial void OnresIDChanged();
    partial void OnsessionHashChanging(System.Nullable<int> value);
    partial void OnsessionHashChanged();
    partial void OntsChanging(System.DateTime value);
    partial void OntsChanged();
    partial void OnactionChanging(System.Nullable<int> value);
    partial void OnactionChanged();
    partial void OncodeChanging(System.Nullable<int> value);
    partial void OncodeChanged();
    #endregion
		
		public IKG_HITLOG()
		{
			this.Initialize();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_wID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int wID
		{
			get
			{
				return this._wID;
			}
			set
			{
				if ((this._wID != value))
				{
					this.OnwIDChanging(value);
					this.SendPropertyChanging();
					this._wID = value;
					this.SendPropertyChanged("wID");
					this.OnwIDChanged();
				}
			}
		}
		
		[Column(Storage="_resID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public int resID
		{
			get
			{
				return this._resID;
			}
			set
			{
				if ((this._resID != value))
				{
					if (this._IKGD_RNODE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnresIDChanging(value);
					this.SendPropertyChanging();
					this._resID = value;
					this.SendPropertyChanged("resID");
					this.OnresIDChanged();
				}
			}
		}
		
		[Column(Storage="_sessionHash", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public System.Nullable<int> sessionHash
		{
			get
			{
				return this._sessionHash;
			}
			set
			{
				if ((this._sessionHash != value))
				{
					this.OnsessionHashChanging(value);
					this.SendPropertyChanging();
					this._sessionHash = value;
					this.SendPropertyChanged("sessionHash");
					this.OnsessionHashChanged();
				}
			}
		}
		
		[Column(Storage="_ts", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public System.DateTime ts
		{
			get
			{
				return this._ts;
			}
			set
			{
				if ((this._ts != value))
				{
					this.OntsChanging(value);
					this.SendPropertyChanging();
					this._ts = value;
					this.SendPropertyChanged("ts");
					this.OntsChanged();
				}
			}
		}
		
		[Column(Storage="_action", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public System.Nullable<int> action
		{
			get
			{
				return this._action;
			}
			set
			{
				if ((this._action != value))
				{
					this.OnactionChanging(value);
					this.SendPropertyChanging();
					this._action = value;
					this.SendPropertyChanged("action");
					this.OnactionChanged();
				}
			}
		}
		
		[Column(Storage="_code", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=7)]
		public System.Nullable<int> code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[Association(Name="IKGD_RNODE_IKG_HITLOG", Storage="_IKGD_RNODE", ThisKey="resID", OtherKey="code", IsForeignKey=true)]
		public IKGD_RNODE IKGD_RNODE
		{
			get
			{
				return this._IKGD_RNODE.Entity;
			}
			set
			{
				IKGD_RNODE previousValue = this._IKGD_RNODE.Entity;
				if (((previousValue != value) 
							|| (this._IKGD_RNODE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKGD_RNODE.Entity = null;
						previousValue.IKG_HITLOGs.Remove(this);
					}
					this._IKGD_RNODE.Entity = value;
					if ((value != null))
					{
						value.IKG_HITLOGs.Add(this);
						this._resID = value.code;
					}
					else
					{
						this._resID = default(int);
					}
					this.SendPropertyChanged("IKGD_RNODE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._IKGD_RNODE = default(EntityRef<IKGD_RNODE>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.IKG_HITACC")]
	[DataContract()]
	public partial class IKG_HITACC : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _rNode;
		
		private int _Category;
		
		private System.Nullable<int> _Hits;
		
		private System.Nullable<double> _Value;
		
		private System.DateTime _LastUpdate;
		
		private EntityRef<IKGD_RNODE> _IKGD_RNODE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnrNodeChanging(int value);
    partial void OnrNodeChanged();
    partial void OnCategoryChanging(int value);
    partial void OnCategoryChanged();
    partial void OnHitsChanging(System.Nullable<int> value);
    partial void OnHitsChanged();
    partial void OnValueChanging(System.Nullable<double> value);
    partial void OnValueChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public IKG_HITACC()
		{
			this.Initialize();
		}
		
		[Column(Storage="_rNode", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int rNode
		{
			get
			{
				return this._rNode;
			}
			set
			{
				if ((this._rNode != value))
				{
					if (this._IKGD_RNODE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrNodeChanging(value);
					this.SendPropertyChanging();
					this._rNode = value;
					this.SendPropertyChanged("rNode");
					this.OnrNodeChanged();
				}
			}
		}
		
		[Column(Storage="_Category", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_Hits", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public System.Nullable<int> Hits
		{
			get
			{
				return this._Hits;
			}
			set
			{
				if ((this._Hits != value))
				{
					this.OnHitsChanging(value);
					this.SendPropertyChanging();
					this._Hits = value;
					this.SendPropertyChanged("Hits");
					this.OnHitsChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="Float", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public System.Nullable<double> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public System.DateTime LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="IKGD_RNODE_IKG_HITACC", Storage="_IKGD_RNODE", ThisKey="rNode", OtherKey="code", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public IKGD_RNODE IKGD_RNODE
		{
			get
			{
				return this._IKGD_RNODE.Entity;
			}
			set
			{
				IKGD_RNODE previousValue = this._IKGD_RNODE.Entity;
				if (((previousValue != value) 
							|| (this._IKGD_RNODE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKGD_RNODE.Entity = null;
						previousValue.IKG_HITACCs.Remove(this);
					}
					this._IKGD_RNODE.Entity = value;
					if ((value != null))
					{
						value.IKG_HITACCs.Add(this);
						this._rNode = value.code;
					}
					else
					{
						this._rNode = default(int);
					}
					this.SendPropertyChanged("IKGD_RNODE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._IKGD_RNODE = default(EntityRef<IKGD_RNODE>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.IKG_HITLOG_ARCHIVE")]
	[DataContract()]
	public partial class IKG_HITLOG_ARCHIVE
	{
		
		private int _id;
		
		private int _wID;
		
		private int _resID;
		
		private System.Nullable<int> _sessionHash;
		
		private System.DateTime _ts;
		
		private System.Nullable<int> _action;
		
		private System.Nullable<int> _code;
		
		public IKG_HITLOG_ARCHIVE()
		{
		}
		
		[Column(Storage="_id", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[Column(Storage="_wID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int wID
		{
			get
			{
				return this._wID;
			}
			set
			{
				if ((this._wID != value))
				{
					this._wID = value;
				}
			}
		}
		
		[Column(Storage="_resID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public int resID
		{
			get
			{
				return this._resID;
			}
			set
			{
				if ((this._resID != value))
				{
					this._resID = value;
				}
			}
		}
		
		[Column(Storage="_sessionHash", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public System.Nullable<int> sessionHash
		{
			get
			{
				return this._sessionHash;
			}
			set
			{
				if ((this._sessionHash != value))
				{
					this._sessionHash = value;
				}
			}
		}
		
		[Column(Storage="_ts", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public System.DateTime ts
		{
			get
			{
				return this._ts;
			}
			set
			{
				if ((this._ts != value))
				{
					this._ts = value;
				}
			}
		}
		
		[Column(Storage="_action", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public System.Nullable<int> action
		{
			get
			{
				return this._action;
			}
			set
			{
				if ((this._action != value))
				{
					this._action = value;
				}
			}
		}
		
		[Column(Storage="_code", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=7)]
		public System.Nullable<int> code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this._code = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.IKGD_QueueMeta")]
	[DataContract()]
	public partial class IKGD_QueueMeta : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QueueID;
		
		private System.DateTime _QueueDateTime;
		
		private System.Nullable<System.DateTime> _ProcessingDateTime;
		
		private int _Type;
		
		private string _Title;
		
		private int _Status;
		
		private string _Application;
		
		private System.Nullable<int> _ApplicationInstanceHash;
		
		private EntityRef<IKGD_QueueData> _IKGD_QueueData;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQueueIDChanging(int value);
    partial void OnQueueIDChanged();
    partial void OnQueueDateTimeChanging(System.DateTime value);
    partial void OnQueueDateTimeChanged();
    partial void OnProcessingDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnProcessingDateTimeChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnApplicationChanging(string value);
    partial void OnApplicationChanged();
    partial void OnApplicationInstanceHashChanging(System.Nullable<int> value);
    partial void OnApplicationInstanceHashChanged();
    #endregion
		
		public IKGD_QueueMeta()
		{
			this.Initialize();
		}
		
		[Column(Storage="_QueueID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int QueueID
		{
			get
			{
				return this._QueueID;
			}
			set
			{
				if ((this._QueueID != value))
				{
					this.OnQueueIDChanging(value);
					this.SendPropertyChanging();
					this._QueueID = value;
					this.SendPropertyChanged("QueueID");
					this.OnQueueIDChanged();
				}
			}
		}
		
		[Column(Storage="_QueueDateTime", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public System.DateTime QueueDateTime
		{
			get
			{
				return this._QueueDateTime;
			}
			set
			{
				if ((this._QueueDateTime != value))
				{
					this.OnQueueDateTimeChanging(value);
					this.SendPropertyChanging();
					this._QueueDateTime = value;
					this.SendPropertyChanged("QueueDateTime");
					this.OnQueueDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_ProcessingDateTime", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public System.Nullable<System.DateTime> ProcessingDateTime
		{
			get
			{
				return this._ProcessingDateTime;
			}
			set
			{
				if ((this._ProcessingDateTime != value))
				{
					this.OnProcessingDateTimeChanging(value);
					this.SendPropertyChanging();
					this._ProcessingDateTime = value;
					this.SendPropertyChanged("ProcessingDateTime");
					this.OnProcessingDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_Application", DbType="VarChar(256) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=7)]
		public string Application
		{
			get
			{
				return this._Application;
			}
			set
			{
				if ((this._Application != value))
				{
					this.OnApplicationChanging(value);
					this.SendPropertyChanging();
					this._Application = value;
					this.SendPropertyChanged("Application");
					this.OnApplicationChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicationInstanceHash", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=8)]
		public System.Nullable<int> ApplicationInstanceHash
		{
			get
			{
				return this._ApplicationInstanceHash;
			}
			set
			{
				if ((this._ApplicationInstanceHash != value))
				{
					this.OnApplicationInstanceHashChanging(value);
					this.SendPropertyChanging();
					this._ApplicationInstanceHash = value;
					this.SendPropertyChanged("ApplicationInstanceHash");
					this.OnApplicationInstanceHashChanged();
				}
			}
		}
		
		[Association(Name="IKGD_QueueMeta_IKGD_QueueData", Storage="_IKGD_QueueData", ThisKey="QueueID", OtherKey="QueueID", IsUnique=true, IsForeignKey=false)]
		[DataMember(Order=9, EmitDefaultValue=false)]
		public IKGD_QueueData IKGD_QueueData
		{
			get
			{
				if ((this.serializing 
							&& (this._IKGD_QueueData.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._IKGD_QueueData.Entity;
			}
			set
			{
				IKGD_QueueData previousValue = this._IKGD_QueueData.Entity;
				if (((previousValue != value) 
							|| (this._IKGD_QueueData.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKGD_QueueData.Entity = null;
						previousValue.IKGD_QueueMeta = null;
					}
					this._IKGD_QueueData.Entity = value;
					if ((value != null))
					{
						value.IKGD_QueueMeta = this;
					}
					this.SendPropertyChanged("IKGD_QueueData");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._IKGD_QueueData = default(EntityRef<IKGD_QueueData>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.IKGD_QueueData")]
	[DataContract()]
	public partial class IKGD_QueueData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QueueID;
		
		private string _Data;
		
		private string _Log;
		
		private EntityRef<IKGD_QueueMeta> _IKGD_QueueMeta;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQueueIDChanging(int value);
    partial void OnQueueIDChanged();
    partial void OnDataChanging(string value);
    partial void OnDataChanged();
    partial void OnLogChanging(string value);
    partial void OnLogChanged();
    #endregion
		
		public IKGD_QueueData()
		{
			this.Initialize();
		}
		
		[Column(Storage="_QueueID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int QueueID
		{
			get
			{
				return this._QueueID;
			}
			set
			{
				if ((this._QueueID != value))
				{
					if (this._IKGD_QueueMeta.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQueueIDChanging(value);
					this.SendPropertyChanging();
					this._QueueID = value;
					this.SendPropertyChanged("QueueID");
					this.OnQueueIDChanged();
				}
			}
		}
		
		[Column(Storage="_Data", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public string Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[Column(Name="[Log]", Storage="_Log", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public string Log
		{
			get
			{
				return this._Log;
			}
			set
			{
				if ((this._Log != value))
				{
					this.OnLogChanging(value);
					this.SendPropertyChanging();
					this._Log = value;
					this.SendPropertyChanged("Log");
					this.OnLogChanged();
				}
			}
		}
		
		[Association(Name="IKGD_QueueMeta_IKGD_QueueData", Storage="_IKGD_QueueMeta", ThisKey="QueueID", OtherKey="QueueID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public IKGD_QueueMeta IKGD_QueueMeta
		{
			get
			{
				return this._IKGD_QueueMeta.Entity;
			}
			set
			{
				IKGD_QueueMeta previousValue = this._IKGD_QueueMeta.Entity;
				if (((previousValue != value) 
							|| (this._IKGD_QueueMeta.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKGD_QueueMeta.Entity = null;
						previousValue.IKGD_QueueData = null;
					}
					this._IKGD_QueueMeta.Entity = value;
					if ((value != null))
					{
						value.IKGD_QueueData = this;
						this._QueueID = value.QueueID;
					}
					else
					{
						this._QueueID = default(int);
					}
					this.SendPropertyChanged("IKGD_QueueMeta");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._IKGD_QueueMeta = default(EntityRef<IKGD_QueueMeta>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.IKGD_VDATA_KEYVALUE")]
	[DataContract()]
	public partial class IKGD_VDATA_KEYVALUE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _rNode;
		
		private int _vDataVersion;
		
		private bool _flag_published;
		
		private bool _flag_current;
		
		private int _Level;
		
		private string _Key;
		
		private string _KeyParent;
		
		private System.DateTime _modif;
		
		private System.Nullable<int> _ValueInt;
		
		private System.Nullable<double> _ValueDouble;
		
		private System.Nullable<System.DateTime> _ValueDate;
		
		private System.Nullable<System.DateTime> _ValueDateExt;
		
		private string _ValueString;
		
		private string _ValueText;
		
		private EntityRef<IKGD_RNODE> _IKGD_RNODE;
		
		private EntityRef<IKGD_VDATA> _IKGD_VDATA;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnrNodeChanging(int value);
    partial void OnrNodeChanged();
    partial void OnvDataVersionChanging(int value);
    partial void OnvDataVersionChanged();
    partial void Onflag_publishedChanging(bool value);
    partial void Onflag_publishedChanged();
    partial void Onflag_currentChanging(bool value);
    partial void Onflag_currentChanged();
    partial void OnLevelChanging(int value);
    partial void OnLevelChanged();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnKeyParentChanging(string value);
    partial void OnKeyParentChanged();
    partial void OnmodifChanging(System.DateTime value);
    partial void OnmodifChanged();
    partial void OnValueIntChanging(System.Nullable<int> value);
    partial void OnValueIntChanged();
    partial void OnValueDoubleChanging(System.Nullable<double> value);
    partial void OnValueDoubleChanged();
    partial void OnValueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnValueDateChanged();
    partial void OnValueDateExtChanging(System.Nullable<System.DateTime> value);
    partial void OnValueDateExtChanged();
    partial void OnValueStringChanging(string value);
    partial void OnValueStringChanged();
    partial void OnValueTextChanging(string value);
    partial void OnValueTextChanged();
    #endregion
		
		public IKGD_VDATA_KEYVALUE()
		{
			this.Initialize();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_rNode", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int rNode
		{
			get
			{
				return this._rNode;
			}
			set
			{
				if ((this._rNode != value))
				{
					if (this._IKGD_RNODE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrNodeChanging(value);
					this.SendPropertyChanging();
					this._rNode = value;
					this.SendPropertyChanged("rNode");
					this.OnrNodeChanged();
				}
			}
		}
		
		[Column(Storage="_vDataVersion", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public int vDataVersion
		{
			get
			{
				return this._vDataVersion;
			}
			set
			{
				if ((this._vDataVersion != value))
				{
					if (this._IKGD_VDATA.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnvDataVersionChanging(value);
					this.SendPropertyChanging();
					this._vDataVersion = value;
					this.SendPropertyChanged("vDataVersion");
					this.OnvDataVersionChanged();
				}
			}
		}
		
		[Column(Storage="_flag_published", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public bool flag_published
		{
			get
			{
				return this._flag_published;
			}
			set
			{
				if ((this._flag_published != value))
				{
					this.Onflag_publishedChanging(value);
					this.SendPropertyChanging();
					this._flag_published = value;
					this.SendPropertyChanged("flag_published");
					this.Onflag_publishedChanged();
				}
			}
		}
		
		[Column(Storage="_flag_current", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public bool flag_current
		{
			get
			{
				return this._flag_current;
			}
			set
			{
				if ((this._flag_current != value))
				{
					this.Onflag_currentChanging(value);
					this.SendPropertyChanging();
					this._flag_current = value;
					this.SendPropertyChanged("flag_current");
					this.Onflag_currentChanged();
				}
			}
		}
		
		[Column(Name="[Level]", Storage="_Level", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public int Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[Column(Name="[Key]", Storage="_Key", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=7)]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[Column(Storage="_KeyParent", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=8)]
		public string KeyParent
		{
			get
			{
				return this._KeyParent;
			}
			set
			{
				if ((this._KeyParent != value))
				{
					this.OnKeyParentChanging(value);
					this.SendPropertyChanging();
					this._KeyParent = value;
					this.SendPropertyChanged("KeyParent");
					this.OnKeyParentChanged();
				}
			}
		}
		
		[Column(Storage="_modif", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=9)]
		public System.DateTime modif
		{
			get
			{
				return this._modif;
			}
			set
			{
				if ((this._modif != value))
				{
					this.OnmodifChanging(value);
					this.SendPropertyChanging();
					this._modif = value;
					this.SendPropertyChanged("modif");
					this.OnmodifChanged();
				}
			}
		}
		
		[Column(Storage="_ValueInt", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=10)]
		public System.Nullable<int> ValueInt
		{
			get
			{
				return this._ValueInt;
			}
			set
			{
				if ((this._ValueInt != value))
				{
					this.OnValueIntChanging(value);
					this.SendPropertyChanging();
					this._ValueInt = value;
					this.SendPropertyChanged("ValueInt");
					this.OnValueIntChanged();
				}
			}
		}
		
		[Column(Storage="_ValueDouble", DbType="Float", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=11)]
		public System.Nullable<double> ValueDouble
		{
			get
			{
				return this._ValueDouble;
			}
			set
			{
				if ((this._ValueDouble != value))
				{
					this.OnValueDoubleChanging(value);
					this.SendPropertyChanging();
					this._ValueDouble = value;
					this.SendPropertyChanged("ValueDouble");
					this.OnValueDoubleChanged();
				}
			}
		}
		
		[Column(Storage="_ValueDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=12)]
		public System.Nullable<System.DateTime> ValueDate
		{
			get
			{
				return this._ValueDate;
			}
			set
			{
				if ((this._ValueDate != value))
				{
					this.OnValueDateChanging(value);
					this.SendPropertyChanging();
					this._ValueDate = value;
					this.SendPropertyChanged("ValueDate");
					this.OnValueDateChanged();
				}
			}
		}
		
		[Column(Storage="_ValueDateExt", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=13)]
		public System.Nullable<System.DateTime> ValueDateExt
		{
			get
			{
				return this._ValueDateExt;
			}
			set
			{
				if ((this._ValueDateExt != value))
				{
					this.OnValueDateExtChanging(value);
					this.SendPropertyChanging();
					this._ValueDateExt = value;
					this.SendPropertyChanged("ValueDateExt");
					this.OnValueDateExtChanged();
				}
			}
		}
		
		[Column(Storage="_ValueString", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=14)]
		public string ValueString
		{
			get
			{
				return this._ValueString;
			}
			set
			{
				if ((this._ValueString != value))
				{
					this.OnValueStringChanging(value);
					this.SendPropertyChanging();
					this._ValueString = value;
					this.SendPropertyChanged("ValueString");
					this.OnValueStringChanged();
				}
			}
		}
		
		[Column(Storage="_ValueText", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=15)]
		public string ValueText
		{
			get
			{
				return this._ValueText;
			}
			set
			{
				if ((this._ValueText != value))
				{
					this.OnValueTextChanging(value);
					this.SendPropertyChanging();
					this._ValueText = value;
					this.SendPropertyChanged("ValueText");
					this.OnValueTextChanged();
				}
			}
		}
		
		[Association(Name="IKGD_RNODE_IKGD_VDATA_KEYVALUE", Storage="_IKGD_RNODE", ThisKey="rNode", OtherKey="code", IsForeignKey=true)]
		public IKGD_RNODE IKGD_RNODE
		{
			get
			{
				return this._IKGD_RNODE.Entity;
			}
			set
			{
				IKGD_RNODE previousValue = this._IKGD_RNODE.Entity;
				if (((previousValue != value) 
							|| (this._IKGD_RNODE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKGD_RNODE.Entity = null;
						previousValue.IKGD_VDATA_KEYVALUEs.Remove(this);
					}
					this._IKGD_RNODE.Entity = value;
					if ((value != null))
					{
						value.IKGD_VDATA_KEYVALUEs.Add(this);
						this._rNode = value.code;
					}
					else
					{
						this._rNode = default(int);
					}
					this.SendPropertyChanged("IKGD_RNODE");
				}
			}
		}
		
		[Association(Name="IKGD_VDATA_IKGD_VDATA_KEYVALUE", Storage="_IKGD_VDATA", ThisKey="vDataVersion", OtherKey="version", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public IKGD_VDATA IKGD_VDATA
		{
			get
			{
				return this._IKGD_VDATA.Entity;
			}
			set
			{
				IKGD_VDATA previousValue = this._IKGD_VDATA.Entity;
				if (((previousValue != value) 
							|| (this._IKGD_VDATA.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKGD_VDATA.Entity = null;
						previousValue.IKGD_VDATA_KEYVALUEs.Remove(this);
					}
					this._IKGD_VDATA.Entity = value;
					if ((value != null))
					{
						value.IKGD_VDATA_KEYVALUEs.Add(this);
						this._vDataVersion = value.version;
					}
					else
					{
						this._vDataVersion = default(int);
					}
					this.SendPropertyChanged("IKGD_VDATA");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._IKGD_RNODE = default(EntityRef<IKGD_RNODE>);
			this._IKGD_VDATA = default(EntityRef<IKGD_VDATA>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.SSO_KEYVALUE")]
	[DataContract()]
	public partial class SSO_KEYVALUE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Guid _UserId;
		
		private string _SubSystem;
		
		private string _Key;
		
		private string _KeyParent;
		
		private System.DateTime _creat;
		
		private System.DateTime _modif;
		
		private int _Type;
		
		private System.Nullable<int> _ValueInt;
		
		private System.Nullable<double> _ValueDouble;
		
		private System.Nullable<System.DateTime> _ValueDate;
		
		private System.Nullable<System.DateTime> _ValueDateExt;
		
		private string _ValueString;
		
		private string _ValueText;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnSubSystemChanging(string value);
    partial void OnSubSystemChanged();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnKeyParentChanging(string value);
    partial void OnKeyParentChanged();
    partial void OncreatChanging(System.DateTime value);
    partial void OncreatChanged();
    partial void OnmodifChanging(System.DateTime value);
    partial void OnmodifChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnValueIntChanging(System.Nullable<int> value);
    partial void OnValueIntChanged();
    partial void OnValueDoubleChanging(System.Nullable<double> value);
    partial void OnValueDoubleChanged();
    partial void OnValueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnValueDateChanged();
    partial void OnValueDateExtChanging(System.Nullable<System.DateTime> value);
    partial void OnValueDateExtChanged();
    partial void OnValueStringChanging(string value);
    partial void OnValueStringChanged();
    partial void OnValueTextChanging(string value);
    partial void OnValueTextChanged();
    #endregion
		
		public SSO_KEYVALUE()
		{
			this.Initialize();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_SubSystem", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public string SubSystem
		{
			get
			{
				return this._SubSystem;
			}
			set
			{
				if ((this._SubSystem != value))
				{
					this.OnSubSystemChanging(value);
					this.SendPropertyChanging();
					this._SubSystem = value;
					this.SendPropertyChanged("SubSystem");
					this.OnSubSystemChanged();
				}
			}
		}
		
		[Column(Name="[Key]", Storage="_Key", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[Column(Storage="_KeyParent", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public string KeyParent
		{
			get
			{
				return this._KeyParent;
			}
			set
			{
				if ((this._KeyParent != value))
				{
					this.OnKeyParentChanging(value);
					this.SendPropertyChanging();
					this._KeyParent = value;
					this.SendPropertyChanged("KeyParent");
					this.OnKeyParentChanged();
				}
			}
		}
		
		[Column(Storage="_creat", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public System.DateTime creat
		{
			get
			{
				return this._creat;
			}
			set
			{
				if ((this._creat != value))
				{
					this.OncreatChanging(value);
					this.SendPropertyChanging();
					this._creat = value;
					this.SendPropertyChanged("creat");
					this.OncreatChanged();
				}
			}
		}
		
		[Column(Storage="_modif", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=7)]
		public System.DateTime modif
		{
			get
			{
				return this._modif;
			}
			set
			{
				if ((this._modif != value))
				{
					this.OnmodifChanging(value);
					this.SendPropertyChanging();
					this._modif = value;
					this.SendPropertyChanged("modif");
					this.OnmodifChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=8)]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ValueInt", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=9)]
		public System.Nullable<int> ValueInt
		{
			get
			{
				return this._ValueInt;
			}
			set
			{
				if ((this._ValueInt != value))
				{
					this.OnValueIntChanging(value);
					this.SendPropertyChanging();
					this._ValueInt = value;
					this.SendPropertyChanged("ValueInt");
					this.OnValueIntChanged();
				}
			}
		}
		
		[Column(Storage="_ValueDouble", DbType="Float", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=10)]
		public System.Nullable<double> ValueDouble
		{
			get
			{
				return this._ValueDouble;
			}
			set
			{
				if ((this._ValueDouble != value))
				{
					this.OnValueDoubleChanging(value);
					this.SendPropertyChanging();
					this._ValueDouble = value;
					this.SendPropertyChanged("ValueDouble");
					this.OnValueDoubleChanged();
				}
			}
		}
		
		[Column(Storage="_ValueDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=11)]
		public System.Nullable<System.DateTime> ValueDate
		{
			get
			{
				return this._ValueDate;
			}
			set
			{
				if ((this._ValueDate != value))
				{
					this.OnValueDateChanging(value);
					this.SendPropertyChanging();
					this._ValueDate = value;
					this.SendPropertyChanged("ValueDate");
					this.OnValueDateChanged();
				}
			}
		}
		
		[Column(Storage="_ValueDateExt", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=12)]
		public System.Nullable<System.DateTime> ValueDateExt
		{
			get
			{
				return this._ValueDateExt;
			}
			set
			{
				if ((this._ValueDateExt != value))
				{
					this.OnValueDateExtChanging(value);
					this.SendPropertyChanging();
					this._ValueDateExt = value;
					this.SendPropertyChanged("ValueDateExt");
					this.OnValueDateExtChanged();
				}
			}
		}
		
		[Column(Storage="_ValueString", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=13)]
		public string ValueString
		{
			get
			{
				return this._ValueString;
			}
			set
			{
				if ((this._ValueString != value))
				{
					this.OnValueStringChanging(value);
					this.SendPropertyChanging();
					this._ValueString = value;
					this.SendPropertyChanged("ValueString");
					this.OnValueStringChanged();
				}
			}
		}
		
		[Column(Storage="_ValueText", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=14)]
		public string ValueText
		{
			get
			{
				return this._ValueText;
			}
			set
			{
				if ((this._ValueText != value))
				{
					this.OnValueTextChanging(value);
					this.SendPropertyChanging();
					this._ValueText = value;
					this.SendPropertyChanged("ValueText");
					this.OnValueTextChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.IKATT_Attribute")]
	[DataContract()]
	public partial class IKATT_Attribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Data.Linq.Binary _ts;
		
		private int _AttributeId;
		
		private string _AttributeCode;
		
		private string _AttributeType;
		
		private System.Nullable<int> _ParentAttributeId;
		
		private double _Position;
		
		private bool _FlagActive;
		
		private int _Flags;
		
		private System.Nullable<System.DateTime> _Modif;
		
		private System.Data.Linq.Binary _Data;
		
		private string _Name;
		
		private EntitySet<IKATT_Attribute> _IKATT_Attributes;
		
		private EntitySet<IKATT_AttributeStream> _IKATT_AttributeStreams;
		
		private EntitySet<IKATT_AttributeMapping> _IKATT_AttributeMappings;
		
		private EntityRef<IKATT_Attribute> _IKATT_AttributeParent;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntsChanging(System.Data.Linq.Binary value);
    partial void OntsChanged();
    partial void OnAttributeIdChanging(int value);
    partial void OnAttributeIdChanged();
    partial void OnAttributeCodeChanging(string value);
    partial void OnAttributeCodeChanged();
    partial void OnAttributeTypeChanging(string value);
    partial void OnAttributeTypeChanged();
    partial void OnParentAttributeIdChanging(System.Nullable<int> value);
    partial void OnParentAttributeIdChanged();
    partial void OnPositionChanging(double value);
    partial void OnPositionChanged();
    partial void OnFlagActiveChanging(bool value);
    partial void OnFlagActiveChanged();
    partial void OnFlagsChanging(int value);
    partial void OnFlagsChanged();
    partial void OnModifChanging(System.Nullable<System.DateTime> value);
    partial void OnModifChanged();
    partial void OnDataChanging(System.Data.Linq.Binary value);
    partial void OnDataChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public IKATT_Attribute()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ts", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public System.Data.Linq.Binary ts
		{
			get
			{
				return this._ts;
			}
			set
			{
				if ((this._ts != value))
				{
					this.OntsChanging(value);
					this.SendPropertyChanging();
					this._ts = value;
					this.SendPropertyChanged("ts");
					this.OntsChanged();
				}
			}
		}
		
		[Column(Storage="_AttributeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int AttributeId
		{
			get
			{
				return this._AttributeId;
			}
			set
			{
				if ((this._AttributeId != value))
				{
					this.OnAttributeIdChanging(value);
					this.SendPropertyChanging();
					this._AttributeId = value;
					this.SendPropertyChanged("AttributeId");
					this.OnAttributeIdChanged();
				}
			}
		}
		
		[Column(Storage="_AttributeCode", DbType="VarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public string AttributeCode
		{
			get
			{
				return this._AttributeCode;
			}
			set
			{
				if ((this._AttributeCode != value))
				{
					this.OnAttributeCodeChanging(value);
					this.SendPropertyChanging();
					this._AttributeCode = value;
					this.SendPropertyChanged("AttributeCode");
					this.OnAttributeCodeChanged();
				}
			}
		}
		
		[Column(Storage="_AttributeType", DbType="VarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public string AttributeType
		{
			get
			{
				return this._AttributeType;
			}
			set
			{
				if ((this._AttributeType != value))
				{
					this.OnAttributeTypeChanging(value);
					this.SendPropertyChanging();
					this._AttributeType = value;
					this.SendPropertyChanged("AttributeType");
					this.OnAttributeTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ParentAttributeId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public System.Nullable<int> ParentAttributeId
		{
			get
			{
				return this._ParentAttributeId;
			}
			set
			{
				if ((this._ParentAttributeId != value))
				{
					if (this._IKATT_AttributeParent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentAttributeIdChanging(value);
					this.SendPropertyChanging();
					this._ParentAttributeId = value;
					this.SendPropertyChanged("ParentAttributeId");
					this.OnParentAttributeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Position", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public double Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[Column(Storage="_FlagActive", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=7)]
		public bool FlagActive
		{
			get
			{
				return this._FlagActive;
			}
			set
			{
				if ((this._FlagActive != value))
				{
					this.OnFlagActiveChanging(value);
					this.SendPropertyChanging();
					this._FlagActive = value;
					this.SendPropertyChanged("FlagActive");
					this.OnFlagActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Flags", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=8)]
		public int Flags
		{
			get
			{
				return this._Flags;
			}
			set
			{
				if ((this._Flags != value))
				{
					this.OnFlagsChanging(value);
					this.SendPropertyChanging();
					this._Flags = value;
					this.SendPropertyChanged("Flags");
					this.OnFlagsChanged();
				}
			}
		}
		
		[Column(Storage="_Modif", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=9)]
		public System.Nullable<System.DateTime> Modif
		{
			get
			{
				return this._Modif;
			}
			set
			{
				if ((this._Modif != value))
				{
					this.OnModifChanging(value);
					this.SendPropertyChanging();
					this._Modif = value;
					this.SendPropertyChanged("Modif");
					this.OnModifChanged();
				}
			}
		}
		
		[Column(Storage="_Data", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=10)]
		public System.Data.Linq.Binary Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=11)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="IKATT_Attribute_IKATT_Attribute", Storage="_IKATT_Attributes", ThisKey="AttributeId", OtherKey="ParentAttributeId")]
		[DataMember(Order=12, EmitDefaultValue=false)]
		public EntitySet<IKATT_Attribute> IKATT_Attributes
		{
			get
			{
				if ((this.serializing 
							&& (this._IKATT_Attributes.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKATT_Attributes;
			}
			set
			{
				this._IKATT_Attributes.Assign(value);
			}
		}
		
		[Association(Name="IKATT_Attribute_IKATT_AttributeStream", Storage="_IKATT_AttributeStreams", ThisKey="AttributeId", OtherKey="AttributeId")]
		[DataMember(Order=13, EmitDefaultValue=false)]
		public EntitySet<IKATT_AttributeStream> IKATT_AttributeStreams
		{
			get
			{
				if ((this.serializing 
							&& (this._IKATT_AttributeStreams.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKATT_AttributeStreams;
			}
			set
			{
				this._IKATT_AttributeStreams.Assign(value);
			}
		}
		
		[Association(Name="IKATT_Attribute_IKATT_AttributeMapping", Storage="_IKATT_AttributeMappings", ThisKey="AttributeId", OtherKey="AttributeId")]
		[DataMember(Order=14, EmitDefaultValue=false)]
		public EntitySet<IKATT_AttributeMapping> IKATT_AttributeMappings
		{
			get
			{
				if ((this.serializing 
							&& (this._IKATT_AttributeMappings.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKATT_AttributeMappings;
			}
			set
			{
				this._IKATT_AttributeMappings.Assign(value);
			}
		}
		
		[Association(Name="IKATT_Attribute_IKATT_Attribute", Storage="_IKATT_AttributeParent", ThisKey="ParentAttributeId", OtherKey="AttributeId", IsForeignKey=true)]
		public IKATT_Attribute IKATT_AttributeParent
		{
			get
			{
				return this._IKATT_AttributeParent.Entity;
			}
			set
			{
				IKATT_Attribute previousValue = this._IKATT_AttributeParent.Entity;
				if (((previousValue != value) 
							|| (this._IKATT_AttributeParent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKATT_AttributeParent.Entity = null;
						previousValue.IKATT_Attributes.Remove(this);
					}
					this._IKATT_AttributeParent.Entity = value;
					if ((value != null))
					{
						value.IKATT_Attributes.Add(this);
						this._ParentAttributeId = value.AttributeId;
					}
					else
					{
						this._ParentAttributeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("IKATT_AttributeParent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IKATT_Attributes(IKATT_Attribute entity)
		{
			this.SendPropertyChanging();
			entity.IKATT_AttributeParent = this;
		}
		
		private void detach_IKATT_Attributes(IKATT_Attribute entity)
		{
			this.SendPropertyChanging();
			entity.IKATT_AttributeParent = null;
		}
		
		private void attach_IKATT_AttributeStreams(IKATT_AttributeStream entity)
		{
			this.SendPropertyChanging();
			entity.IKATT_Attribute = this;
		}
		
		private void detach_IKATT_AttributeStreams(IKATT_AttributeStream entity)
		{
			this.SendPropertyChanging();
			entity.IKATT_Attribute = null;
		}
		
		private void attach_IKATT_AttributeMappings(IKATT_AttributeMapping entity)
		{
			this.SendPropertyChanging();
			entity.IKATT_Attribute = this;
		}
		
		private void detach_IKATT_AttributeMappings(IKATT_AttributeMapping entity)
		{
			this.SendPropertyChanging();
			entity.IKATT_Attribute = null;
		}
		
		private void Initialize()
		{
			this._IKATT_Attributes = new EntitySet<IKATT_Attribute>(new Action<IKATT_Attribute>(this.attach_IKATT_Attributes), new Action<IKATT_Attribute>(this.detach_IKATT_Attributes));
			this._IKATT_AttributeStreams = new EntitySet<IKATT_AttributeStream>(new Action<IKATT_AttributeStream>(this.attach_IKATT_AttributeStreams), new Action<IKATT_AttributeStream>(this.detach_IKATT_AttributeStreams));
			this._IKATT_AttributeMappings = new EntitySet<IKATT_AttributeMapping>(new Action<IKATT_AttributeMapping>(this.attach_IKATT_AttributeMappings), new Action<IKATT_AttributeMapping>(this.detach_IKATT_AttributeMappings));
			this._IKATT_AttributeParent = default(EntityRef<IKATT_Attribute>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.IKATT_AttributeStream")]
	[DataContract()]
	public partial class IKATT_AttributeStream : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Data.Linq.Binary _ts;
		
		private int _AttributeId;
		
		private string _Key;
		
		private System.Nullable<System.DateTime> _Modif;
		
		private string _Filename;
		
		private string _Mime;
		
		private System.Data.Linq.Binary _Data;
		
		private EntityRef<IKATT_Attribute> _IKATT_Attribute;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntsChanging(System.Data.Linq.Binary value);
    partial void OntsChanged();
    partial void OnAttributeIdChanging(int value);
    partial void OnAttributeIdChanged();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnModifChanging(System.Nullable<System.DateTime> value);
    partial void OnModifChanged();
    partial void OnFilenameChanging(string value);
    partial void OnFilenameChanged();
    partial void OnMimeChanging(string value);
    partial void OnMimeChanged();
    partial void OnDataChanging(System.Data.Linq.Binary value);
    partial void OnDataChanged();
    #endregion
		
		public IKATT_AttributeStream()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ts", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public System.Data.Linq.Binary ts
		{
			get
			{
				return this._ts;
			}
			set
			{
				if ((this._ts != value))
				{
					this.OntsChanging(value);
					this.SendPropertyChanging();
					this._ts = value;
					this.SendPropertyChanged("ts");
					this.OntsChanged();
				}
			}
		}
		
		[Column(Storage="_AttributeId", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int AttributeId
		{
			get
			{
				return this._AttributeId;
			}
			set
			{
				if ((this._AttributeId != value))
				{
					if (this._IKATT_Attribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttributeIdChanging(value);
					this.SendPropertyChanging();
					this._AttributeId = value;
					this.SendPropertyChanged("AttributeId");
					this.OnAttributeIdChanged();
				}
			}
		}
		
		[Column(Name="[Key]", Storage="_Key", DbType="VarChar(250) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[Column(Storage="_Modif", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public System.Nullable<System.DateTime> Modif
		{
			get
			{
				return this._Modif;
			}
			set
			{
				if ((this._Modif != value))
				{
					this.OnModifChanging(value);
					this.SendPropertyChanging();
					this._Modif = value;
					this.SendPropertyChanged("Modif");
					this.OnModifChanged();
				}
			}
		}
		
		[Column(Storage="_Filename", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public string Filename
		{
			get
			{
				return this._Filename;
			}
			set
			{
				if ((this._Filename != value))
				{
					this.OnFilenameChanging(value);
					this.SendPropertyChanging();
					this._Filename = value;
					this.SendPropertyChanged("Filename");
					this.OnFilenameChanged();
				}
			}
		}
		
		[Column(Storage="_Mime", DbType="VarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public string Mime
		{
			get
			{
				return this._Mime;
			}
			set
			{
				if ((this._Mime != value))
				{
					this.OnMimeChanging(value);
					this.SendPropertyChanging();
					this._Mime = value;
					this.SendPropertyChanged("Mime");
					this.OnMimeChanged();
				}
			}
		}
		
		[Column(Storage="_Data", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=7)]
		public System.Data.Linq.Binary Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[Association(Name="IKATT_Attribute_IKATT_AttributeStream", Storage="_IKATT_Attribute", ThisKey="AttributeId", OtherKey="AttributeId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public IKATT_Attribute IKATT_Attribute
		{
			get
			{
				return this._IKATT_Attribute.Entity;
			}
			set
			{
				IKATT_Attribute previousValue = this._IKATT_Attribute.Entity;
				if (((previousValue != value) 
							|| (this._IKATT_Attribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKATT_Attribute.Entity = null;
						previousValue.IKATT_AttributeStreams.Remove(this);
					}
					this._IKATT_Attribute.Entity = value;
					if ((value != null))
					{
						value.IKATT_AttributeStreams.Add(this);
						this._AttributeId = value.AttributeId;
					}
					else
					{
						this._AttributeId = default(int);
					}
					this.SendPropertyChanged("IKATT_Attribute");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._IKATT_Attribute = default(EntityRef<IKATT_Attribute>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.IKATT_AttributeMapping")]
	[DataContract()]
	public partial class IKATT_AttributeMapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AttributeId;
		
		private int _rNode;
		
		private string _Data;
		
		private EntityRef<IKATT_Attribute> _IKATT_Attribute;
		
		private EntityRef<IKGD_RNODE> _IKGD_RNODE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAttributeIdChanging(int value);
    partial void OnAttributeIdChanged();
    partial void OnrNodeChanging(int value);
    partial void OnrNodeChanged();
    partial void OnDataChanging(string value);
    partial void OnDataChanged();
    #endregion
		
		public IKATT_AttributeMapping()
		{
			this.Initialize();
		}
		
		[Column(Storage="_AttributeId", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public int AttributeId
		{
			get
			{
				return this._AttributeId;
			}
			set
			{
				if ((this._AttributeId != value))
				{
					if (this._IKATT_Attribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttributeIdChanging(value);
					this.SendPropertyChanging();
					this._AttributeId = value;
					this.SendPropertyChanged("AttributeId");
					this.OnAttributeIdChanged();
				}
			}
		}
		
		[Column(Storage="_rNode", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int rNode
		{
			get
			{
				return this._rNode;
			}
			set
			{
				if ((this._rNode != value))
				{
					if (this._IKGD_RNODE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrNodeChanging(value);
					this.SendPropertyChanging();
					this._rNode = value;
					this.SendPropertyChanged("rNode");
					this.OnrNodeChanged();
				}
			}
		}
		
		[Column(Storage="_Data", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public string Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[Association(Name="IKATT_Attribute_IKATT_AttributeMapping", Storage="_IKATT_Attribute", ThisKey="AttributeId", OtherKey="AttributeId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public IKATT_Attribute IKATT_Attribute
		{
			get
			{
				return this._IKATT_Attribute.Entity;
			}
			set
			{
				IKATT_Attribute previousValue = this._IKATT_Attribute.Entity;
				if (((previousValue != value) 
							|| (this._IKATT_Attribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKATT_Attribute.Entity = null;
						previousValue.IKATT_AttributeMappings.Remove(this);
					}
					this._IKATT_Attribute.Entity = value;
					if ((value != null))
					{
						value.IKATT_AttributeMappings.Add(this);
						this._AttributeId = value.AttributeId;
					}
					else
					{
						this._AttributeId = default(int);
					}
					this.SendPropertyChanged("IKATT_Attribute");
				}
			}
		}
		
		[Association(Name="IKGD_RNODE_IKATT_AttributeMapping", Storage="_IKGD_RNODE", ThisKey="rNode", OtherKey="code", IsForeignKey=true)]
		public IKGD_RNODE IKGD_RNODE
		{
			get
			{
				return this._IKGD_RNODE.Entity;
			}
			set
			{
				IKGD_RNODE previousValue = this._IKGD_RNODE.Entity;
				if (((previousValue != value) 
							|| (this._IKGD_RNODE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKGD_RNODE.Entity = null;
						previousValue.IKATT_AttributeMappings.Remove(this);
					}
					this._IKGD_RNODE.Entity = value;
					if ((value != null))
					{
						value.IKATT_AttributeMappings.Add(this);
						this._rNode = value.code;
					}
					else
					{
						this._rNode = default(int);
					}
					this.SendPropertyChanged("IKGD_RNODE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._IKATT_Attribute = default(EntityRef<IKATT_Attribute>);
			this._IKGD_RNODE = default(EntityRef<IKGD_RNODE>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.IKQM_Queue")]
	[DataContract()]
	public partial class IKQM_Queue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Data.Linq.Binary _ts;
		
		private int _Id;
		
		private System.Guid _QID;
		
		private string _Application;
		
		private string _QueueName;
		
		private bool _flag_active;
		
		private string _Status;
		
		private string _ManagerType;
		
		private string _EventType;
		
		private System.Nullable<System.DateTime> _LockedUntil;
		
		private System.Nullable<int> _LockedApplicationInstanceHash;
		
		private EntityRef<IKQM_QueueBlob> _IKQM_QueueBlob;
		
		private EntitySet<IKQM_QueueLog> _IKQM_QueueLogs;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntsChanging(System.Data.Linq.Binary value);
    partial void OntsChanged();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnQIDChanging(System.Guid value);
    partial void OnQIDChanged();
    partial void OnApplicationChanging(string value);
    partial void OnApplicationChanged();
    partial void OnQueueNameChanging(string value);
    partial void OnQueueNameChanged();
    partial void Onflag_activeChanging(bool value);
    partial void Onflag_activeChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnManagerTypeChanging(string value);
    partial void OnManagerTypeChanged();
    partial void OnEventTypeChanging(string value);
    partial void OnEventTypeChanged();
    partial void OnLockedUntilChanging(System.Nullable<System.DateTime> value);
    partial void OnLockedUntilChanged();
    partial void OnLockedApplicationInstanceHashChanging(System.Nullable<int> value);
    partial void OnLockedApplicationInstanceHashChanged();
    #endregion
		
		public IKQM_Queue()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ts", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public System.Data.Linq.Binary ts
		{
			get
			{
				return this._ts;
			}
			set
			{
				if ((this._ts != value))
				{
					this.OntsChanging(value);
					this.SendPropertyChanging();
					this._ts = value;
					this.SendPropertyChanged("ts");
					this.OntsChanged();
				}
			}
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_QID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public System.Guid QID
		{
			get
			{
				return this._QID;
			}
			set
			{
				if ((this._QID != value))
				{
					this.OnQIDChanging(value);
					this.SendPropertyChanging();
					this._QID = value;
					this.SendPropertyChanged("QID");
					this.OnQIDChanged();
				}
			}
		}
		
		[Column(Storage="_Application", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public string Application
		{
			get
			{
				return this._Application;
			}
			set
			{
				if ((this._Application != value))
				{
					this.OnApplicationChanging(value);
					this.SendPropertyChanging();
					this._Application = value;
					this.SendPropertyChanged("Application");
					this.OnApplicationChanged();
				}
			}
		}
		
		[Column(Storage="_QueueName", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public string QueueName
		{
			get
			{
				return this._QueueName;
			}
			set
			{
				if ((this._QueueName != value))
				{
					this.OnQueueNameChanging(value);
					this.SendPropertyChanging();
					this._QueueName = value;
					this.SendPropertyChanged("QueueName");
					this.OnQueueNameChanged();
				}
			}
		}
		
		[Column(Storage="_flag_active", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public bool flag_active
		{
			get
			{
				return this._flag_active;
			}
			set
			{
				if ((this._flag_active != value))
				{
					this.Onflag_activeChanging(value);
					this.SendPropertyChanging();
					this._flag_active = value;
					this.SendPropertyChanged("flag_active");
					this.Onflag_activeChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=7)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_ManagerType", DbType="VarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=8)]
		public string ManagerType
		{
			get
			{
				return this._ManagerType;
			}
			set
			{
				if ((this._ManagerType != value))
				{
					this.OnManagerTypeChanging(value);
					this.SendPropertyChanging();
					this._ManagerType = value;
					this.SendPropertyChanged("ManagerType");
					this.OnManagerTypeChanged();
				}
			}
		}
		
		[Column(Storage="_EventType", DbType="VarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=9)]
		public string EventType
		{
			get
			{
				return this._EventType;
			}
			set
			{
				if ((this._EventType != value))
				{
					this.OnEventTypeChanging(value);
					this.SendPropertyChanging();
					this._EventType = value;
					this.SendPropertyChanged("EventType");
					this.OnEventTypeChanged();
				}
			}
		}
		
		[Column(Storage="_LockedUntil", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=10)]
		public System.Nullable<System.DateTime> LockedUntil
		{
			get
			{
				return this._LockedUntil;
			}
			set
			{
				if ((this._LockedUntil != value))
				{
					this.OnLockedUntilChanging(value);
					this.SendPropertyChanging();
					this._LockedUntil = value;
					this.SendPropertyChanged("LockedUntil");
					this.OnLockedUntilChanged();
				}
			}
		}
		
		[Column(Storage="_LockedApplicationInstanceHash", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=11)]
		public System.Nullable<int> LockedApplicationInstanceHash
		{
			get
			{
				return this._LockedApplicationInstanceHash;
			}
			set
			{
				if ((this._LockedApplicationInstanceHash != value))
				{
					this.OnLockedApplicationInstanceHashChanging(value);
					this.SendPropertyChanging();
					this._LockedApplicationInstanceHash = value;
					this.SendPropertyChanged("LockedApplicationInstanceHash");
					this.OnLockedApplicationInstanceHashChanged();
				}
			}
		}
		
		[Association(Name="IKQM_Queue_IKQM_QueueBlob", Storage="_IKQM_QueueBlob", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false)]
		[DataMember(Order=12, EmitDefaultValue=false)]
		public IKQM_QueueBlob IKQM_QueueBlob
		{
			get
			{
				if ((this.serializing 
							&& (this._IKQM_QueueBlob.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._IKQM_QueueBlob.Entity;
			}
			set
			{
				IKQM_QueueBlob previousValue = this._IKQM_QueueBlob.Entity;
				if (((previousValue != value) 
							|| (this._IKQM_QueueBlob.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKQM_QueueBlob.Entity = null;
						previousValue.IKQM_Queue = null;
					}
					this._IKQM_QueueBlob.Entity = value;
					if ((value != null))
					{
						value.IKQM_Queue = this;
					}
					this.SendPropertyChanged("IKQM_QueueBlob");
				}
			}
		}
		
		[Association(Name="IKQM_Queue_IKQM_QueueLog", Storage="_IKQM_QueueLogs", ThisKey="Id", OtherKey="IdQueue")]
		[DataMember(Order=13, EmitDefaultValue=false)]
		public EntitySet<IKQM_QueueLog> IKQM_QueueLogs
		{
			get
			{
				if ((this.serializing 
							&& (this._IKQM_QueueLogs.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IKQM_QueueLogs;
			}
			set
			{
				this._IKQM_QueueLogs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IKQM_QueueLogs(IKQM_QueueLog entity)
		{
			this.SendPropertyChanging();
			entity.IKQM_Queue = this;
		}
		
		private void detach_IKQM_QueueLogs(IKQM_QueueLog entity)
		{
			this.SendPropertyChanging();
			entity.IKQM_Queue = null;
		}
		
		private void Initialize()
		{
			this._IKQM_QueueBlob = default(EntityRef<IKQM_QueueBlob>);
			this._IKQM_QueueLogs = new EntitySet<IKQM_QueueLog>(new Action<IKQM_QueueLog>(this.attach_IKQM_QueueLogs), new Action<IKQM_QueueLog>(this.detach_IKQM_QueueLogs));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.IKQM_QueueBlob")]
	[DataContract()]
	public partial class IKQM_QueueBlob : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Data.Linq.Binary _ts;
		
		private int _Id;
		
		private string _Description;
		
		private string _Data;
		
		private string _Owner;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateModified;
		
		private EntityRef<IKQM_Queue> _IKQM_Queue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntsChanging(System.Data.Linq.Binary value);
    partial void OntsChanged();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDataChanging(string value);
    partial void OnDataChanged();
    partial void OnOwnerChanging(string value);
    partial void OnOwnerChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public IKQM_QueueBlob()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ts", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public System.Data.Linq.Binary ts
		{
			get
			{
				return this._ts;
			}
			set
			{
				if ((this._ts != value))
				{
					this.OntsChanging(value);
					this.SendPropertyChanging();
					this._ts = value;
					this.SendPropertyChanged("ts");
					this.OntsChanged();
				}
			}
		}
		
		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._IKQM_Queue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Data", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public string Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[Column(Storage="_Owner", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public string Owner
		{
			get
			{
				return this._Owner;
			}
			set
			{
				if ((this._Owner != value))
				{
					this.OnOwnerChanging(value);
					this.SendPropertyChanging();
					this._Owner = value;
					this.SendPropertyChanged("Owner");
					this.OnOwnerChanged();
				}
			}
		}
		
		[Column(Storage="_DateCreated", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_DateModified", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=7)]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[Association(Name="IKQM_Queue_IKQM_QueueBlob", Storage="_IKQM_Queue", ThisKey="Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public IKQM_Queue IKQM_Queue
		{
			get
			{
				return this._IKQM_Queue.Entity;
			}
			set
			{
				IKQM_Queue previousValue = this._IKQM_Queue.Entity;
				if (((previousValue != value) 
							|| (this._IKQM_Queue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKQM_Queue.Entity = null;
						previousValue.IKQM_QueueBlob = null;
					}
					this._IKQM_Queue.Entity = value;
					if ((value != null))
					{
						value.IKQM_QueueBlob = this;
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(int);
					}
					this.SendPropertyChanged("IKQM_Queue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._IKQM_Queue = default(EntityRef<IKQM_Queue>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.IKQM_QueueLog")]
	[DataContract()]
	public partial class IKQM_QueueLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdQueue;
		
		private System.DateTime _ts;
		
		private string _Channel;
		
		private string _Message;
		
		private EntityRef<IKQM_Queue> _IKQM_Queue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdQueueChanging(int value);
    partial void OnIdQueueChanged();
    partial void OntsChanging(System.DateTime value);
    partial void OntsChanged();
    partial void OnChannelChanging(string value);
    partial void OnChannelChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    #endregion
		
		public IKQM_QueueLog()
		{
			this.Initialize();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdQueue", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int IdQueue
		{
			get
			{
				return this._IdQueue;
			}
			set
			{
				if ((this._IdQueue != value))
				{
					if (this._IKQM_Queue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdQueueChanging(value);
					this.SendPropertyChanging();
					this._IdQueue = value;
					this.SendPropertyChanged("IdQueue");
					this.OnIdQueueChanged();
				}
			}
		}
		
		[Column(Storage="_ts", DbType="DateTime NOT NULL")]
		[DataMember(Order=3)]
		public System.DateTime ts
		{
			get
			{
				return this._ts;
			}
			set
			{
				if ((this._ts != value))
				{
					this.OntsChanging(value);
					this.SendPropertyChanging();
					this._ts = value;
					this.SendPropertyChanged("ts");
					this.OntsChanged();
				}
			}
		}
		
		[Column(Storage="_Channel", DbType="VarChar(50)")]
		[DataMember(Order=4)]
		public string Channel
		{
			get
			{
				return this._Channel;
			}
			set
			{
				if ((this._Channel != value))
				{
					this.OnChannelChanging(value);
					this.SendPropertyChanging();
					this._Channel = value;
					this.SendPropertyChanged("Channel");
					this.OnChannelChanged();
				}
			}
		}
		
		[Column(Storage="_Message", DbType="NVarChar(MAX)")]
		[DataMember(Order=5)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[Association(Name="IKQM_Queue_IKQM_QueueLog", Storage="_IKQM_Queue", ThisKey="IdQueue", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public IKQM_Queue IKQM_Queue
		{
			get
			{
				return this._IKQM_Queue.Entity;
			}
			set
			{
				IKQM_Queue previousValue = this._IKQM_Queue.Entity;
				if (((previousValue != value) 
							|| (this._IKQM_Queue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKQM_Queue.Entity = null;
						previousValue.IKQM_QueueLogs.Remove(this);
					}
					this._IKQM_Queue.Entity = value;
					if ((value != null))
					{
						value.IKQM_QueueLogs.Add(this);
						this._IdQueue = value.Id;
					}
					else
					{
						this._IdQueue = default(int);
					}
					this.SendPropertyChanged("IKQM_Queue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._IKQM_Queue = default(EntityRef<IKQM_Queue>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
}
#pragma warning restore 1591
