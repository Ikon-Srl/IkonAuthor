#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.6400
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ikon.Config
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="BlankSite_CMS")]
	public partial class DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertIKGD_CONFIG(IKGD_CONFIG instance);
    partial void UpdateIKGD_CONFIG(IKGD_CONFIG instance);
    partial void DeleteIKGD_CONFIG(IKGD_CONFIG instance);
    partial void InsertIKGD_KEYSTORAGE(IKGD_KEYSTORAGE instance);
    partial void UpdateIKGD_KEYSTORAGE(IKGD_KEYSTORAGE instance);
    partial void DeleteIKGD_KEYSTORAGE(IKGD_KEYSTORAGE instance);
    partial void InsertIKGD_KEYSTORAGE_MAP(IKGD_KEYSTORAGE_MAP instance);
    partial void UpdateIKGD_KEYSTORAGE_MAP(IKGD_KEYSTORAGE_MAP instance);
    partial void DeleteIKGD_KEYSTORAGE_MAP(IKGD_KEYSTORAGE_MAP instance);
    partial void InsertIKGD_ASSEMBLY(IKGD_ASSEMBLY instance);
    partial void UpdateIKGD_ASSEMBLY(IKGD_ASSEMBLY instance);
    partial void DeleteIKGD_ASSEMBLY(IKGD_ASSEMBLY instance);
    partial void InsertIKCMS_SEO(IKCMS_SEO instance);
    partial void UpdateIKCMS_SEO(IKCMS_SEO instance);
    partial void DeleteIKCMS_SEO(IKCMS_SEO instance);
    #endregion
		
		public DataContext() : 
				base(global::IKGD_ConfigSettings.Properties.Settings.Default.GDCS, mappingSource)
		{
			OnCreated();
		}
		
		public DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<IKGD_CONFIG> IKGD_CONFIGs
		{
			get
			{
				return this.GetTable<IKGD_CONFIG>();
			}
		}
		
		public System.Data.Linq.Table<IKGD_KEYSTORAGE> IKGD_KEYSTORAGEs
		{
			get
			{
				return this.GetTable<IKGD_KEYSTORAGE>();
			}
		}
		
		public System.Data.Linq.Table<IKGD_KEYSTORAGE_MAP> IKGD_KEYSTORAGE_MAPs
		{
			get
			{
				return this.GetTable<IKGD_KEYSTORAGE_MAP>();
			}
		}
		
		public System.Data.Linq.Table<IKGD_ASSEMBLY> IKGD_ASSEMBLies
		{
			get
			{
				return this.GetTable<IKGD_ASSEMBLY>();
			}
		}
		
		public System.Data.Linq.Table<IKCMS_SEO> IKCMS_SEOs
		{
			get
			{
				return this.GetTable<IKCMS_SEO>();
			}
		}
	}
	
	[Table(Name="dbo.IKGD_CONFIG")]
	public partial class IKGD_CONFIG : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.DateTime _modif;
		
		private string _application;
		
		private string _instance;
		
		private string _type;
		
		private string _key;
		
		private string _value;
		
		private string _description;
		
		private bool _flag_active;
		
		private bool _flag_system;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnmodifChanging(System.DateTime value);
    partial void OnmodifChanged();
    partial void OnapplicationChanging(string value);
    partial void OnapplicationChanged();
    partial void OninstanceChanging(string value);
    partial void OninstanceChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void OnkeyChanging(string value);
    partial void OnkeyChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void Onflag_activeChanging(bool value);
    partial void Onflag_activeChanged();
    partial void Onflag_systemChanging(bool value);
    partial void Onflag_systemChanged();
    #endregion
		
		public IKGD_CONFIG()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_modif", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime modif
		{
			get
			{
				return this._modif;
			}
			set
			{
				if ((this._modif != value))
				{
					this.OnmodifChanging(value);
					this.SendPropertyChanging();
					this._modif = value;
					this.SendPropertyChanged("modif");
					this.OnmodifChanged();
				}
			}
		}
		
		[Column(Storage="_application", DbType="VarChar(256) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string application
		{
			get
			{
				return this._application;
			}
			set
			{
				if ((this._application != value))
				{
					this.OnapplicationChanging(value);
					this.SendPropertyChanging();
					this._application = value;
					this.SendPropertyChanged("application");
					this.OnapplicationChanged();
				}
			}
		}
		
		[Column(Storage="_instance", DbType="VarChar(256)", UpdateCheck=UpdateCheck.Never)]
		public string instance
		{
			get
			{
				return this._instance;
			}
			set
			{
				if ((this._instance != value))
				{
					this.OninstanceChanging(value);
					this.SendPropertyChanging();
					this._instance = value;
					this.SendPropertyChanged("instance");
					this.OninstanceChanged();
				}
			}
		}
		
		[Column(Storage="_type", DbType="VarChar(256)", UpdateCheck=UpdateCheck.Never)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[Column(Name="[key]", Storage="_key", DbType="VarChar(256) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string key
		{
			get
			{
				return this._key;
			}
			set
			{
				if ((this._key != value))
				{
					this.OnkeyChanging(value);
					this.SendPropertyChanging();
					this._key = value;
					this.SendPropertyChanged("key");
					this.OnkeyChanged();
				}
			}
		}
		
		[Column(Storage="_value", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[Column(Storage="_description", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_flag_active", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool flag_active
		{
			get
			{
				return this._flag_active;
			}
			set
			{
				if ((this._flag_active != value))
				{
					this.Onflag_activeChanging(value);
					this.SendPropertyChanging();
					this._flag_active = value;
					this.SendPropertyChanged("flag_active");
					this.Onflag_activeChanged();
				}
			}
		}
		
		[Column(Storage="_flag_system", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool flag_system
		{
			get
			{
				return this._flag_system;
			}
			set
			{
				if ((this._flag_system != value))
				{
					this.Onflag_systemChanging(value);
					this.SendPropertyChanging();
					this._flag_system = value;
					this.SendPropertyChanged("flag_system");
					this.Onflag_systemChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.IKGD_KEYSTORAGE")]
	public partial class IKGD_KEYSTORAGE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _modif;
		
		private string _application;
		
		private string _type;
		
		private string _key;
		
		private string _value;
		
		private string _description;
		
		private double _position;
		
		private bool _flag_active;
		
		private bool _flag_system;
		
		private EntitySet<IKGD_KEYSTORAGE_MAP> _IKGD_KEYSTORAGE_MAPs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmodifChanging(System.DateTime value);
    partial void OnmodifChanged();
    partial void OnapplicationChanging(string value);
    partial void OnapplicationChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void OnkeyChanging(string value);
    partial void OnkeyChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnpositionChanging(double value);
    partial void OnpositionChanged();
    partial void Onflag_activeChanging(bool value);
    partial void Onflag_activeChanged();
    partial void Onflag_systemChanging(bool value);
    partial void Onflag_systemChanged();
    #endregion
		
		public IKGD_KEYSTORAGE()
		{
			this._IKGD_KEYSTORAGE_MAPs = new EntitySet<IKGD_KEYSTORAGE_MAP>(new Action<IKGD_KEYSTORAGE_MAP>(this.attach_IKGD_KEYSTORAGE_MAPs), new Action<IKGD_KEYSTORAGE_MAP>(this.detach_IKGD_KEYSTORAGE_MAPs));
			OnCreated();
		}
		
		[Column(Storage="_modif", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime modif
		{
			get
			{
				return this._modif;
			}
			set
			{
				if ((this._modif != value))
				{
					this.OnmodifChanging(value);
					this.SendPropertyChanging();
					this._modif = value;
					this.SendPropertyChanged("modif");
					this.OnmodifChanged();
				}
			}
		}
		
		[Column(Storage="_application", DbType="VarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string application
		{
			get
			{
				return this._application;
			}
			set
			{
				if ((this._application != value))
				{
					this.OnapplicationChanging(value);
					this.SendPropertyChanging();
					this._application = value;
					this.SendPropertyChanged("application");
					this.OnapplicationChanged();
				}
			}
		}
		
		[Column(Storage="_type", DbType="VarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[Column(Name="[key]", Storage="_key", DbType="VarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string key
		{
			get
			{
				return this._key;
			}
			set
			{
				if ((this._key != value))
				{
					this.OnkeyChanging(value);
					this.SendPropertyChanging();
					this._key = value;
					this.SendPropertyChanged("key");
					this.OnkeyChanged();
				}
			}
		}
		
		[Column(Storage="_value", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[Column(Storage="_description", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_position", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public double position
		{
			get
			{
				return this._position;
			}
			set
			{
				if ((this._position != value))
				{
					this.OnpositionChanging(value);
					this.SendPropertyChanging();
					this._position = value;
					this.SendPropertyChanged("position");
					this.OnpositionChanged();
				}
			}
		}
		
		[Column(Storage="_flag_active", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool flag_active
		{
			get
			{
				return this._flag_active;
			}
			set
			{
				if ((this._flag_active != value))
				{
					this.Onflag_activeChanging(value);
					this.SendPropertyChanging();
					this._flag_active = value;
					this.SendPropertyChanged("flag_active");
					this.Onflag_activeChanged();
				}
			}
		}
		
		[Column(Storage="_flag_system", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool flag_system
		{
			get
			{
				return this._flag_system;
			}
			set
			{
				if ((this._flag_system != value))
				{
					this.Onflag_systemChanging(value);
					this.SendPropertyChanging();
					this._flag_system = value;
					this.SendPropertyChanged("flag_system");
					this.Onflag_systemChanged();
				}
			}
		}
		
		[Association(Name="IKGD_KEYSTORAGE_IKGD_KEYSTORAGE_MAP", Storage="_IKGD_KEYSTORAGE_MAPs", ThisKey="application,type,key", OtherKey="application,type,key")]
		public EntitySet<IKGD_KEYSTORAGE_MAP> IKGD_KEYSTORAGE_MAPs
		{
			get
			{
				return this._IKGD_KEYSTORAGE_MAPs;
			}
			set
			{
				this._IKGD_KEYSTORAGE_MAPs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IKGD_KEYSTORAGE_MAPs(IKGD_KEYSTORAGE_MAP entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_KEYSTORAGE = this;
		}
		
		private void detach_IKGD_KEYSTORAGE_MAPs(IKGD_KEYSTORAGE_MAP entity)
		{
			this.SendPropertyChanging();
			entity.IKGD_KEYSTORAGE = null;
		}
	}
	
	[Table(Name="dbo.IKGD_KEYSTORAGE_MAP")]
	public partial class IKGD_KEYSTORAGE_MAP : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _application;
		
		private string _type;
		
		private string _key;
		
		private string _language;
		
		private string _description;
		
		private EntityRef<IKGD_KEYSTORAGE> _IKGD_KEYSTORAGE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnapplicationChanging(string value);
    partial void OnapplicationChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void OnkeyChanging(string value);
    partial void OnkeyChanged();
    partial void OnlanguageChanging(string value);
    partial void OnlanguageChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public IKGD_KEYSTORAGE_MAP()
		{
			this._IKGD_KEYSTORAGE = default(EntityRef<IKGD_KEYSTORAGE>);
			OnCreated();
		}
		
		[Column(Storage="_application", DbType="VarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string application
		{
			get
			{
				return this._application;
			}
			set
			{
				if ((this._application != value))
				{
					if (this._IKGD_KEYSTORAGE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnapplicationChanging(value);
					this.SendPropertyChanging();
					this._application = value;
					this.SendPropertyChanged("application");
					this.OnapplicationChanged();
				}
			}
		}
		
		[Column(Storage="_type", DbType="VarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					if (this._IKGD_KEYSTORAGE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[Column(Name="[key]", Storage="_key", DbType="VarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string key
		{
			get
			{
				return this._key;
			}
			set
			{
				if ((this._key != value))
				{
					this.OnkeyChanging(value);
					this.SendPropertyChanging();
					this._key = value;
					this.SendPropertyChanged("key");
					this.OnkeyChanged();
				}
			}
		}
		
		[Column(Storage="_language", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string language
		{
			get
			{
				return this._language;
			}
			set
			{
				if ((this._language != value))
				{
					this.OnlanguageChanging(value);
					this.SendPropertyChanging();
					this._language = value;
					this.SendPropertyChanged("language");
					this.OnlanguageChanged();
				}
			}
		}
		
		[Column(Storage="_description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[Association(Name="IKGD_KEYSTORAGE_IKGD_KEYSTORAGE_MAP", Storage="_IKGD_KEYSTORAGE", ThisKey="application,type,key", OtherKey="application,type,key", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public IKGD_KEYSTORAGE IKGD_KEYSTORAGE
		{
			get
			{
				return this._IKGD_KEYSTORAGE.Entity;
			}
			set
			{
				IKGD_KEYSTORAGE previousValue = this._IKGD_KEYSTORAGE.Entity;
				if (((previousValue != value) 
							|| (this._IKGD_KEYSTORAGE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IKGD_KEYSTORAGE.Entity = null;
						previousValue.IKGD_KEYSTORAGE_MAPs.Remove(this);
					}
					this._IKGD_KEYSTORAGE.Entity = value;
					if ((value != null))
					{
						value.IKGD_KEYSTORAGE_MAPs.Add(this);
						this._application = value.application;
						this._type = value.type;
						this._key = value.key;
					}
					else
					{
						this._application = default(string);
						this._type = default(string);
						this._key = default(string);
					}
					this.SendPropertyChanged("IKGD_KEYSTORAGE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.IKGD_ASSEMBLY")]
	public partial class IKGD_ASSEMBLY : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _modif;
		
		private string _Name;
		
		private string _FullName;
		
		private System.Data.Linq.Binary _AssemblyStream;
		
		private string _AssembliesMain;
		
		private int _Hash;
		
		private bool _Enabled;
		
		private string _Arch;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnmodifChanging(System.DateTime value);
    partial void OnmodifChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnAssemblyStreamChanging(System.Data.Linq.Binary value);
    partial void OnAssemblyStreamChanged();
    partial void OnAssembliesMainChanging(string value);
    partial void OnAssembliesMainChanged();
    partial void OnHashChanging(int value);
    partial void OnHashChanged();
    partial void OnEnabledChanging(bool value);
    partial void OnEnabledChanged();
    partial void OnArchChanging(string value);
    partial void OnArchChanged();
    #endregion
		
		public IKGD_ASSEMBLY()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_modif", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime modif
		{
			get
			{
				return this._modif;
			}
			set
			{
				if ((this._modif != value))
				{
					this.OnmodifChanging(value);
					this.SendPropertyChanging();
					this._modif = value;
					this.SendPropertyChanged("modif");
					this.OnmodifChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="VarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[Column(Storage="_AssemblyStream", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary AssemblyStream
		{
			get
			{
				return this._AssemblyStream;
			}
			set
			{
				if ((this._AssemblyStream != value))
				{
					this.OnAssemblyStreamChanging(value);
					this.SendPropertyChanging();
					this._AssemblyStream = value;
					this.SendPropertyChanged("AssemblyStream");
					this.OnAssemblyStreamChanged();
				}
			}
		}
		
		[Column(Storage="_AssembliesMain", DbType="VarChar(750) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string AssembliesMain
		{
			get
			{
				return this._AssembliesMain;
			}
			set
			{
				if ((this._AssembliesMain != value))
				{
					this.OnAssembliesMainChanging(value);
					this.SendPropertyChanging();
					this._AssembliesMain = value;
					this.SendPropertyChanged("AssembliesMain");
					this.OnAssembliesMainChanged();
				}
			}
		}
		
		[Column(Storage="_Hash", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Hash
		{
			get
			{
				return this._Hash;
			}
			set
			{
				if ((this._Hash != value))
				{
					this.OnHashChanging(value);
					this.SendPropertyChanging();
					this._Hash = value;
					this.SendPropertyChanged("Hash");
					this.OnHashChanged();
				}
			}
		}
		
		[Column(Storage="_Enabled", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		[Column(Storage="_Arch", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Arch
		{
			get
			{
				return this._Arch;
			}
			set
			{
				if ((this._Arch != value))
				{
					this.OnArchChanging(value);
					this.SendPropertyChanging();
					this._Arch = value;
					this.SendPropertyChanged("Arch");
					this.OnArchChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.IKCMS_SEO")]
	public partial class IKCMS_SEO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _application;
		
		private string _SEO_url;
		
		private System.Nullable<int> _target_snode;
		
		private System.Nullable<int> _target_rnode;
		
		private string _target_url;
		
		private string _language;
		
		private bool _canonical;
		
		private bool _active;
		
		private System.Nullable<int> _http_code;
		
		private double _priority;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnapplicationChanging(string value);
    partial void OnapplicationChanged();
    partial void OnSEO_urlChanging(string value);
    partial void OnSEO_urlChanged();
    partial void Ontarget_snodeChanging(System.Nullable<int> value);
    partial void Ontarget_snodeChanged();
    partial void Ontarget_rnodeChanging(System.Nullable<int> value);
    partial void Ontarget_rnodeChanged();
    partial void Ontarget_urlChanging(string value);
    partial void Ontarget_urlChanged();
    partial void OnlanguageChanging(string value);
    partial void OnlanguageChanged();
    partial void OncanonicalChanging(bool value);
    partial void OncanonicalChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void Onhttp_codeChanging(System.Nullable<int> value);
    partial void Onhttp_codeChanged();
    partial void OnpriorityChanging(double value);
    partial void OnpriorityChanged();
    #endregion
		
		public IKCMS_SEO()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_application", DbType="VarChar(256) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string application
		{
			get
			{
				return this._application;
			}
			set
			{
				if ((this._application != value))
				{
					this.OnapplicationChanging(value);
					this.SendPropertyChanging();
					this._application = value;
					this.SendPropertyChanged("application");
					this.OnapplicationChanged();
				}
			}
		}
		
		[Column(Storage="_SEO_url", DbType="NVarChar(450) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SEO_url
		{
			get
			{
				return this._SEO_url;
			}
			set
			{
				if ((this._SEO_url != value))
				{
					this.OnSEO_urlChanging(value);
					this.SendPropertyChanging();
					this._SEO_url = value;
					this.SendPropertyChanged("SEO_url");
					this.OnSEO_urlChanged();
				}
			}
		}
		
		[Column(Storage="_target_snode", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> target_snode
		{
			get
			{
				return this._target_snode;
			}
			set
			{
				if ((this._target_snode != value))
				{
					this.Ontarget_snodeChanging(value);
					this.SendPropertyChanging();
					this._target_snode = value;
					this.SendPropertyChanged("target_snode");
					this.Ontarget_snodeChanged();
				}
			}
		}
		
		[Column(Storage="_target_rnode", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> target_rnode
		{
			get
			{
				return this._target_rnode;
			}
			set
			{
				if ((this._target_rnode != value))
				{
					this.Ontarget_rnodeChanging(value);
					this.SendPropertyChanging();
					this._target_rnode = value;
					this.SendPropertyChanged("target_rnode");
					this.Ontarget_rnodeChanged();
				}
			}
		}
		
		[Column(Storage="_target_url", DbType="NVarChar(450)", UpdateCheck=UpdateCheck.Never)]
		public string target_url
		{
			get
			{
				return this._target_url;
			}
			set
			{
				if ((this._target_url != value))
				{
					this.Ontarget_urlChanging(value);
					this.SendPropertyChanging();
					this._target_url = value;
					this.SendPropertyChanged("target_url");
					this.Ontarget_urlChanged();
				}
			}
		}
		
		[Column(Storage="_language", DbType="VarChar(2)", UpdateCheck=UpdateCheck.Never)]
		public string language
		{
			get
			{
				return this._language;
			}
			set
			{
				if ((this._language != value))
				{
					this.OnlanguageChanging(value);
					this.SendPropertyChanging();
					this._language = value;
					this.SendPropertyChanged("language");
					this.OnlanguageChanged();
				}
			}
		}
		
		[Column(Storage="_canonical", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool canonical
		{
			get
			{
				return this._canonical;
			}
			set
			{
				if ((this._canonical != value))
				{
					this.OncanonicalChanging(value);
					this.SendPropertyChanging();
					this._canonical = value;
					this.SendPropertyChanged("canonical");
					this.OncanonicalChanged();
				}
			}
		}
		
		[Column(Storage="_active", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[Column(Storage="_http_code", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> http_code
		{
			get
			{
				return this._http_code;
			}
			set
			{
				if ((this._http_code != value))
				{
					this.Onhttp_codeChanging(value);
					this.SendPropertyChanging();
					this._http_code = value;
					this.SendPropertyChanged("http_code");
					this.Onhttp_codeChanged();
				}
			}
		}
		
		[Column(Storage="_priority", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public double priority
		{
			get
			{
				return this._priority;
			}
			set
			{
				if ((this._priority != value))
				{
					this.OnpriorityChanging(value);
					this.SendPropertyChanging();
					this._priority = value;
					this.SendPropertyChanged("priority");
					this.OnpriorityChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
