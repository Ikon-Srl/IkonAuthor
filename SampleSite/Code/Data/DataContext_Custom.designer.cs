#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8009
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Custom.DB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Runtime.Serialization;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="SampleSite_CMS_LESS")]
	public partial class DataContext_Custom : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertaspnet_Application(aspnet_Application instance);
    partial void Updateaspnet_Application(aspnet_Application instance);
    partial void Deleteaspnet_Application(aspnet_Application instance);
    partial void Insertaspnet_Membership(aspnet_Membership instance);
    partial void Updateaspnet_Membership(aspnet_Membership instance);
    partial void Deleteaspnet_Membership(aspnet_Membership instance);
    partial void Insertaspnet_Role(aspnet_Role instance);
    partial void Updateaspnet_Role(aspnet_Role instance);
    partial void Deleteaspnet_Role(aspnet_Role instance);
    partial void Insertaspnet_User(aspnet_User instance);
    partial void Updateaspnet_User(aspnet_User instance);
    partial void Deleteaspnet_User(aspnet_User instance);
    partial void Insertaspnet_UsersInRole(aspnet_UsersInRole instance);
    partial void Updateaspnet_UsersInRole(aspnet_UsersInRole instance);
    partial void Deleteaspnet_UsersInRole(aspnet_UsersInRole instance);
    partial void InsertIKG_HITLOG(IKG_HITLOG instance);
    partial void UpdateIKG_HITLOG(IKG_HITLOG instance);
    partial void DeleteIKG_HITLOG(IKG_HITLOG instance);
    partial void InsertLazyLoginMapper(LazyLoginMapper instance);
    partial void UpdateLazyLoginMapper(LazyLoginMapper instance);
    partial void DeleteLazyLoginMapper(LazyLoginMapper instance);
    partial void InsertLazyLogin_Log(LazyLogin_Log instance);
    partial void UpdateLazyLogin_Log(LazyLogin_Log instance);
    partial void DeleteLazyLogin_Log(LazyLogin_Log instance);
    partial void InsertLazyLogin_Moderator(LazyLogin_Moderator instance);
    partial void UpdateLazyLogin_Moderator(LazyLogin_Moderator instance);
    partial void DeleteLazyLogin_Moderator(LazyLogin_Moderator instance);
    partial void InsertLazyLogin_Vote(LazyLogin_Vote instance);
    partial void UpdateLazyLogin_Vote(LazyLogin_Vote instance);
    partial void DeleteLazyLogin_Vote(LazyLogin_Vote instance);
    partial void InsertLazyLogin_Setting(LazyLogin_Setting instance);
    partial void UpdateLazyLogin_Setting(LazyLogin_Setting instance);
    partial void DeleteLazyLogin_Setting(LazyLogin_Setting instance);
    partial void InsertIK_ANA_Comune(IK_ANA_Comune instance);
    partial void UpdateIK_ANA_Comune(IK_ANA_Comune instance);
    partial void DeleteIK_ANA_Comune(IK_ANA_Comune instance);
    partial void InsertIK_ANA_DDL(IK_ANA_DDL instance);
    partial void UpdateIK_ANA_DDL(IK_ANA_DDL instance);
    partial void DeleteIK_ANA_DDL(IK_ANA_DDL instance);
    partial void InsertIK_ANA_Nazione(IK_ANA_Nazione instance);
    partial void UpdateIK_ANA_Nazione(IK_ANA_Nazione instance);
    partial void DeleteIK_ANA_Nazione(IK_ANA_Nazione instance);
    partial void InsertIK_ANA_Provincia(IK_ANA_Provincia instance);
    partial void UpdateIK_ANA_Provincia(IK_ANA_Provincia instance);
    partial void DeleteIK_ANA_Provincia(IK_ANA_Provincia instance);
    partial void InsertIK_ANA_Regione(IK_ANA_Regione instance);
    partial void UpdateIK_ANA_Regione(IK_ANA_Regione instance);
    partial void DeleteIK_ANA_Regione(IK_ANA_Regione instance);
    partial void InsertLazyLogin_AnagraficaMain(LazyLogin_AnagraficaMain instance);
    partial void UpdateLazyLogin_AnagraficaMain(LazyLogin_AnagraficaMain instance);
    partial void DeleteLazyLogin_AnagraficaMain(LazyLogin_AnagraficaMain instance);
    #endregion
		
		public DataContext_Custom(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContext_Custom(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContext_Custom(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContext_Custom(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<aspnet_Application> aspnet_Applications
		{
			get
			{
				return this.GetTable<aspnet_Application>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_Membership> aspnet_Memberships
		{
			get
			{
				return this.GetTable<aspnet_Membership>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_Role> aspnet_Roles
		{
			get
			{
				return this.GetTable<aspnet_Role>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_User> aspnet_Users
		{
			get
			{
				return this.GetTable<aspnet_User>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_UsersInRole> aspnet_UsersInRoles
		{
			get
			{
				return this.GetTable<aspnet_UsersInRole>();
			}
		}
		
		public System.Data.Linq.Table<IKG_HITLOG> IKG_HITLOGs
		{
			get
			{
				return this.GetTable<IKG_HITLOG>();
			}
		}
		
		public System.Data.Linq.Table<LazyLoginMapper> LazyLoginMappers
		{
			get
			{
				return this.GetTable<LazyLoginMapper>();
			}
		}
		
		public System.Data.Linq.Table<LazyLogin_Log> LazyLogin_Logs
		{
			get
			{
				return this.GetTable<LazyLogin_Log>();
			}
		}
		
		public System.Data.Linq.Table<LazyLogin_Moderator> LazyLogin_Moderators
		{
			get
			{
				return this.GetTable<LazyLogin_Moderator>();
			}
		}
		
		public System.Data.Linq.Table<LazyLogin_Vote> LazyLogin_Votes
		{
			get
			{
				return this.GetTable<LazyLogin_Vote>();
			}
		}
		
		public System.Data.Linq.Table<LazyLogin_Setting> LazyLogin_Settings
		{
			get
			{
				return this.GetTable<LazyLogin_Setting>();
			}
		}
		
		public System.Data.Linq.Table<IK_ANA_Comune> IK_ANA_Comunes
		{
			get
			{
				return this.GetTable<IK_ANA_Comune>();
			}
		}
		
		public System.Data.Linq.Table<IK_ANA_DDL> IK_ANA_DDLs
		{
			get
			{
				return this.GetTable<IK_ANA_DDL>();
			}
		}
		
		public System.Data.Linq.Table<IK_ANA_Nazione> IK_ANA_Naziones
		{
			get
			{
				return this.GetTable<IK_ANA_Nazione>();
			}
		}
		
		public System.Data.Linq.Table<IK_ANA_Provincia> IK_ANA_Provincias
		{
			get
			{
				return this.GetTable<IK_ANA_Provincia>();
			}
		}
		
		public System.Data.Linq.Table<IK_ANA_Regione> IK_ANA_Regiones
		{
			get
			{
				return this.GetTable<IK_ANA_Regione>();
			}
		}
		
		public System.Data.Linq.Table<LazyLogin_AnagraficaMain> LazyLogin_AnagraficaMain
		{
			get
			{
				return this.GetTable<LazyLogin_AnagraficaMain>();
			}
		}
	}
	
	[Table(Name="dbo.aspnet_Applications")]
	[DataContract()]
	public partial class aspnet_Application : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ApplicationName;
		
		private string _LoweredApplicationName;
		
		private System.Guid _ApplicationId;
		
		private string _Description;
		
		private EntitySet<aspnet_Membership> _aspnet_Memberships;
		
		private EntitySet<aspnet_Role> _aspnet_Roles;
		
		private EntitySet<aspnet_User> _aspnet_Users;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationNameChanging(string value);
    partial void OnApplicationNameChanged();
    partial void OnLoweredApplicationNameChanging(string value);
    partial void OnLoweredApplicationNameChanged();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public aspnet_Application()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ApplicationName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[DataMember(Order=1)]
		public string ApplicationName
		{
			get
			{
				return this._ApplicationName;
			}
			set
			{
				if ((this._ApplicationName != value))
				{
					this.OnApplicationNameChanging(value);
					this.SendPropertyChanging();
					this._ApplicationName = value;
					this.SendPropertyChanged("ApplicationName");
					this.OnApplicationNameChanged();
				}
			}
		}
		
		[Column(Storage="_LoweredApplicationName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string LoweredApplicationName
		{
			get
			{
				return this._LoweredApplicationName;
			}
			set
			{
				if ((this._LoweredApplicationName != value))
				{
					this.OnLoweredApplicationNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredApplicationName = value;
					this.SendPropertyChanged("LoweredApplicationName");
					this.OnLoweredApplicationNameChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=3)]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(256)")]
		[DataMember(Order=4)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="aspnet_Application_aspnet_Membership", Storage="_aspnet_Memberships", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public EntitySet<aspnet_Membership> aspnet_Memberships
		{
			get
			{
				if ((this.serializing 
							&& (this._aspnet_Memberships.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._aspnet_Memberships;
			}
			set
			{
				this._aspnet_Memberships.Assign(value);
			}
		}
		
		[Association(Name="aspnet_Application_aspnet_Role", Storage="_aspnet_Roles", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		[DataMember(Order=6, EmitDefaultValue=false)]
		public EntitySet<aspnet_Role> aspnet_Roles
		{
			get
			{
				if ((this.serializing 
							&& (this._aspnet_Roles.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._aspnet_Roles;
			}
			set
			{
				this._aspnet_Roles.Assign(value);
			}
		}
		
		[Association(Name="aspnet_Application_aspnet_User", Storage="_aspnet_Users", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		[DataMember(Order=7, EmitDefaultValue=false)]
		public EntitySet<aspnet_User> aspnet_Users
		{
			get
			{
				if ((this.serializing 
							&& (this._aspnet_Users.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._aspnet_Users;
			}
			set
			{
				this._aspnet_Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_aspnet_Memberships(aspnet_Membership entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = this;
		}
		
		private void detach_aspnet_Memberships(aspnet_Membership entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = null;
		}
		
		private void attach_aspnet_Roles(aspnet_Role entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = this;
		}
		
		private void detach_aspnet_Roles(aspnet_Role entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = null;
		}
		
		private void attach_aspnet_Users(aspnet_User entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = this;
		}
		
		private void detach_aspnet_Users(aspnet_User entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = null;
		}
		
		private void Initialize()
		{
			this._aspnet_Memberships = new EntitySet<aspnet_Membership>(new Action<aspnet_Membership>(this.attach_aspnet_Memberships), new Action<aspnet_Membership>(this.detach_aspnet_Memberships));
			this._aspnet_Roles = new EntitySet<aspnet_Role>(new Action<aspnet_Role>(this.attach_aspnet_Roles), new Action<aspnet_Role>(this.detach_aspnet_Roles));
			this._aspnet_Users = new EntitySet<aspnet_User>(new Action<aspnet_User>(this.attach_aspnet_Users), new Action<aspnet_User>(this.detach_aspnet_Users));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.aspnet_Membership")]
	[DataContract()]
	public partial class aspnet_Membership : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _Password;
		
		private int _PasswordFormat;
		
		private string _PasswordSalt;
		
		private string _MobilePIN;
		
		private string _Email;
		
		private string _LoweredEmail;
		
		private string _PasswordQuestion;
		
		private string _PasswordAnswer;
		
		private bool _IsApproved;
		
		private bool _IsLockedOut;
		
		private System.DateTime _CreateDate;
		
		private System.DateTime _LastLoginDate;
		
		private System.DateTime _LastPasswordChangedDate;
		
		private System.DateTime _LastLockoutDate;
		
		private int _FailedPasswordAttemptCount;
		
		private System.DateTime _FailedPasswordAttemptWindowStart;
		
		private int _FailedPasswordAnswerAttemptCount;
		
		private System.DateTime _FailedPasswordAnswerAttemptWindowStart;
		
		private string _Comment;
		
		private EntitySet<LazyLoginMapper> _LazyLoginMappers;
		
		private EntityRef<aspnet_Application> _aspnet_Application;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPasswordFormatChanging(int value);
    partial void OnPasswordFormatChanged();
    partial void OnPasswordSaltChanging(string value);
    partial void OnPasswordSaltChanged();
    partial void OnMobilePINChanging(string value);
    partial void OnMobilePINChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnLoweredEmailChanging(string value);
    partial void OnLoweredEmailChanged();
    partial void OnPasswordQuestionChanging(string value);
    partial void OnPasswordQuestionChanged();
    partial void OnPasswordAnswerChanging(string value);
    partial void OnPasswordAnswerChanged();
    partial void OnIsApprovedChanging(bool value);
    partial void OnIsApprovedChanged();
    partial void OnIsLockedOutChanging(bool value);
    partial void OnIsLockedOutChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnLastLoginDateChanging(System.DateTime value);
    partial void OnLastLoginDateChanged();
    partial void OnLastPasswordChangedDateChanging(System.DateTime value);
    partial void OnLastPasswordChangedDateChanged();
    partial void OnLastLockoutDateChanging(System.DateTime value);
    partial void OnLastLockoutDateChanged();
    partial void OnFailedPasswordAttemptCountChanging(int value);
    partial void OnFailedPasswordAttemptCountChanged();
    partial void OnFailedPasswordAttemptWindowStartChanging(System.DateTime value);
    partial void OnFailedPasswordAttemptWindowStartChanged();
    partial void OnFailedPasswordAnswerAttemptCountChanging(int value);
    partial void OnFailedPasswordAnswerAttemptCountChanged();
    partial void OnFailedPasswordAnswerAttemptWindowStartChanging(System.DateTime value);
    partial void OnFailedPasswordAnswerAttemptWindowStartChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public aspnet_Membership()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		[DataMember(Order=1)]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._aspnet_Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordFormat", DbType="Int NOT NULL")]
		[DataMember(Order=4)]
		public int PasswordFormat
		{
			get
			{
				return this._PasswordFormat;
			}
			set
			{
				if ((this._PasswordFormat != value))
				{
					this.OnPasswordFormatChanging(value);
					this.SendPropertyChanging();
					this._PasswordFormat = value;
					this.SendPropertyChanged("PasswordFormat");
					this.OnPasswordFormatChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordSalt", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		[DataMember(Order=5)]
		public string PasswordSalt
		{
			get
			{
				return this._PasswordSalt;
			}
			set
			{
				if ((this._PasswordSalt != value))
				{
					this.OnPasswordSaltChanging(value);
					this.SendPropertyChanging();
					this._PasswordSalt = value;
					this.SendPropertyChanged("PasswordSalt");
					this.OnPasswordSaltChanged();
				}
			}
		}
		
		[Column(Storage="_MobilePIN", DbType="NVarChar(16)")]
		[DataMember(Order=6)]
		public string MobilePIN
		{
			get
			{
				return this._MobilePIN;
			}
			set
			{
				if ((this._MobilePIN != value))
				{
					this.OnMobilePINChanging(value);
					this.SendPropertyChanging();
					this._MobilePIN = value;
					this.SendPropertyChanged("MobilePIN");
					this.OnMobilePINChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(256)")]
		[DataMember(Order=7)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_LoweredEmail", DbType="NVarChar(256)")]
		[DataMember(Order=8)]
		public string LoweredEmail
		{
			get
			{
				return this._LoweredEmail;
			}
			set
			{
				if ((this._LoweredEmail != value))
				{
					this.OnLoweredEmailChanging(value);
					this.SendPropertyChanging();
					this._LoweredEmail = value;
					this.SendPropertyChanged("LoweredEmail");
					this.OnLoweredEmailChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordQuestion", DbType="NVarChar(256)")]
		[DataMember(Order=9)]
		public string PasswordQuestion
		{
			get
			{
				return this._PasswordQuestion;
			}
			set
			{
				if ((this._PasswordQuestion != value))
				{
					this.OnPasswordQuestionChanging(value);
					this.SendPropertyChanging();
					this._PasswordQuestion = value;
					this.SendPropertyChanged("PasswordQuestion");
					this.OnPasswordQuestionChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordAnswer", DbType="NVarChar(128)")]
		[DataMember(Order=10)]
		public string PasswordAnswer
		{
			get
			{
				return this._PasswordAnswer;
			}
			set
			{
				if ((this._PasswordAnswer != value))
				{
					this.OnPasswordAnswerChanging(value);
					this.SendPropertyChanging();
					this._PasswordAnswer = value;
					this.SendPropertyChanged("PasswordAnswer");
					this.OnPasswordAnswerChanged();
				}
			}
		}
		
		[Column(Storage="_IsApproved", DbType="Bit NOT NULL")]
		[DataMember(Order=11)]
		public bool IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[Column(Storage="_IsLockedOut", DbType="Bit NOT NULL")]
		[DataMember(Order=12)]
		public bool IsLockedOut
		{
			get
			{
				return this._IsLockedOut;
			}
			set
			{
				if ((this._IsLockedOut != value))
				{
					this.OnIsLockedOutChanging(value);
					this.SendPropertyChanging();
					this._IsLockedOut = value;
					this.SendPropertyChanged("IsLockedOut");
					this.OnIsLockedOutChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=13)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastLoginDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=14)]
		public System.DateTime LastLoginDate
		{
			get
			{
				return this._LastLoginDate;
			}
			set
			{
				if ((this._LastLoginDate != value))
				{
					this.OnLastLoginDateChanging(value);
					this.SendPropertyChanging();
					this._LastLoginDate = value;
					this.SendPropertyChanged("LastLoginDate");
					this.OnLastLoginDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastPasswordChangedDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=15)]
		public System.DateTime LastPasswordChangedDate
		{
			get
			{
				return this._LastPasswordChangedDate;
			}
			set
			{
				if ((this._LastPasswordChangedDate != value))
				{
					this.OnLastPasswordChangedDateChanging(value);
					this.SendPropertyChanging();
					this._LastPasswordChangedDate = value;
					this.SendPropertyChanged("LastPasswordChangedDate");
					this.OnLastPasswordChangedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastLockoutDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=16)]
		public System.DateTime LastLockoutDate
		{
			get
			{
				return this._LastLockoutDate;
			}
			set
			{
				if ((this._LastLockoutDate != value))
				{
					this.OnLastLockoutDateChanging(value);
					this.SendPropertyChanging();
					this._LastLockoutDate = value;
					this.SendPropertyChanged("LastLockoutDate");
					this.OnLastLockoutDateChanged();
				}
			}
		}
		
		[Column(Storage="_FailedPasswordAttemptCount", DbType="Int NOT NULL")]
		[DataMember(Order=17)]
		public int FailedPasswordAttemptCount
		{
			get
			{
				return this._FailedPasswordAttemptCount;
			}
			set
			{
				if ((this._FailedPasswordAttemptCount != value))
				{
					this.OnFailedPasswordAttemptCountChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAttemptCount = value;
					this.SendPropertyChanged("FailedPasswordAttemptCount");
					this.OnFailedPasswordAttemptCountChanged();
				}
			}
		}
		
		[Column(Storage="_FailedPasswordAttemptWindowStart", DbType="DateTime NOT NULL")]
		[DataMember(Order=18)]
		public System.DateTime FailedPasswordAttemptWindowStart
		{
			get
			{
				return this._FailedPasswordAttemptWindowStart;
			}
			set
			{
				if ((this._FailedPasswordAttemptWindowStart != value))
				{
					this.OnFailedPasswordAttemptWindowStartChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAttemptWindowStart = value;
					this.SendPropertyChanged("FailedPasswordAttemptWindowStart");
					this.OnFailedPasswordAttemptWindowStartChanged();
				}
			}
		}
		
		[Column(Storage="_FailedPasswordAnswerAttemptCount", DbType="Int NOT NULL")]
		[DataMember(Order=19)]
		public int FailedPasswordAnswerAttemptCount
		{
			get
			{
				return this._FailedPasswordAnswerAttemptCount;
			}
			set
			{
				if ((this._FailedPasswordAnswerAttemptCount != value))
				{
					this.OnFailedPasswordAnswerAttemptCountChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAnswerAttemptCount = value;
					this.SendPropertyChanged("FailedPasswordAnswerAttemptCount");
					this.OnFailedPasswordAnswerAttemptCountChanged();
				}
			}
		}
		
		[Column(Storage="_FailedPasswordAnswerAttemptWindowStart", DbType="DateTime NOT NULL")]
		[DataMember(Order=20)]
		public System.DateTime FailedPasswordAnswerAttemptWindowStart
		{
			get
			{
				return this._FailedPasswordAnswerAttemptWindowStart;
			}
			set
			{
				if ((this._FailedPasswordAnswerAttemptWindowStart != value))
				{
					this.OnFailedPasswordAnswerAttemptWindowStartChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAnswerAttemptWindowStart = value;
					this.SendPropertyChanged("FailedPasswordAnswerAttemptWindowStart");
					this.OnFailedPasswordAnswerAttemptWindowStartChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=21)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Association(Name="aspnet_Membership_LazyLoginMapper", Storage="_LazyLoginMappers", ThisKey="UserId", OtherKey="UserId")]
		[DataMember(Order=22, EmitDefaultValue=false)]
		public EntitySet<LazyLoginMapper> LazyLoginMappers
		{
			get
			{
				if ((this.serializing 
							&& (this._LazyLoginMappers.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._LazyLoginMappers;
			}
			set
			{
				this._LazyLoginMappers.Assign(value);
			}
		}
		
		[Association(Name="aspnet_Application_aspnet_Membership", Storage="_aspnet_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public aspnet_Application aspnet_Application
		{
			get
			{
				return this._aspnet_Application.Entity;
			}
			set
			{
				aspnet_Application previousValue = this._aspnet_Application.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Application.Entity = null;
						previousValue.aspnet_Memberships.Remove(this);
					}
					this._aspnet_Application.Entity = value;
					if ((value != null))
					{
						value.aspnet_Memberships.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Application");
				}
			}
		}
		
		[Association(Name="aspnet_User_aspnet_Membership", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.aspnet_Membership = null;
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.aspnet_Membership = this;
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LazyLoginMappers(LazyLoginMapper entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Membership = this;
		}
		
		private void detach_LazyLoginMappers(LazyLoginMapper entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Membership = null;
		}
		
		private void Initialize()
		{
			this._LazyLoginMappers = new EntitySet<LazyLoginMapper>(new Action<LazyLoginMapper>(this.attach_LazyLoginMappers), new Action<LazyLoginMapper>(this.detach_LazyLoginMappers));
			this._aspnet_Application = default(EntityRef<aspnet_Application>);
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.aspnet_Roles")]
	[DataContract()]
	public partial class aspnet_Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _RoleId;
		
		private string _RoleName;
		
		private string _LoweredRoleName;
		
		private string _Description;
		
		private EntitySet<aspnet_UsersInRole> _aspnet_UsersInRoles;
		
		private EntityRef<aspnet_Application> _aspnet_Application;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnLoweredRoleNameChanging(string value);
    partial void OnLoweredRoleNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public aspnet_Role()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		[DataMember(Order=1)]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._aspnet_Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[Column(Storage="_RoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[Column(Storage="_LoweredRoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[DataMember(Order=4)]
		public string LoweredRoleName
		{
			get
			{
				return this._LoweredRoleName;
			}
			set
			{
				if ((this._LoweredRoleName != value))
				{
					this.OnLoweredRoleNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredRoleName = value;
					this.SendPropertyChanged("LoweredRoleName");
					this.OnLoweredRoleNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(256)")]
		[DataMember(Order=5)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="aspnet_Role_aspnet_UsersInRole", Storage="_aspnet_UsersInRoles", ThisKey="RoleId", OtherKey="RoleId")]
		[DataMember(Order=6, EmitDefaultValue=false)]
		public EntitySet<aspnet_UsersInRole> aspnet_UsersInRoles
		{
			get
			{
				if ((this.serializing 
							&& (this._aspnet_UsersInRoles.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._aspnet_UsersInRoles;
			}
			set
			{
				this._aspnet_UsersInRoles.Assign(value);
			}
		}
		
		[Association(Name="aspnet_Application_aspnet_Role", Storage="_aspnet_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public aspnet_Application aspnet_Application
		{
			get
			{
				return this._aspnet_Application.Entity;
			}
			set
			{
				aspnet_Application previousValue = this._aspnet_Application.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Application.Entity = null;
						previousValue.aspnet_Roles.Remove(this);
					}
					this._aspnet_Application.Entity = value;
					if ((value != null))
					{
						value.aspnet_Roles.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Application");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Role = this;
		}
		
		private void detach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Role = null;
		}
		
		private void Initialize()
		{
			this._aspnet_UsersInRoles = new EntitySet<aspnet_UsersInRole>(new Action<aspnet_UsersInRole>(this.attach_aspnet_UsersInRoles), new Action<aspnet_UsersInRole>(this.detach_aspnet_UsersInRoles));
			this._aspnet_Application = default(EntityRef<aspnet_Application>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.aspnet_Users")]
	[DataContract()]
	public partial class aspnet_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _UserName;
		
		private string _LoweredUserName;
		
		private string _MobileAlias;
		
		private bool _IsAnonymous;
		
		private System.DateTime _LastActivityDate;
		
		private EntityRef<aspnet_Membership> _aspnet_Membership;
		
		private EntitySet<aspnet_UsersInRole> _aspnet_UsersInRoles;
		
		private EntityRef<aspnet_Application> _aspnet_Application;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnMobileAliasChanging(string value);
    partial void OnMobileAliasChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    #endregion
		
		public aspnet_User()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		[DataMember(Order=1)]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._aspnet_Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_LoweredUserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		[DataMember(Order=4)]
		public string LoweredUserName
		{
			get
			{
				return this._LoweredUserName;
			}
			set
			{
				if ((this._LoweredUserName != value))
				{
					this.OnLoweredUserNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredUserName = value;
					this.SendPropertyChanged("LoweredUserName");
					this.OnLoweredUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_MobileAlias", DbType="NVarChar(16)")]
		[DataMember(Order=5)]
		public string MobileAlias
		{
			get
			{
				return this._MobileAlias;
			}
			set
			{
				if ((this._MobileAlias != value))
				{
					this.OnMobileAliasChanging(value);
					this.SendPropertyChanging();
					this._MobileAlias = value;
					this.SendPropertyChanged("MobileAlias");
					this.OnMobileAliasChanged();
				}
			}
		}
		
		[Column(Storage="_IsAnonymous", DbType="Bit NOT NULL")]
		[DataMember(Order=6)]
		public bool IsAnonymous
		{
			get
			{
				return this._IsAnonymous;
			}
			set
			{
				if ((this._IsAnonymous != value))
				{
					this.OnIsAnonymousChanging(value);
					this.SendPropertyChanging();
					this._IsAnonymous = value;
					this.SendPropertyChanged("IsAnonymous");
					this.OnIsAnonymousChanged();
				}
			}
		}
		
		[Column(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
		[DataMember(Order=7)]
		public System.DateTime LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		[Association(Name="aspnet_User_aspnet_Membership", Storage="_aspnet_Membership", ThisKey="UserId", OtherKey="UserId", IsUnique=true, IsForeignKey=false)]
		[DataMember(Order=8, EmitDefaultValue=false)]
		public aspnet_Membership aspnet_Membership
		{
			get
			{
				if ((this.serializing 
							&& (this._aspnet_Membership.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._aspnet_Membership.Entity;
			}
			set
			{
				aspnet_Membership previousValue = this._aspnet_Membership.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Membership.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Membership.Entity = null;
						previousValue.aspnet_User = null;
					}
					this._aspnet_Membership.Entity = value;
					if ((value != null))
					{
						value.aspnet_User = this;
					}
					this.SendPropertyChanged("aspnet_Membership");
				}
			}
		}
		
		[Association(Name="aspnet_User_aspnet_UsersInRole", Storage="_aspnet_UsersInRoles", ThisKey="UserId", OtherKey="UserId")]
		[DataMember(Order=9, EmitDefaultValue=false)]
		public EntitySet<aspnet_UsersInRole> aspnet_UsersInRoles
		{
			get
			{
				if ((this.serializing 
							&& (this._aspnet_UsersInRoles.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._aspnet_UsersInRoles;
			}
			set
			{
				this._aspnet_UsersInRoles.Assign(value);
			}
		}
		
		[Association(Name="aspnet_Application_aspnet_User", Storage="_aspnet_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public aspnet_Application aspnet_Application
		{
			get
			{
				return this._aspnet_Application.Entity;
			}
			set
			{
				aspnet_Application previousValue = this._aspnet_Application.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Application.Entity = null;
						previousValue.aspnet_Users.Remove(this);
					}
					this._aspnet_Application.Entity = value;
					if ((value != null))
					{
						value.aspnet_Users.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Application");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void Initialize()
		{
			this._aspnet_Membership = default(EntityRef<aspnet_Membership>);
			this._aspnet_UsersInRoles = new EntitySet<aspnet_UsersInRole>(new Action<aspnet_UsersInRole>(this.attach_aspnet_UsersInRoles), new Action<aspnet_UsersInRole>(this.detach_aspnet_UsersInRoles));
			this._aspnet_Application = default(EntityRef<aspnet_Application>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.aspnet_UsersInRoles")]
	[DataContract()]
	public partial class aspnet_UsersInRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private System.Guid _RoleId;
		
		private EntityRef<aspnet_Role> _aspnet_Role;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    #endregion
		
		public aspnet_UsersInRole()
		{
			this.Initialize();
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._aspnet_Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[Association(Name="aspnet_Role_aspnet_UsersInRole", Storage="_aspnet_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public aspnet_Role aspnet_Role
		{
			get
			{
				return this._aspnet_Role.Entity;
			}
			set
			{
				aspnet_Role previousValue = this._aspnet_Role.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Role.Entity = null;
						previousValue.aspnet_UsersInRoles.Remove(this);
					}
					this._aspnet_Role.Entity = value;
					if ((value != null))
					{
						value.aspnet_UsersInRoles.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Role");
				}
			}
		}
		
		[Association(Name="aspnet_User_aspnet_UsersInRole", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.aspnet_UsersInRoles.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.aspnet_UsersInRoles.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._aspnet_Role = default(EntityRef<aspnet_Role>);
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.IKG_HITLOG")]
	[DataContract()]
	public partial class IKG_HITLOG : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _wID;
		
		private int _resID;
		
		private System.Nullable<int> _sessionHash;
		
		private System.DateTime _ts;
		
		private System.Nullable<int> _action;
		
		private System.Nullable<int> _code;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnwIDChanging(int value);
    partial void OnwIDChanged();
    partial void OnresIDChanging(int value);
    partial void OnresIDChanged();
    partial void OnsessionHashChanging(System.Nullable<int> value);
    partial void OnsessionHashChanged();
    partial void OntsChanging(System.DateTime value);
    partial void OntsChanged();
    partial void OnactionChanging(System.Nullable<int> value);
    partial void OnactionChanged();
    partial void OncodeChanging(System.Nullable<int> value);
    partial void OncodeChanged();
    #endregion
		
		public IKG_HITLOG()
		{
			this.Initialize();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_wID", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int wID
		{
			get
			{
				return this._wID;
			}
			set
			{
				if ((this._wID != value))
				{
					this.OnwIDChanging(value);
					this.SendPropertyChanging();
					this._wID = value;
					this.SendPropertyChanged("wID");
					this.OnwIDChanged();
				}
			}
		}
		
		[Column(Storage="_resID", DbType="Int NOT NULL")]
		[DataMember(Order=3)]
		public int resID
		{
			get
			{
				return this._resID;
			}
			set
			{
				if ((this._resID != value))
				{
					this.OnresIDChanging(value);
					this.SendPropertyChanging();
					this._resID = value;
					this.SendPropertyChanged("resID");
					this.OnresIDChanged();
				}
			}
		}
		
		[Column(Storage="_sessionHash", DbType="Int")]
		[DataMember(Order=4)]
		public System.Nullable<int> sessionHash
		{
			get
			{
				return this._sessionHash;
			}
			set
			{
				if ((this._sessionHash != value))
				{
					this.OnsessionHashChanging(value);
					this.SendPropertyChanging();
					this._sessionHash = value;
					this.SendPropertyChanged("sessionHash");
					this.OnsessionHashChanged();
				}
			}
		}
		
		[Column(Storage="_ts", DbType="DateTime NOT NULL")]
		[DataMember(Order=5)]
		public System.DateTime ts
		{
			get
			{
				return this._ts;
			}
			set
			{
				if ((this._ts != value))
				{
					this.OntsChanging(value);
					this.SendPropertyChanging();
					this._ts = value;
					this.SendPropertyChanged("ts");
					this.OntsChanged();
				}
			}
		}
		
		[Column(Storage="_action", DbType="Int")]
		[DataMember(Order=6)]
		public System.Nullable<int> action
		{
			get
			{
				return this._action;
			}
			set
			{
				if ((this._action != value))
				{
					this.OnactionChanging(value);
					this.SendPropertyChanging();
					this._action = value;
					this.SendPropertyChanged("action");
					this.OnactionChanged();
				}
			}
		}
		
		[Column(Storage="_code", DbType="Int")]
		[DataMember(Order=7)]
		public System.Nullable<int> code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.LazyLoginMapper")]
	[DataContract()]
	public partial class LazyLoginMapper : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Data.Linq.Binary _ts;
		
		private int _Id;
		
		private System.Guid _UserId;
		
		private bool _flag_active;
		
		private System.DateTime _Creat;
		
		private EntitySet<LazyLogin_Log> _LazyLogin_Logs;
		
		private EntitySet<LazyLogin_Moderator> _LazyLogin_Moderators;
		
		private EntitySet<LazyLogin_Vote> _LazyLogin_Votes;
		
		private EntityRef<LazyLogin_Setting> _LazyLogin_Setting;
		
		private EntityRef<LazyLogin_AnagraficaMain> _LazyLogin_AnagraficaMain;
		
		private EntityRef<aspnet_Membership> _aspnet_Membership;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntsChanging(System.Data.Linq.Binary value);
    partial void OntsChanged();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void Onflag_activeChanging(bool value);
    partial void Onflag_activeChanged();
    partial void OnCreatChanging(System.DateTime value);
    partial void OnCreatChanged();
    #endregion
		
		public LazyLoginMapper()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ts", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public System.Data.Linq.Binary ts
		{
			get
			{
				return this._ts;
			}
			set
			{
				if ((this._ts != value))
				{
					this.OntsChanging(value);
					this.SendPropertyChanging();
					this._ts = value;
					this.SendPropertyChanged("ts");
					this.OntsChanged();
				}
			}
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_Membership.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_flag_active", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public bool flag_active
		{
			get
			{
				return this._flag_active;
			}
			set
			{
				if ((this._flag_active != value))
				{
					this.Onflag_activeChanging(value);
					this.SendPropertyChanging();
					this._flag_active = value;
					this.SendPropertyChanged("flag_active");
					this.Onflag_activeChanged();
				}
			}
		}
		
		[Column(Storage="_Creat", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public System.DateTime Creat
		{
			get
			{
				return this._Creat;
			}
			set
			{
				if ((this._Creat != value))
				{
					this.OnCreatChanging(value);
					this.SendPropertyChanging();
					this._Creat = value;
					this.SendPropertyChanged("Creat");
					this.OnCreatChanged();
				}
			}
		}
		
		[Association(Name="LazyLoginMapper_LazyLogin_Log", Storage="_LazyLogin_Logs", ThisKey="Id", OtherKey="IdLL")]
		[DataMember(Order=6, EmitDefaultValue=false)]
		public EntitySet<LazyLogin_Log> LazyLogin_Logs
		{
			get
			{
				if ((this.serializing 
							&& (this._LazyLogin_Logs.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._LazyLogin_Logs;
			}
			set
			{
				this._LazyLogin_Logs.Assign(value);
			}
		}
		
		[Association(Name="LazyLoginMapper_LazyLogin_Moderator", Storage="_LazyLogin_Moderators", ThisKey="Id", OtherKey="IdLL")]
		[DataMember(Order=7, EmitDefaultValue=false)]
		public EntitySet<LazyLogin_Moderator> LazyLogin_Moderators
		{
			get
			{
				if ((this.serializing 
							&& (this._LazyLogin_Moderators.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._LazyLogin_Moderators;
			}
			set
			{
				this._LazyLogin_Moderators.Assign(value);
			}
		}
		
		[Association(Name="LazyLoginMapper_LazyLogin_Vote", Storage="_LazyLogin_Votes", ThisKey="Id", OtherKey="IdLL")]
		[DataMember(Order=8, EmitDefaultValue=false)]
		public EntitySet<LazyLogin_Vote> LazyLogin_Votes
		{
			get
			{
				if ((this.serializing 
							&& (this._LazyLogin_Votes.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._LazyLogin_Votes;
			}
			set
			{
				this._LazyLogin_Votes.Assign(value);
			}
		}
		
		[Association(Name="LazyLoginMapper_LazyLogin_Setting", Storage="_LazyLogin_Setting", ThisKey="Id", OtherKey="IdLL", IsUnique=true, IsForeignKey=false)]
		[DataMember(Order=9, EmitDefaultValue=false)]
		public LazyLogin_Setting LazyLogin_Setting
		{
			get
			{
				if ((this.serializing 
							&& (this._LazyLogin_Setting.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._LazyLogin_Setting.Entity;
			}
			set
			{
				LazyLogin_Setting previousValue = this._LazyLogin_Setting.Entity;
				if (((previousValue != value) 
							|| (this._LazyLogin_Setting.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LazyLogin_Setting.Entity = null;
						previousValue.LazyLoginMapper = null;
					}
					this._LazyLogin_Setting.Entity = value;
					if ((value != null))
					{
						value.LazyLoginMapper = this;
					}
					this.SendPropertyChanged("LazyLogin_Setting");
				}
			}
		}
		
		[Association(Name="LazyLoginMapper_LazyLogin_AnagraficaMain", Storage="_LazyLogin_AnagraficaMain", ThisKey="Id", OtherKey="IdLL", IsUnique=true, IsForeignKey=false)]
		[DataMember(Order=10, EmitDefaultValue=false)]
		public LazyLogin_AnagraficaMain LazyLogin_AnagraficaMain
		{
			get
			{
				if ((this.serializing 
							&& (this._LazyLogin_AnagraficaMain.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._LazyLogin_AnagraficaMain.Entity;
			}
			set
			{
				LazyLogin_AnagraficaMain previousValue = this._LazyLogin_AnagraficaMain.Entity;
				if (((previousValue != value) 
							|| (this._LazyLogin_AnagraficaMain.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LazyLogin_AnagraficaMain.Entity = null;
						previousValue.LazyLoginMapper = null;
					}
					this._LazyLogin_AnagraficaMain.Entity = value;
					if ((value != null))
					{
						value.LazyLoginMapper = this;
					}
					this.SendPropertyChanged("LazyLogin_AnagraficaMain");
				}
			}
		}
		
		[Association(Name="aspnet_Membership_LazyLoginMapper", Storage="_aspnet_Membership", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_Membership aspnet_Membership
		{
			get
			{
				return this._aspnet_Membership.Entity;
			}
			set
			{
				aspnet_Membership previousValue = this._aspnet_Membership.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Membership.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Membership.Entity = null;
						previousValue.LazyLoginMappers.Remove(this);
					}
					this._aspnet_Membership.Entity = value;
					if ((value != null))
					{
						value.LazyLoginMappers.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Membership");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LazyLogin_Logs(LazyLogin_Log entity)
		{
			this.SendPropertyChanging();
			entity.LazyLoginMapper = this;
		}
		
		private void detach_LazyLogin_Logs(LazyLogin_Log entity)
		{
			this.SendPropertyChanging();
			entity.LazyLoginMapper = null;
		}
		
		private void attach_LazyLogin_Moderators(LazyLogin_Moderator entity)
		{
			this.SendPropertyChanging();
			entity.LazyLoginMapper = this;
		}
		
		private void detach_LazyLogin_Moderators(LazyLogin_Moderator entity)
		{
			this.SendPropertyChanging();
			entity.LazyLoginMapper = null;
		}
		
		private void attach_LazyLogin_Votes(LazyLogin_Vote entity)
		{
			this.SendPropertyChanging();
			entity.LazyLoginMapper = this;
		}
		
		private void detach_LazyLogin_Votes(LazyLogin_Vote entity)
		{
			this.SendPropertyChanging();
			entity.LazyLoginMapper = null;
		}
		
		private void Initialize()
		{
			this._LazyLogin_Logs = new EntitySet<LazyLogin_Log>(new Action<LazyLogin_Log>(this.attach_LazyLogin_Logs), new Action<LazyLogin_Log>(this.detach_LazyLogin_Logs));
			this._LazyLogin_Moderators = new EntitySet<LazyLogin_Moderator>(new Action<LazyLogin_Moderator>(this.attach_LazyLogin_Moderators), new Action<LazyLogin_Moderator>(this.detach_LazyLogin_Moderators));
			this._LazyLogin_Votes = new EntitySet<LazyLogin_Vote>(new Action<LazyLogin_Vote>(this.attach_LazyLogin_Votes), new Action<LazyLogin_Vote>(this.detach_LazyLogin_Votes));
			this._LazyLogin_Setting = default(EntityRef<LazyLogin_Setting>);
			this._LazyLogin_AnagraficaMain = default(EntityRef<LazyLogin_AnagraficaMain>);
			this._aspnet_Membership = default(EntityRef<aspnet_Membership>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.LazyLogin_Log")]
	[DataContract()]
	public partial class LazyLogin_Log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdLL;
		
		private System.DateTime _Date;
		
		private System.Nullable<int> _Code;
		
		private System.Nullable<int> _Value;
		
		private string _Text;
		
		private EntityRef<LazyLoginMapper> _LazyLoginMapper;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdLLChanging(int value);
    partial void OnIdLLChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnCodeChanging(System.Nullable<int> value);
    partial void OnCodeChanged();
    partial void OnValueChanging(System.Nullable<int> value);
    partial void OnValueChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public LazyLogin_Log()
		{
			this.Initialize();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdLL", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int IdLL
		{
			get
			{
				return this._IdLL;
			}
			set
			{
				if ((this._IdLL != value))
				{
					if (this._LazyLoginMapper.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdLLChanging(value);
					this.SendPropertyChanging();
					this._IdLL = value;
					this.SendPropertyChanged("IdLL");
					this.OnIdLLChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		[DataMember(Order=3)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="Int")]
		[DataMember(Order=4)]
		public System.Nullable<int> Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="Int")]
		[DataMember(Order=5)]
		public System.Nullable<int> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="NVarChar(MAX)")]
		[DataMember(Order=6)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Association(Name="LazyLoginMapper_LazyLogin_Log", Storage="_LazyLoginMapper", ThisKey="IdLL", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LazyLoginMapper LazyLoginMapper
		{
			get
			{
				return this._LazyLoginMapper.Entity;
			}
			set
			{
				LazyLoginMapper previousValue = this._LazyLoginMapper.Entity;
				if (((previousValue != value) 
							|| (this._LazyLoginMapper.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LazyLoginMapper.Entity = null;
						previousValue.LazyLogin_Logs.Remove(this);
					}
					this._LazyLoginMapper.Entity = value;
					if ((value != null))
					{
						value.LazyLogin_Logs.Add(this);
						this._IdLL = value.Id;
					}
					else
					{
						this._IdLL = default(int);
					}
					this.SendPropertyChanged("LazyLoginMapper");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._LazyLoginMapper = default(EntityRef<LazyLoginMapper>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.LazyLogin_Moderator")]
	[DataContract()]
	public partial class LazyLogin_Moderator : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Data.Linq.Binary _ts;
		
		private int _QuestionId;
		
		private int _IdLL;
		
		private System.Nullable<int> _rNode;
		
		private int _Status;
		
		private System.DateTime _Creat;
		
		private System.DateTime _Modif;
		
		private string _Title;
		
		private string _Text;
		
		private EntityRef<LazyLoginMapper> _LazyLoginMapper;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntsChanging(System.Data.Linq.Binary value);
    partial void OntsChanged();
    partial void OnQuestionIdChanging(int value);
    partial void OnQuestionIdChanged();
    partial void OnIdLLChanging(int value);
    partial void OnIdLLChanged();
    partial void OnrNodeChanging(System.Nullable<int> value);
    partial void OnrNodeChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnCreatChanging(System.DateTime value);
    partial void OnCreatChanged();
    partial void OnModifChanging(System.DateTime value);
    partial void OnModifChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public LazyLogin_Moderator()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ts", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public System.Data.Linq.Binary ts
		{
			get
			{
				return this._ts;
			}
			set
			{
				if ((this._ts != value))
				{
					this.OntsChanging(value);
					this.SendPropertyChanging();
					this._ts = value;
					this.SendPropertyChanged("ts");
					this.OntsChanged();
				}
			}
		}
		
		[Column(Storage="_QuestionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdLL", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public int IdLL
		{
			get
			{
				return this._IdLL;
			}
			set
			{
				if ((this._IdLL != value))
				{
					if (this._LazyLoginMapper.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdLLChanging(value);
					this.SendPropertyChanging();
					this._IdLL = value;
					this.SendPropertyChanged("IdLL");
					this.OnIdLLChanged();
				}
			}
		}
		
		[Column(Storage="_rNode", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public System.Nullable<int> rNode
		{
			get
			{
				return this._rNode;
			}
			set
			{
				if ((this._rNode != value))
				{
					this.OnrNodeChanging(value);
					this.SendPropertyChanging();
					this._rNode = value;
					this.SendPropertyChanged("rNode");
					this.OnrNodeChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_Creat", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public System.DateTime Creat
		{
			get
			{
				return this._Creat;
			}
			set
			{
				if ((this._Creat != value))
				{
					this.OnCreatChanging(value);
					this.SendPropertyChanging();
					this._Creat = value;
					this.SendPropertyChanged("Creat");
					this.OnCreatChanged();
				}
			}
		}
		
		[Column(Storage="_Modif", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=7)]
		public System.DateTime Modif
		{
			get
			{
				return this._Modif;
			}
			set
			{
				if ((this._Modif != value))
				{
					this.OnModifChanging(value);
					this.SendPropertyChanging();
					this._Modif = value;
					this.SendPropertyChanged("Modif");
					this.OnModifChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(450)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=8)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=9)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Association(Name="LazyLoginMapper_LazyLogin_Moderator", Storage="_LazyLoginMapper", ThisKey="IdLL", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LazyLoginMapper LazyLoginMapper
		{
			get
			{
				return this._LazyLoginMapper.Entity;
			}
			set
			{
				LazyLoginMapper previousValue = this._LazyLoginMapper.Entity;
				if (((previousValue != value) 
							|| (this._LazyLoginMapper.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LazyLoginMapper.Entity = null;
						previousValue.LazyLogin_Moderators.Remove(this);
					}
					this._LazyLoginMapper.Entity = value;
					if ((value != null))
					{
						value.LazyLogin_Moderators.Add(this);
						this._IdLL = value.Id;
					}
					else
					{
						this._IdLL = default(int);
					}
					this.SendPropertyChanged("LazyLoginMapper");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._LazyLoginMapper = default(EntityRef<LazyLoginMapper>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.LazyLogin_Vote")]
	[DataContract()]
	public partial class LazyLogin_Vote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Data.Linq.Binary _ts;
		
		private int _IdLL;
		
		private int _rNode;
		
		private int _Category;
		
		private System.DateTime _Date;
		
		private System.Nullable<int> _Value;
		
		private string _Text;
		
		private EntityRef<LazyLoginMapper> _LazyLoginMapper;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntsChanging(System.Data.Linq.Binary value);
    partial void OntsChanged();
    partial void OnIdLLChanging(int value);
    partial void OnIdLLChanged();
    partial void OnrNodeChanging(int value);
    partial void OnrNodeChanged();
    partial void OnCategoryChanging(int value);
    partial void OnCategoryChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnValueChanging(System.Nullable<int> value);
    partial void OnValueChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public LazyLogin_Vote()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ts", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public System.Data.Linq.Binary ts
		{
			get
			{
				return this._ts;
			}
			set
			{
				if ((this._ts != value))
				{
					this.OntsChanging(value);
					this.SendPropertyChanging();
					this._ts = value;
					this.SendPropertyChanged("ts");
					this.OntsChanged();
				}
			}
		}
		
		[Column(Storage="_IdLL", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int IdLL
		{
			get
			{
				return this._IdLL;
			}
			set
			{
				if ((this._IdLL != value))
				{
					if (this._LazyLoginMapper.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdLLChanging(value);
					this.SendPropertyChanging();
					this._IdLL = value;
					this.SendPropertyChanged("IdLL");
					this.OnIdLLChanged();
				}
			}
		}
		
		[Column(Storage="_rNode", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public int rNode
		{
			get
			{
				return this._rNode;
			}
			set
			{
				if ((this._rNode != value))
				{
					this.OnrNodeChanging(value);
					this.SendPropertyChanging();
					this._rNode = value;
					this.SendPropertyChanged("rNode");
					this.OnrNodeChanged();
				}
			}
		}
		
		[Column(Storage="_Category", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public int Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public System.Nullable<int> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=7)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Association(Name="LazyLoginMapper_LazyLogin_Vote", Storage="_LazyLoginMapper", ThisKey="IdLL", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LazyLoginMapper LazyLoginMapper
		{
			get
			{
				return this._LazyLoginMapper.Entity;
			}
			set
			{
				LazyLoginMapper previousValue = this._LazyLoginMapper.Entity;
				if (((previousValue != value) 
							|| (this._LazyLoginMapper.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LazyLoginMapper.Entity = null;
						previousValue.LazyLogin_Votes.Remove(this);
					}
					this._LazyLoginMapper.Entity = value;
					if ((value != null))
					{
						value.LazyLogin_Votes.Add(this);
						this._IdLL = value.Id;
					}
					else
					{
						this._IdLL = default(int);
					}
					this.SendPropertyChanged("LazyLoginMapper");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._LazyLoginMapper = default(EntityRef<LazyLoginMapper>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.LazyLogin_Setting")]
	[DataContract()]
	public partial class LazyLogin_Setting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Data.Linq.Binary _ts;
		
		private int _IdLL;
		
		private System.DateTime _Modif;
		
		private string _LanguageSite;
		
		private EntityRef<LazyLoginMapper> _LazyLoginMapper;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntsChanging(System.Data.Linq.Binary value);
    partial void OntsChanged();
    partial void OnIdLLChanging(int value);
    partial void OnIdLLChanged();
    partial void OnModifChanging(System.DateTime value);
    partial void OnModifChanged();
    partial void OnLanguageSiteChanging(string value);
    partial void OnLanguageSiteChanged();
    #endregion
		
		public LazyLogin_Setting()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ts", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public System.Data.Linq.Binary ts
		{
			get
			{
				return this._ts;
			}
			set
			{
				if ((this._ts != value))
				{
					this.OntsChanging(value);
					this.SendPropertyChanging();
					this._ts = value;
					this.SendPropertyChanged("ts");
					this.OntsChanged();
				}
			}
		}
		
		[Column(Storage="_IdLL", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int IdLL
		{
			get
			{
				return this._IdLL;
			}
			set
			{
				if ((this._IdLL != value))
				{
					if (this._LazyLoginMapper.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdLLChanging(value);
					this.SendPropertyChanging();
					this._IdLL = value;
					this.SendPropertyChanged("IdLL");
					this.OnIdLLChanged();
				}
			}
		}
		
		[Column(Storage="_Modif", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public System.DateTime Modif
		{
			get
			{
				return this._Modif;
			}
			set
			{
				if ((this._Modif != value))
				{
					this.OnModifChanging(value);
					this.SendPropertyChanging();
					this._Modif = value;
					this.SendPropertyChanged("Modif");
					this.OnModifChanged();
				}
			}
		}
		
		[Column(Storage="_LanguageSite", DbType="VarChar(2)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public string LanguageSite
		{
			get
			{
				return this._LanguageSite;
			}
			set
			{
				if ((this._LanguageSite != value))
				{
					this.OnLanguageSiteChanging(value);
					this.SendPropertyChanging();
					this._LanguageSite = value;
					this.SendPropertyChanged("LanguageSite");
					this.OnLanguageSiteChanged();
				}
			}
		}
		
		[Association(Name="LazyLoginMapper_LazyLogin_Setting", Storage="_LazyLoginMapper", ThisKey="IdLL", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LazyLoginMapper LazyLoginMapper
		{
			get
			{
				return this._LazyLoginMapper.Entity;
			}
			set
			{
				LazyLoginMapper previousValue = this._LazyLoginMapper.Entity;
				if (((previousValue != value) 
							|| (this._LazyLoginMapper.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LazyLoginMapper.Entity = null;
						previousValue.LazyLogin_Setting = null;
					}
					this._LazyLoginMapper.Entity = value;
					if ((value != null))
					{
						value.LazyLogin_Setting = this;
						this._IdLL = value.Id;
					}
					else
					{
						this._IdLL = default(int);
					}
					this.SendPropertyChanged("LazyLoginMapper");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._LazyLoginMapper = default(EntityRef<LazyLoginMapper>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.IK_ANA_Comune")]
	[DataContract()]
	public partial class IK_ANA_Comune : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Nome;
		
		private System.Nullable<int> _ProvinciaID;
		
		private EntityRef<IK_ANA_Provincia> _IK_ANA_Provincia;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    partial void OnProvinciaIDChanging(System.Nullable<int> value);
    partial void OnProvinciaIDChanged();
    #endregion
		
		public IK_ANA_Comune()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Nome", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
		
		[Column(Storage="_ProvinciaID", DbType="Int")]
		[DataMember(Order=3)]
		public System.Nullable<int> ProvinciaID
		{
			get
			{
				return this._ProvinciaID;
			}
			set
			{
				if ((this._ProvinciaID != value))
				{
					if (this._IK_ANA_Provincia.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProvinciaIDChanging(value);
					this.SendPropertyChanging();
					this._ProvinciaID = value;
					this.SendPropertyChanged("ProvinciaID");
					this.OnProvinciaIDChanged();
				}
			}
		}
		
		[Association(Name="IK_ANA_Provincia_IK_ANA_Comune", Storage="_IK_ANA_Provincia", ThisKey="ProvinciaID", OtherKey="ID", IsForeignKey=true)]
		public IK_ANA_Provincia IK_ANA_Provincia
		{
			get
			{
				return this._IK_ANA_Provincia.Entity;
			}
			set
			{
				IK_ANA_Provincia previousValue = this._IK_ANA_Provincia.Entity;
				if (((previousValue != value) 
							|| (this._IK_ANA_Provincia.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IK_ANA_Provincia.Entity = null;
						previousValue.IK_ANA_Comunes.Remove(this);
					}
					this._IK_ANA_Provincia.Entity = value;
					if ((value != null))
					{
						value.IK_ANA_Comunes.Add(this);
						this._ProvinciaID = value.ID;
					}
					else
					{
						this._ProvinciaID = default(Nullable<int>);
					}
					this.SendPropertyChanged("IK_ANA_Provincia");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._IK_ANA_Provincia = default(EntityRef<IK_ANA_Provincia>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.IK_ANA_DDL")]
	[DataContract()]
	public partial class IK_ANA_DDL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _DDL;
		
		private string _code;
		
		private string _value;
		
		private System.Nullable<double> _priority;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDDLChanging(string value);
    partial void OnDDLChanged();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void OnpriorityChanging(System.Nullable<double> value);
    partial void OnpriorityChanged();
    #endregion
		
		public IK_ANA_DDL()
		{
			this.Initialize();
		}
		
		[Column(Storage="_DDL", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=1)]
		public string DDL
		{
			get
			{
				return this._DDL;
			}
			set
			{
				if ((this._DDL != value))
				{
					this.OnDDLChanging(value);
					this.SendPropertyChanging();
					this._DDL = value;
					this.SendPropertyChanged("DDL");
					this.OnDDLChanged();
				}
			}
		}
		
		[Column(Storage="_code", DbType="VarChar(250) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		[DataMember(Order=2)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[Column(Storage="_value", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[Column(Storage="_priority", DbType="Float")]
		[DataMember(Order=4)]
		public System.Nullable<double> priority
		{
			get
			{
				return this._priority;
			}
			set
			{
				if ((this._priority != value))
				{
					this.OnpriorityChanging(value);
					this.SendPropertyChanging();
					this._priority = value;
					this.SendPropertyChanged("priority");
					this.OnpriorityChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.IK_ANA_Nazione")]
	[DataContract()]
	public partial class IK_ANA_Nazione : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Code;
		
		private string _Nome;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    #endregion
		
		public IK_ANA_Nazione()
		{
			this.Initialize();
		}
		
		[Column(Storage="_Code", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		[DataMember(Order=1)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Nome", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.IK_ANA_Provincia")]
	[DataContract()]
	public partial class IK_ANA_Provincia : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Nome;
		
		private string _Sigla;
		
		private System.Nullable<int> _RegioneID;
		
		private EntitySet<IK_ANA_Comune> _IK_ANA_Comunes;
		
		private EntityRef<IK_ANA_Regione> _IK_ANA_Regione;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    partial void OnSiglaChanging(string value);
    partial void OnSiglaChanged();
    partial void OnRegioneIDChanging(System.Nullable<int> value);
    partial void OnRegioneIDChanged();
    #endregion
		
		public IK_ANA_Provincia()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Nome", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
		
		[Column(Storage="_Sigla", DbType="NVarChar(2) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string Sigla
		{
			get
			{
				return this._Sigla;
			}
			set
			{
				if ((this._Sigla != value))
				{
					this.OnSiglaChanging(value);
					this.SendPropertyChanging();
					this._Sigla = value;
					this.SendPropertyChanged("Sigla");
					this.OnSiglaChanged();
				}
			}
		}
		
		[Column(Storage="_RegioneID", DbType="Int")]
		[DataMember(Order=4)]
		public System.Nullable<int> RegioneID
		{
			get
			{
				return this._RegioneID;
			}
			set
			{
				if ((this._RegioneID != value))
				{
					if (this._IK_ANA_Regione.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegioneIDChanging(value);
					this.SendPropertyChanging();
					this._RegioneID = value;
					this.SendPropertyChanged("RegioneID");
					this.OnRegioneIDChanged();
				}
			}
		}
		
		[Association(Name="IK_ANA_Provincia_IK_ANA_Comune", Storage="_IK_ANA_Comunes", ThisKey="ID", OtherKey="ProvinciaID")]
		[DataMember(Order=5, EmitDefaultValue=false)]
		public EntitySet<IK_ANA_Comune> IK_ANA_Comunes
		{
			get
			{
				if ((this.serializing 
							&& (this._IK_ANA_Comunes.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IK_ANA_Comunes;
			}
			set
			{
				this._IK_ANA_Comunes.Assign(value);
			}
		}
		
		[Association(Name="IK_ANA_Regione_IK_ANA_Provincia", Storage="_IK_ANA_Regione", ThisKey="RegioneID", OtherKey="ID", IsForeignKey=true)]
		public IK_ANA_Regione IK_ANA_Regione
		{
			get
			{
				return this._IK_ANA_Regione.Entity;
			}
			set
			{
				IK_ANA_Regione previousValue = this._IK_ANA_Regione.Entity;
				if (((previousValue != value) 
							|| (this._IK_ANA_Regione.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IK_ANA_Regione.Entity = null;
						previousValue.IK_ANA_Provincias.Remove(this);
					}
					this._IK_ANA_Regione.Entity = value;
					if ((value != null))
					{
						value.IK_ANA_Provincias.Add(this);
						this._RegioneID = value.ID;
					}
					else
					{
						this._RegioneID = default(Nullable<int>);
					}
					this.SendPropertyChanged("IK_ANA_Regione");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IK_ANA_Comunes(IK_ANA_Comune entity)
		{
			this.SendPropertyChanging();
			entity.IK_ANA_Provincia = this;
		}
		
		private void detach_IK_ANA_Comunes(IK_ANA_Comune entity)
		{
			this.SendPropertyChanging();
			entity.IK_ANA_Provincia = null;
		}
		
		private void Initialize()
		{
			this._IK_ANA_Comunes = new EntitySet<IK_ANA_Comune>(new Action<IK_ANA_Comune>(this.attach_IK_ANA_Comunes), new Action<IK_ANA_Comune>(this.detach_IK_ANA_Comunes));
			this._IK_ANA_Regione = default(EntityRef<IK_ANA_Regione>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.IK_ANA_Regione")]
	[DataContract()]
	public partial class IK_ANA_Regione : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Nome;
		
		private EntitySet<IK_ANA_Provincia> _IK_ANA_Provincias;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    #endregion
		
		public IK_ANA_Regione()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Nome", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
		
		[Association(Name="IK_ANA_Regione_IK_ANA_Provincia", Storage="_IK_ANA_Provincias", ThisKey="ID", OtherKey="RegioneID")]
		[DataMember(Order=3, EmitDefaultValue=false)]
		public EntitySet<IK_ANA_Provincia> IK_ANA_Provincias
		{
			get
			{
				if ((this.serializing 
							&& (this._IK_ANA_Provincias.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._IK_ANA_Provincias;
			}
			set
			{
				this._IK_ANA_Provincias.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IK_ANA_Provincias(IK_ANA_Provincia entity)
		{
			this.SendPropertyChanging();
			entity.IK_ANA_Regione = this;
		}
		
		private void detach_IK_ANA_Provincias(IK_ANA_Provincia entity)
		{
			this.SendPropertyChanging();
			entity.IK_ANA_Regione = null;
		}
		
		private void Initialize()
		{
			this._IK_ANA_Provincias = new EntitySet<IK_ANA_Provincia>(new Action<IK_ANA_Provincia>(this.attach_IK_ANA_Provincias), new Action<IK_ANA_Provincia>(this.detach_IK_ANA_Provincias));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.LazyLogin_AnagraficaMain")]
	[DataContract()]
	public partial class LazyLogin_AnagraficaMain : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Data.Linq.Binary _ts;
		
		private int _IdLL;
		
		private System.Nullable<int> _Type;
		
		private System.DateTime _Creat;
		
		private System.DateTime _Modif;
		
		private string _EMail;
		
		private string _Nome;
		
		private string _Cognome;
		
		private string _FullName;
		
		private System.Nullable<System.DateTime> _DataNascita;
		
		private System.Nullable<char> _Sesso;
		
		private bool _flag_Privacy;
		
		private System.Nullable<bool> _flag_PrivacyCommerciale;
		
		private string _PIVA;
		
		private string _CF;
		
		private string _Telefono;
		
		private string _Telefono2;
		
		private string _Nazione;
		
		private string _Provincia;
		
		private string _Comune;
		
		private string _CAP;
		
		private string _Indirizzo;
		
		private string _AddressFull;
		
		private bool _flag_Geocoded;
		
		private string _AddressGEO;
		
		private System.Nullable<double> _Latitude;
		
		private System.Nullable<double> _Longitude;
		
		private string _FacebookUserName;
		
		private string _Data;
		
		private EntityRef<LazyLoginMapper> _LazyLoginMapper;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntsChanging(System.Data.Linq.Binary value);
    partial void OntsChanged();
    partial void OnIdLLChanging(int value);
    partial void OnIdLLChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    partial void OnCreatChanging(System.DateTime value);
    partial void OnCreatChanged();
    partial void OnModifChanging(System.DateTime value);
    partial void OnModifChanged();
    partial void OnEMailChanging(string value);
    partial void OnEMailChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    partial void OnCognomeChanging(string value);
    partial void OnCognomeChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnDataNascitaChanging(System.Nullable<System.DateTime> value);
    partial void OnDataNascitaChanged();
    partial void OnSessoChanging(System.Nullable<char> value);
    partial void OnSessoChanged();
    partial void Onflag_PrivacyChanging(bool value);
    partial void Onflag_PrivacyChanged();
    partial void Onflag_PrivacyCommercialeChanging(System.Nullable<bool> value);
    partial void Onflag_PrivacyCommercialeChanged();
    partial void OnPIVAChanging(string value);
    partial void OnPIVAChanged();
    partial void OnCFChanging(string value);
    partial void OnCFChanged();
    partial void OnTelefonoChanging(string value);
    partial void OnTelefonoChanged();
    partial void OnTelefono2Changing(string value);
    partial void OnTelefono2Changed();
    partial void OnNazioneChanging(string value);
    partial void OnNazioneChanged();
    partial void OnProvinciaChanging(string value);
    partial void OnProvinciaChanged();
    partial void OnComuneChanging(string value);
    partial void OnComuneChanged();
    partial void OnCAPChanging(string value);
    partial void OnCAPChanged();
    partial void OnIndirizzoChanging(string value);
    partial void OnIndirizzoChanged();
    partial void OnAddressFullChanging(string value);
    partial void OnAddressFullChanged();
    partial void Onflag_GeocodedChanging(bool value);
    partial void Onflag_GeocodedChanged();
    partial void OnAddressGEOChanging(string value);
    partial void OnAddressGEOChanged();
    partial void OnLatitudeChanging(System.Nullable<double> value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(System.Nullable<double> value);
    partial void OnLongitudeChanged();
    partial void OnFacebookUserNameChanging(string value);
    partial void OnFacebookUserNameChanged();
    partial void OnDataChanging(string value);
    partial void OnDataChanged();
    #endregion
		
		public LazyLogin_AnagraficaMain()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ts", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=1)]
		public System.Data.Linq.Binary ts
		{
			get
			{
				return this._ts;
			}
			set
			{
				if ((this._ts != value))
				{
					this.OntsChanging(value);
					this.SendPropertyChanging();
					this._ts = value;
					this.SendPropertyChanged("ts");
					this.OntsChanged();
				}
			}
		}
		
		[Column(Storage="_IdLL", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=2)]
		public int IdLL
		{
			get
			{
				return this._IdLL;
			}
			set
			{
				if ((this._IdLL != value))
				{
					if (this._LazyLoginMapper.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdLLChanging(value);
					this.SendPropertyChanging();
					this._IdLL = value;
					this.SendPropertyChanged("IdLL");
					this.OnIdLLChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=3)]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Creat", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=4)]
		public System.DateTime Creat
		{
			get
			{
				return this._Creat;
			}
			set
			{
				if ((this._Creat != value))
				{
					this.OnCreatChanging(value);
					this.SendPropertyChanging();
					this._Creat = value;
					this.SendPropertyChanged("Creat");
					this.OnCreatChanged();
				}
			}
		}
		
		[Column(Storage="_Modif", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=5)]
		public System.DateTime Modif
		{
			get
			{
				return this._Modif;
			}
			set
			{
				if ((this._Modif != value))
				{
					this.OnModifChanging(value);
					this.SendPropertyChanging();
					this._Modif = value;
					this.SendPropertyChanged("Modif");
					this.OnModifChanged();
				}
			}
		}
		
		[Column(Storage="_EMail", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=6)]
		public string EMail
		{
			get
			{
				return this._EMail;
			}
			set
			{
				if ((this._EMail != value))
				{
					this.OnEMailChanging(value);
					this.SendPropertyChanging();
					this._EMail = value;
					this.SendPropertyChanged("EMail");
					this.OnEMailChanged();
				}
			}
		}
		
		[Column(Storage="_Nome", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=7)]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
		
		[Column(Storage="_Cognome", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=8)]
		public string Cognome
		{
			get
			{
				return this._Cognome;
			}
			set
			{
				if ((this._Cognome != value))
				{
					this.OnCognomeChanging(value);
					this.SendPropertyChanging();
					this._Cognome = value;
					this.SendPropertyChanged("Cognome");
					this.OnCognomeChanged();
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=9)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[Column(Storage="_DataNascita", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=10)]
		public System.Nullable<System.DateTime> DataNascita
		{
			get
			{
				return this._DataNascita;
			}
			set
			{
				if ((this._DataNascita != value))
				{
					this.OnDataNascitaChanging(value);
					this.SendPropertyChanging();
					this._DataNascita = value;
					this.SendPropertyChanged("DataNascita");
					this.OnDataNascitaChanged();
				}
			}
		}
		
		[Column(Storage="_Sesso", DbType="Char(1)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=11)]
		public System.Nullable<char> Sesso
		{
			get
			{
				return this._Sesso;
			}
			set
			{
				if ((this._Sesso != value))
				{
					this.OnSessoChanging(value);
					this.SendPropertyChanging();
					this._Sesso = value;
					this.SendPropertyChanged("Sesso");
					this.OnSessoChanged();
				}
			}
		}
		
		[Column(Storage="_flag_Privacy", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=12)]
		public bool flag_Privacy
		{
			get
			{
				return this._flag_Privacy;
			}
			set
			{
				if ((this._flag_Privacy != value))
				{
					this.Onflag_PrivacyChanging(value);
					this.SendPropertyChanging();
					this._flag_Privacy = value;
					this.SendPropertyChanged("flag_Privacy");
					this.Onflag_PrivacyChanged();
				}
			}
		}
		
		[Column(Storage="_flag_PrivacyCommerciale", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=13)]
		public System.Nullable<bool> flag_PrivacyCommerciale
		{
			get
			{
				return this._flag_PrivacyCommerciale;
			}
			set
			{
				if ((this._flag_PrivacyCommerciale != value))
				{
					this.Onflag_PrivacyCommercialeChanging(value);
					this.SendPropertyChanging();
					this._flag_PrivacyCommerciale = value;
					this.SendPropertyChanged("flag_PrivacyCommerciale");
					this.Onflag_PrivacyCommercialeChanged();
				}
			}
		}
		
		[Column(Storage="_PIVA", DbType="VarChar(20)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=14)]
		public string PIVA
		{
			get
			{
				return this._PIVA;
			}
			set
			{
				if ((this._PIVA != value))
				{
					this.OnPIVAChanging(value);
					this.SendPropertyChanging();
					this._PIVA = value;
					this.SendPropertyChanged("PIVA");
					this.OnPIVAChanged();
				}
			}
		}
		
		[Column(Storage="_CF", DbType="VarChar(16)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=15)]
		public string CF
		{
			get
			{
				return this._CF;
			}
			set
			{
				if ((this._CF != value))
				{
					this.OnCFChanging(value);
					this.SendPropertyChanging();
					this._CF = value;
					this.SendPropertyChanged("CF");
					this.OnCFChanged();
				}
			}
		}
		
		[Column(Storage="_Telefono", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=16)]
		public string Telefono
		{
			get
			{
				return this._Telefono;
			}
			set
			{
				if ((this._Telefono != value))
				{
					this.OnTelefonoChanging(value);
					this.SendPropertyChanging();
					this._Telefono = value;
					this.SendPropertyChanged("Telefono");
					this.OnTelefonoChanged();
				}
			}
		}
		
		[Column(Storage="_Telefono2", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=17)]
		public string Telefono2
		{
			get
			{
				return this._Telefono2;
			}
			set
			{
				if ((this._Telefono2 != value))
				{
					this.OnTelefono2Changing(value);
					this.SendPropertyChanging();
					this._Telefono2 = value;
					this.SendPropertyChanged("Telefono2");
					this.OnTelefono2Changed();
				}
			}
		}
		
		[Column(Storage="_Nazione", DbType="VarChar(2)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=18)]
		public string Nazione
		{
			get
			{
				return this._Nazione;
			}
			set
			{
				if ((this._Nazione != value))
				{
					this.OnNazioneChanging(value);
					this.SendPropertyChanging();
					this._Nazione = value;
					this.SendPropertyChanged("Nazione");
					this.OnNazioneChanged();
				}
			}
		}
		
		[Column(Storage="_Provincia", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=19)]
		public string Provincia
		{
			get
			{
				return this._Provincia;
			}
			set
			{
				if ((this._Provincia != value))
				{
					this.OnProvinciaChanging(value);
					this.SendPropertyChanging();
					this._Provincia = value;
					this.SendPropertyChanged("Provincia");
					this.OnProvinciaChanged();
				}
			}
		}
		
		[Column(Storage="_Comune", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=20)]
		public string Comune
		{
			get
			{
				return this._Comune;
			}
			set
			{
				if ((this._Comune != value))
				{
					this.OnComuneChanging(value);
					this.SendPropertyChanging();
					this._Comune = value;
					this.SendPropertyChanged("Comune");
					this.OnComuneChanged();
				}
			}
		}
		
		[Column(Storage="_CAP", DbType="VarChar(5)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=21)]
		public string CAP
		{
			get
			{
				return this._CAP;
			}
			set
			{
				if ((this._CAP != value))
				{
					this.OnCAPChanging(value);
					this.SendPropertyChanging();
					this._CAP = value;
					this.SendPropertyChanged("CAP");
					this.OnCAPChanged();
				}
			}
		}
		
		[Column(Storage="_Indirizzo", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=22)]
		public string Indirizzo
		{
			get
			{
				return this._Indirizzo;
			}
			set
			{
				if ((this._Indirizzo != value))
				{
					this.OnIndirizzoChanging(value);
					this.SendPropertyChanging();
					this._Indirizzo = value;
					this.SendPropertyChanged("Indirizzo");
					this.OnIndirizzoChanged();
				}
			}
		}
		
		[Column(Storage="_AddressFull", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=23)]
		public string AddressFull
		{
			get
			{
				return this._AddressFull;
			}
			set
			{
				if ((this._AddressFull != value))
				{
					this.OnAddressFullChanging(value);
					this.SendPropertyChanging();
					this._AddressFull = value;
					this.SendPropertyChanged("AddressFull");
					this.OnAddressFullChanged();
				}
			}
		}
		
		[Column(Storage="_flag_Geocoded", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=24)]
		public bool flag_Geocoded
		{
			get
			{
				return this._flag_Geocoded;
			}
			set
			{
				if ((this._flag_Geocoded != value))
				{
					this.Onflag_GeocodedChanging(value);
					this.SendPropertyChanging();
					this._flag_Geocoded = value;
					this.SendPropertyChanged("flag_Geocoded");
					this.Onflag_GeocodedChanged();
				}
			}
		}
		
		[Column(Storage="_AddressGEO", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=25)]
		public string AddressGEO
		{
			get
			{
				return this._AddressGEO;
			}
			set
			{
				if ((this._AddressGEO != value))
				{
					this.OnAddressGEOChanging(value);
					this.SendPropertyChanging();
					this._AddressGEO = value;
					this.SendPropertyChanged("AddressGEO");
					this.OnAddressGEOChanged();
				}
			}
		}
		
		[Column(Storage="_Latitude", DbType="Float", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=26)]
		public System.Nullable<double> Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[Column(Storage="_Longitude", DbType="Float", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=27)]
		public System.Nullable<double> Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[Column(Storage="_FacebookUserName", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=28)]
		public string FacebookUserName
		{
			get
			{
				return this._FacebookUserName;
			}
			set
			{
				if ((this._FacebookUserName != value))
				{
					this.OnFacebookUserNameChanging(value);
					this.SendPropertyChanging();
					this._FacebookUserName = value;
					this.SendPropertyChanged("FacebookUserName");
					this.OnFacebookUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Data", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		[DataMember(Order=29)]
		public string Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[Association(Name="LazyLoginMapper_LazyLogin_AnagraficaMain", Storage="_LazyLoginMapper", ThisKey="IdLL", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LazyLoginMapper LazyLoginMapper
		{
			get
			{
				return this._LazyLoginMapper.Entity;
			}
			set
			{
				LazyLoginMapper previousValue = this._LazyLoginMapper.Entity;
				if (((previousValue != value) 
							|| (this._LazyLoginMapper.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LazyLoginMapper.Entity = null;
						previousValue.LazyLogin_AnagraficaMain = null;
					}
					this._LazyLoginMapper.Entity = value;
					if ((value != null))
					{
						value.LazyLogin_AnagraficaMain = this;
						this._IdLL = value.Id;
					}
					else
					{
						this._IdLL = default(int);
					}
					this.SendPropertyChanged("LazyLoginMapper");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._LazyLoginMapper = default(EntityRef<LazyLoginMapper>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
}
#pragma warning restore 1591
